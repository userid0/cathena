
#include <stdio.h>
#include <stdlib.h>
#include <memory.h>
#include <string.h>
#include <ctype.h>
#include <sys/types.h>
#include <sys/stat.h>

#include "basesafeptr.h"
#include "basetime.h"


void vartest();


class memorymodule
{
public:
	memorymodule()	{}
	~memorymodule()	{}

	void *operator new (size_t sz)
	{
		void *a = malloc(sz);
		if(NULL==a) throw exception_memory("memory allocation failed");
		printf("memorymodule operator new sz=%u, returning %p\n", sz, a);
		return a;
	}
	void *operator new[] (size_t sz)
	{
		void *a = malloc(sz);
		if(NULL==a) exception_memory("memory allocation failed");
		printf("memorymodule operator new[] sz=%u, returning %p\n", sz, a);
		return a;
	}

	void operator delete (void * a)
	{
		printf("memorymodule operator delete deleting %p\n", a);
		if(a)
			free(a);
	}

	void operator delete[] (void *a)
	{
		printf("memorymodule operator delete[] deleting %p\n", a);
		if(a)
			free(a);
	}
};

class testclass : public memorymodule
{
	int a;
public:
	testclass()	{}
	~testclass()	{}

};

class AA
{
public:
	AA()	{ printf("ac\n"); }
	~AA()	{ printf("ad\n"); }

	int aa;

	int func()	{ return aa; }
};
class BB : public AA
{
public:
	BB()	{ printf("bc\n"); }
	~BB()	{ printf("bd\n"); }
	int bb;

	int func()	{ return bb; }
};



extern inline int newt_sqrt(int input)
{
	int new_value, value = input/2, count = 0;
	if (!value) //Division by zero fix, pointed out by Shinomori. [Skotlex]
		return input;
	do
	{
		new_value = (value + input/value)>>1;
		if (abs(value - new_value) <= 1)
			return new_value;
		value = new_value;
	}
	while (count++ < 25);
	return new_value;
}
// newton approximation
template<class T> extern inline T sqrt1(T n)
{
	if(n>0)
	{
		T q=0, qx=n/2;

		while( q!=qx && q+1!=qx )
		{
			q = qx;
			qx = (q + n/q)/2;
		}
		return q;
	}
	// should set matherr or throw something
	return 0;
}
// newton approximation
template<class T> extern inline T sqrt2(T n)
{
	if(n>0)
	{
		
		T q=0, qx = n>>(log2(n)/2);

		while( q!=qx && q+1!=qx )
		{
			q = qx;
			qx = (q + n/q)/2;
		}
		return q;
	}
	// should set matherr or throw something
	return 0;
}
// newton approximation
template<class T> extern inline T sqrt3(T n)
{
	if(n>0)
	{
		T q=0, qx = 1<<(log2(n)/2);

		while( q!=qx && q+1!=qx )
		{
			q = qx;
			qx = (q + n/q)/2;
		}
		return q;
	}
	// should set matherr or throw something
	return 0;
}
// newton approximation
template<class T> extern inline T sqrt4(T n)
{
	if(n>0)
	{
		T q=0, xx = (log2(n)/2), qx = ((n>>xx) + (1<<xx))/2;
		do
		{
			q  = qx;
			qx = (q + n/q)/2;
		}
		while( q!=qx && q+1!=qx );
		return q;
	}
	// should set matherr or throw something
	return 0;
}


// newton approximation
template<class T> extern inline T sqrt4test(T n)
{
	if(n>0)
	{
		T q=0, xx = (log2(n)/2), qx = ((n>>xx) + (1<<xx))/2;

		printf("srt %8u (", n);
		do
		{
			printf("%u->", qx);
			q  = qx;
			qx = (q + n/q)/2;
			printf("%u, ", qx);
		}
		while( q!=qx && q+1!=qx );
		
		printf(")(%u) = %u\n",qx,q);
		return q;
	}
	// should set matherr or throw something
	return 0;
}


void base1(int a, va_list ap)
{
	
	int b = va_arg(ap,int);
	int c = va_arg(ap,int);
	int d = va_arg(ap,int);
	int e = va_arg(ap,int);
	printf("call1: %i %i %i %i %i\n", a, b, c, d, e);

}
void base2(int a, va_list ap)
{
	int b = va_arg(ap,int);
	void* c = va_arg(ap,void*);
	int d = va_arg(ap,int);
	int e = va_arg(ap,int);

	printf("call1: %i %i %p %i %i\n", a, b, c, d, e);
}





void call(void (*func)(int,va_list), ...)
{
	va_list ap;
	va_start(ap, func);

	func(1, ap);
	func(2, ap);
	
	va_end(ap);
}

int argtest(void)
{
	void *x = (void *)&argtest;

	call(base1,2,3,4,5);
	call(base2,2,x,4,5);

	return 0;
}














class xlist : public noncopyable
{
	class xelem
	{
		friend class iterator;
		xelem* next;
	public:

		xelem() : next(NULL)	{}
	};
	xelem* list;
public:
	friend class iterator;
	xlist():list(NULL)	{}
};


class iterator : public noncopyable
{
	const xlist& x;
	xlist::xelem* elem;
public:
	void next()	{ if(elem) elem = elem->next; }

	iterator(const xlist& xx) : x(xx), elem(xx.list)	{}
};


template <class T> class list : public xlist
{
public:

};


template <class T> class xyz
{
public:
	int& getstart() { static int a=0; return a; }
};



class CDLinkNode
{
	CDLinkNode	*mpPrev;
	CDLinkNode	*mpNext;
public:
	CDLinkNode() : mpPrev(NULL), mpNext(NULL)
	{}
	CDLinkNode(CDLinkNode& root) : mpPrev(&root), mpNext(root.mpNext)
	{	// double link with one anchor,
		// add in front of all others
		root.mpNext = this;
		if(this->mpNext) this->mpNext->mpPrev = this;
	}
	CDLinkNode(CDLinkNode& head, CDLinkNode& tail) : mpPrev(tail.mpPrev), mpNext(&tail)
	{	// double link with two anchors
		// add at the end of the existing list
		if(!head.mpNext)
		{
			this->mpPrev = &head;
			head.mpNext = tail.mpPrev=this;
		}
		else if(this->mpPrev)
		{
			tail.mpPrev = this->mpPrev->mpNext = this;
		}
	}
	~CDLinkNode()	{ unlink(); }
	void link(CDLinkNode& root)
	{
		unlink();
		this->mpPrev = &root;
		this->mpNext = root.mpNext;
		root.mpNext = this;
		if(this->mpNext) this->mpNext->mpPrev = this;
	}
	void link(CDLinkNode& head, CDLinkNode& tail)
	{
		unlink();
		this->mpNext = &tail;
		this->mpPrev = tail.mpPrev;
		if(!head.mpNext)
		{	// first node insertion with neither head<->tail connected
			this->mpPrev = &head;
			head.mpNext = tail.mpPrev=this;
		}
		else if(this->mpPrev)
		{
			tail.mpPrev = this->mpPrev->mpNext = this;
		}
	}
	void unlink()
	{
		if(this->mpPrev) this->mpPrev->mpNext=this->mpNext;
		if(this->mpNext) this->mpNext->mpPrev=this->mpPrev;
		this->mpNext=NULL;
		this->mpPrev=NULL;
	}

	CDLinkNode* next()	{ return this->mpNext; }
	CDLinkNode* prev()	{ return this->mpPrev; }
};

















#define HUFFBITS unsigned long
#define HTN	34
#define MXOFF	250
 
struct huffcodetab
{
	char tablename[3];			// string, containing table_description
	unsigned int xlen;			// max. x-index+
	unsigned int ylen;			// max. y-index+
	unsigned int linbits;		// number of linbits
	unsigned int linmax;		// max number to be stored in linbits
	int ref;					// a positive value indicates a reference
	HUFFBITS *table;			// pointer to array[xlen][ylen]
	unsigned char *hlen;		// pointer to array[xlen][ylen]
	unsigned char(*val)[2];		// decoder tree
	unsigned int treelen;		// length of decoder tree
};

HUFFBITS dmask = 1 << (8*sizeof(HUFFBITS)-1);
unsigned int hs = sizeof(HUFFBITS)*8;

struct huffcodetab ht[HTN];	// array of all huffcodtable headers
				// 0..31 Huffman code table 0..31
				// 32,33 count1-tables




// read the huffman decoder table
int read_decoder_table(FILE *fi)
{
	int n,i,nn,t;
	unsigned int v0,v1;
	char command[100],line[100];
	for (n=0;n<HTN;n++)
	{
		// .table number treelen xlen ylen linbits
		do
		{
			fgets(line,99,fi);
		} while ((line[0] == '#') || (line[0] < ' '));
		
		sscanf(line,"%s %s %u %u %u %u",command,ht[n].tablename, &ht[n].treelen, &ht[n].xlen, &ht[n].ylen, &ht[n].linbits);
		if (strcmp(command,".end")==0)
			return n;
		else if (strcmp(command,".table")!=0)
		{
			fprintf(stderr,"huffman table %u data corrupted\n",n);
			return -1;
		}
		ht[n].linmax = (1<<ht[n].linbits)-1;
		sscanf(ht[n].tablename,"%u",&nn);
		if (nn != n)
		{
			fprintf(stderr,"wrong table number %u\n",n);
			return(-2);
		}
		do
		{
			fgets(line,99,fi);
		} while ((line[0] == '#') || (line[0] < ' '));
		
		sscanf(line,"%s %u",command,&t);
		if (strcmp(command,".reference")==0)
		{
			ht[n].ref   = t;
			ht[n].val   = ht[t].val;
			ht[n].treelen  = ht[t].treelen;
			if ( (ht[n].xlen != ht[t].xlen) || (ht[n].ylen != ht[t].ylen)  )
			{
				fprintf(stderr,"wrong table %u reference\n",n);
				return (-3);
			}
			while ((line[0] == '#') || (line[0] < ' ') )
			{
				fgets(line,99,fi);
			}
		}
		else if (strcmp(command,".treedata")==0)
		{
			ht[n].ref  = -1;
			ht[n].val = (unsigned char (*)[2])calloc(2*(ht[n].treelen),sizeof(unsigned char));
			if (ht[n].val == NULL)
			{
				fprintf(stderr, "heaperror at table %d\n",n);
				exit (-10);
			}
			printf("unsigned int table%02i = { \n", n);
			for (i=0;(unsigned int)i<ht[n].treelen; i++)
			{
				fscanf(fi,"%x %x",&v0, &v1);
				ht[n].val[i][0]=(unsigned char)v0;
				ht[n].val[i][1]=(unsigned char)v1;
				if(v0==0)
					printf("\t0x%X, 0x%02X,\n", v0, v1);
				else
					printf("\t0x%X, 0x%X,\n", v0, v1);
			}
			printf(" };\n");
			fgets(line,99,fi); // read the rest of the line
		}
		else
		{
			fprintf(stderr,"huffman decodertable error at table %d\n",n);
		}
	}
	return n;
}







struct node
{
	struct node* child0;
	struct node* child1;
	int value;
};

class Tree
{
	struct node field[7];
public:
	struct node* Root;

	Tree()
	{
		Root = &field[0];

		field[0].child0 = &field[2];
		field[0].child1 = &field[1];

		field[1].child0 = NULL;
		field[1].child1 = NULL;
		field[1].value  = 0;

		field[2].child0 = &field[4];
		field[2].child1 = &field[3];

		field[3].child0 = NULL;
		field[3].child1 = NULL;
		field[3].value  = 1;

		field[4].child0 = &field[6];
		field[4].child1 = &field[5];

		field[5].child0 = NULL;
		field[5].child1 = NULL;
		field[5].value  = 2;

		field[6].child0 = NULL;
		field[6].child1 = NULL;
		field[6].value  = 3;
	}
};


int decode(struct node *root, int* inbits, size_t incount, int*outbits, size_t maxoutcount)
{

	struct node *workingnode=root;
	size_t i, cnt=0;
	for(i=0; i<incount; i++)
	{
		if(inbits[i]==0)
			workingnode = workingnode->child0;
		else
			workingnode = workingnode->child1;

		if(workingnode->child0==NULL)
		{
			if(cnt<maxoutcount)
			{
				outbits[cnt++] = workingnode->value;
			}
			workingnode = root;
		}
	}
	return cnt;
}


bool decode(struct node *root, struct node *&workingnode, int inbit, int&outbit)
{
	if(inbit==0)
		workingnode = workingnode->child0;
	else
		workingnode = workingnode->child1;

	if(workingnode->child0==NULL)
	{
		outbit = workingnode->value;
		workingnode = root;
		return true;
	}
	return false;
}


class CFrameDecoder
{
public:
	enum STATE { IDLE, SYNC, HEADER, CRC, SIDEINFO, DATA };
	STATE state;
	

	unsigned sync    : 16;
	/*
	unsigned id      : 1;
	unsigned layer   : 2;
	unsigned protect : 1;
	*/
	unsigned sreg    : 16;
	/*
	unsigned bitrate : 4;
	unsigned sampfrq : 2;
	unsigned padding : 1;
	unsigned priv    : 1;
	unsigned mode    : 2;
	unsigned modeext : 2;
	unsigned copy    : 1;
	unsigned orig    : 1;
	unsigned emph    : 2;
	*/


	unsigned short crc;
	uint32 sideinfo[8];
	unsigned char  counter;

	CFrameDecoder()
	: state(IDLE), sync(0), sreg(0), crc(0)
	{}
	~CFrameDecoder()	{}

	void input( int val, unsigned short extcrc )
	{

		if(state == DATA)
		{
			// check crc
			if( (sync&0x0001) == 0x0001 &&
				extcrc != crc )
			{	// crc failed
				state= IDLE;
			}
			
			// look for a new sync word
			sync = (sync<<1) | (val?1:0);
			if( (sync&0x0FFF) == 0x0FFF )	// sync
				state= SYNC;
		}
		else if( state == IDLE )
		{	// look for a new syncword
			sync = (sync<<1) | (val?1:0);
			if( (sync&0x0FFF) == 0x0FFF )	// sync
				state= SYNC;
		}
		else if( state== SYNC )
		{	// found the sync, read and check the pre-header
			sync = (sync<<1) | (val?1:0);
			if( (sync&0xFFF0) == 0xFFF0 &&	// sync
				(sync&0x0008) == 0x0008 &&	// id==1
				(sync&0x0006) == 0x0002 )		// layer=='01' for layer3
			{	// read the header
				state= HEADER;
				counter=0;
			}
		}
		else if( state== HEADER )
		{	// read the header
			sreg = (sreg<<1) | (val?1:0);
			if(counter==15)
			{
				state   = CRC;
				counter = 0;
			}
			else
				counter++;
		}
		else if( state== CRC )
		{	// read the crc value
			crc = (crc<<1) | (val?1:0);
			if(counter==15)
			{
				state = SIDEINFO;
				counter = 0;
			}
			else
				counter++;
		}
		else if( state == SIDEINFO )
		{	// read the sideinfo
			sideinfo[counter/32] |= (0x80000000>>(counter%32));

			if( (counter==255 && (sreg&0x00C0)!=0x00C0) ||	// stereo( mode==00,01,10
				(counter==135 && (sreg&0x00C0)==0x00C0) )	// mono (mode==11)
			{
				state = DATA;
			}
			else
				counter++;
		}
	}
	
	bool isData()		{ return (state==DATA); }
	bool isCRC()		{ return (state==HEADER) || (state==SIDEINFO); }
	bool isCRCReset()	{ return (state==SYNC); }
	
	void reset()
	{
		state = IDLE;
		crc   = 0;
		sync  = 0;
		sreg  = 0;
	}



/*

	side info structure
	name								size in bits(mono)		(stereo)
	--------------------------------------------------------------------
	main_data_begin						9						9
	private bits						5						3
	--------------------------------------------------------------------
	scfsi[ch=0][band=0]					1						1
	scfsi[ch=0][band=1]					1						1
	scfsi[ch=0][band=2]					1						1
	scfsi[ch=0][band=3]					1						1
	--------------------------------------------------------------------
	scfsi[ch=1][band=0]											1
	scfsi[ch=1][band=1]											1
	scfsi[ch=1][band=2]											1
	scfsi[ch=1][band=3]											1
	--------------------------------------------------------------------

	--------------------------------------------------------------------
	part2_3_len[gr=0][ch=0]				12						12
	big_values[gr=0][ch=0]				9						9
	global_gain[gr=0][ch=0]				8						8
	scale_compress[gr=0][ch=0]			4						4
	window_switching[gr=0][ch=0]		1						1
	--------------------------------------------------------------------
	block_type[gr=0][ch=0]				2						2
	mixed_block[gr=0][ch=0]				1						1
	table_select[gr=0][ch=0][reg=0]		5						5
	table_select[gr=0][ch=0][reg=1]		5						5
	subblock_gain[gr=0][ch=0][win=0]	3						3
	subblock_gain[gr=0][ch=0][win=1]	3						3
	subblock_gain[gr=0][ch=0][win=2]	3						3
	::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	table_select[gr=0][ch=0][reg=0]		5						5
	table_select[gr=0][ch=0][reg=1]		5						5
	table_select[gr=0][ch=0][reg=2]		5						5
	region0_count[gr=0][ch=0]			4						4
	region1_count[gr=0][ch=0]			3						3
	--------------------------------------------------------------------
	preflag[gr=0][ch=0]					1						1
	scalefac_scale[gr=0][ch=0]			1						1
	count1table_sel[gr=0][ch=0]			1						1
	--------------------------------------------------------------------

	--------------------------------------------------------------------
	part2_3_len[gr=0][ch=1]										12
	big_values[gr=0][ch=1]										9
	global_gain[gr=0][ch=1]										8
	scale_compress[gr=0][ch=1]									4
	window_switching[gr=0][ch=1]								1
	--------------------------------------------------------------------
	block_type[gr=0][ch=1]										2
	mixed_block[gr=0][ch=1]										1
	table_select[gr=0][ch=1][reg=0]								5
	table_select[gr=0][ch=1][reg=1]								5
	subblock_gain[gr=0][ch=1][win=0]							3
	subblock_gain[gr=0][ch=1][win=1]							3
	subblock_gain[gr=0][ch=1][win=2]							3
	::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	table_select[gr=0][ch=1][reg=0]								5
	table_select[gr=0][ch=1][reg=1]								5
	table_select[gr=0][ch=1][reg=2]								5
	region0_count[gr=0][ch=1]									4
	region1_count[gr=0][ch=1]									3
	--------------------------------------------------------------------
	preflag[gr=0][ch=1]											1
	scalefac_scale[gr=0][ch=1]									1
	count1table_sel[gr=0][ch=1]									1
	--------------------------------------------------------------------

	--------------------------------------------------------------------
	part2_3_len[gr=1][ch=0]				12						12
	big_values[gr=1][ch=0]				9						9
	global_gain[gr=1][ch=0]				8						8
	scale_compress[gr=1][ch=0]			4						4
	window_switching[gr=1][ch=0]		1						1
	--------------------------------------------------------------------
	block_type[gr=1][ch=0]				2						2
	mixed_block[gr=1][ch=0]				1						1
	table_select[gr=1][ch=0][reg=0]		5						5
	table_select[gr=1][ch=0][reg=1]		5						5
	subblock_gain[gr=1][ch=0][win=0]	3						3
	subblock_gain[gr=1][ch=0][win=1]	3						3
	subblock_gain[gr=1][ch=0][win=2]	3						3
	::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	table_select[gr=1][ch=0][reg=0]		5						5
	table_select[gr=1][ch=0][reg=1]		5						5
	table_select[gr=1][ch=0][reg=2]		5						5
	region0_count[gr=1][ch=0]			4						4
	region1_count[gr=1][ch=0]			3						3
	--------------------------------------------------------------------
	preflag[gr=1][ch=0]					1						1
	scalefac_scale[gr=1][ch=0]			1						1
	count1table_sel[gr=1][ch=0]			1						1
	--------------------------------------------------------------------

	--------------------------------------------------------------------
	part2_3_len[gr=1][ch=1]										12
	big_values[gr=1][ch=1]										9
	global_gain[gr=1][ch=1]										8
	scale_compress[gr=1][ch=1]									4
	window_switching[gr=1][ch=1]								1
	--------------------------------------------------------------------
	block_type[gr=1][ch=1]										2
	mixed_block[gr=1][ch=1]										1
	table_select[gr=1][ch=1][reg=0]								5
	table_select[gr=1][ch=1][reg=1]								5
	subblock_gain[gr=1][ch=1][win=0]							3
	subblock_gain[gr=1][ch=1][win=1]							3
	subblock_gain[gr=1][ch=1][win=2]							3
	::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	table_select[gr=1][ch=1][reg=0]								5
	table_select[gr=1][ch=1][reg=1]								5
	table_select[gr=1][ch=1][reg=2]								5
	region0_count[gr=1][ch=1]									4
	region1_count[gr=1][ch=1]									3
	--------------------------------------------------------------------
	preflag[gr=1][ch=1]											1
	scalefac_scale[gr=1][ch=1]									1
	count1table_sel[gr=1][ch=1]									1
	--------------------------------------------------------------------
*/









};
class CCRC
{
	unsigned short sreg;
public:
	CCRC() : sreg(0xFFFF)	{}

	void input(int val)
	{	// X16 + X15 + X2 + 1
		sreg = (sreg << 1) ^ (( (val?1:0) ^ ((sreg&0x8000)?1:0) )?(0x8005):(0x0000));
	}
	unsigned short output()	{ return sreg; }
	void reset()			{ sreg = 0xFFFF; }
};

class CReader
{
	FILE* file;
	unsigned char last;
	unsigned char bit;
	
	
public:
	CReader() : file(NULL), last(0), bit(8)
	{
		file = fopen("input.mp3", "rb");
		if(!file) printf("\ncannot open 'input.mp3'\n");
	}
	~CReader()
	{
		if(file) fclose(file);
	}
	
	int getDataBit()
	{
		if(file)
		{
			if(bit>=8)
			{
				int i = fgetc(file);
				if(i==EOF)
					return 0;
				
				last = (unsigned char)i;
				bit=0;
			}
			return (last&(0x80>>bit++))?1:0;
		}
		return 0;
	}
	
};









unsigned int table00[] = { 
	0x0, 0x00,
	0x0, 0x00,
	0x0, 0x00 };
unsigned int table01[] = { 
	0x2, 0x1,
	0x0, 0x00,
	0x2, 0x1,
	0x0, 0x10,
	0x2, 0x1,
	0x0, 0x01,
	0x0, 0x11 };
unsigned int table02[] = { 
	0x2, 0x1,
	0x0, 0x00,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x10,
	0x0, 0x01,
	0x2, 0x1,
	0x0, 0x11,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x20,
	0x0, 0x21,
	0x2, 0x1,
	0x0, 0x12,
	0x2, 0x1,
	0x0, 0x02,
	0x0, 0x22 };
unsigned int table03[] = { 
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x00,
	0x0, 0x01,
	0x2, 0x1,
	0x0, 0x11,
	0x2, 0x1,
	0x0, 0x10,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x20,
	0x0, 0x21,
	0x2, 0x1,
	0x0, 0x12,
	0x2, 0x1,
	0x0, 0x02,
	0x0, 0x22 };

unsigned int table05[] = { 
	0x2, 0x1,
	0x0, 0x00,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x10,
	0x0, 0x01,
	0x2, 0x1,
	0x0, 0x11,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x20,
	0x0, 0x02,
	0x2, 0x1,
	0x0, 0x21,
	0x0, 0x12,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x22,
	0x0, 0x30,
	0x2, 0x1,
	0x0, 0x03,
	0x0, 0x13,
	0x2, 0x1,
	0x0, 0x31,
	0x2, 0x1,
	0x0, 0x32,
	0x2, 0x1,
	0x0, 0x23,
	0x0, 0x33 };
unsigned int table06[] = { 
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x00,
	0x0, 0x10,
	0x0, 0x11,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x01,
	0x2, 0x1,
	0x0, 0x20,
	0x0, 0x21,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x12,
	0x2, 0x1,
	0x0, 0x02,
	0x0, 0x22,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x31,
	0x0, 0x13,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x30,
	0x0, 0x32,
	0x2, 0x1,
	0x0, 0x23,
	0x2, 0x1,
	0x0, 0x03,
	0x0, 0x33 };
unsigned int table07[] = { 
	0x2, 0x1,
	0x0, 0x00,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x10,
	0x0, 0x01,
	0x8, 0x1,
	0x2, 0x1,
	0x0, 0x11,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x20,
	0x0, 0x02,
	0x0, 0x21,
	0x12, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x12,
	0x2, 0x1,
	0x0, 0x22,
	0x0, 0x30,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x31,
	0x0, 0x13,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x03,
	0x0, 0x32,
	0x2, 0x1,
	0x0, 0x23,
	0x0, 0x04,
	0xA, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x40,
	0x0, 0x41,
	0x2, 0x1,
	0x0, 0x14,
	0x2, 0x1,
	0x0, 0x42,
	0x0, 0x24,
	0xC, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x33,
	0x0, 0x43,
	0x0, 0x50,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x34,
	0x0, 0x05,
	0x0, 0x51,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x15,
	0x2, 0x1,
	0x0, 0x52,
	0x0, 0x25,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x44,
	0x0, 0x35,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x53,
	0x0, 0x54,
	0x2, 0x1,
	0x0, 0x45,
	0x0, 0x55 };
unsigned int table08[] = { 
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x00,
	0x2, 0x1,
	0x0, 0x10,
	0x0, 0x01,
	0x2, 0x1,
	0x0, 0x11,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x21,
	0x0, 0x12,
	0xE, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x20,
	0x0, 0x02,
	0x2, 0x1,
	0x0, 0x22,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x30,
	0x0, 0x03,
	0x2, 0x1,
	0x0, 0x31,
	0x0, 0x13,
	0xE, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x32,
	0x0, 0x23,
	0x2, 0x1,
	0x0, 0x40,
	0x0, 0x04,
	0x2, 0x1,
	0x0, 0x41,
	0x2, 0x1,
	0x0, 0x14,
	0x0, 0x42,
	0xC, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x24,
	0x2, 0x1,
	0x0, 0x33,
	0x0, 0x50,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x43,
	0x0, 0x34,
	0x0, 0x51,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x15,
	0x2, 0x1,
	0x0, 0x05,
	0x0, 0x52,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x25,
	0x2, 0x1,
	0x0, 0x44,
	0x0, 0x35,
	0x2, 0x1,
	0x0, 0x53,
	0x2, 0x1,
	0x0, 0x45,
	0x2, 0x1,
	0x0, 0x54,
	0x0, 0x55 };
unsigned int table09[] = { 
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x00,
	0x0, 0x10,
	0x2, 0x1,
	0x0, 0x01,
	0x0, 0x11,
	0xA, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x20,
	0x0, 0x21,
	0x2, 0x1,
	0x0, 0x12,
	0x2, 0x1,
	0x0, 0x02,
	0x0, 0x22,
	0xC, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x30,
	0x0, 0x03,
	0x0, 0x31,
	0x2, 0x1,
	0x0, 0x13,
	0x2, 0x1,
	0x0, 0x32,
	0x0, 0x23,
	0xC, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x41,
	0x0, 0x14,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x40,
	0x0, 0x33,
	0x2, 0x1,
	0x0, 0x42,
	0x0, 0x24,
	0xA, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x04,
	0x0, 0x50,
	0x0, 0x43,
	0x2, 0x1,
	0x0, 0x34,
	0x0, 0x51,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x15,
	0x0, 0x52,
	0x2, 0x1,
	0x0, 0x25,
	0x0, 0x44,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x05,
	0x0, 0x54,
	0x0, 0x53,
	0x2, 0x1,
	0x0, 0x35,
	0x2, 0x1,
	0x0, 0x45,
	0x0, 0x55 };
unsigned int table10[] = { 
	0x2, 0x1,
	0x0, 0x00,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x10,
	0x0, 0x01,
	0xA, 0x1,
	0x2, 0x1,
	0x0, 0x11,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x20,
	0x0, 0x02,
	0x2, 0x1,
	0x0, 0x21,
	0x0, 0x12,
	0x1C, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x22,
	0x0, 0x30,
	0x2, 0x1,
	0x0, 0x31,
	0x0, 0x13,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x03,
	0x0, 0x32,
	0x2, 0x1,
	0x0, 0x23,
	0x0, 0x40,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x41,
	0x0, 0x14,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x04,
	0x0, 0x33,
	0x2, 0x1,
	0x0, 0x42,
	0x0, 0x24,
	0x1C, 0x1,
	0xA, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x50,
	0x0, 0x05,
	0x0, 0x60,
	0x2, 0x1,
	0x0, 0x61,
	0x0, 0x16,
	0xC, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x43,
	0x0, 0x34,
	0x0, 0x51,
	0x2, 0x1,
	0x0, 0x15,
	0x2, 0x1,
	0x0, 0x52,
	0x0, 0x25,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x26,
	0x0, 0x36,
	0x0, 0x71,
	0x14, 0x1,
	0x8, 0x1,
	0x2, 0x1,
	0x0, 0x17,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x44,
	0x0, 0x53,
	0x0, 0x06,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x35,
	0x0, 0x45,
	0x0, 0x62,
	0x2, 0x1,
	0x0, 0x70,
	0x2, 0x1,
	0x0, 0x07,
	0x0, 0x64,
	0xE, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x72,
	0x0, 0x27,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x63,
	0x2, 0x1,
	0x0, 0x54,
	0x0, 0x55,
	0x2, 0x1,
	0x0, 0x46,
	0x0, 0x73,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x37,
	0x0, 0x65,
	0x2, 0x1,
	0x0, 0x56,
	0x0, 0x74,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x47,
	0x2, 0x1,
	0x0, 0x66,
	0x0, 0x75,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x57,
	0x0, 0x76,
	0x2, 0x1,
	0x0, 0x67,
	0x0, 0x77 };
unsigned int table11[] = { 
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x00,
	0x2, 0x1,
	0x0, 0x10,
	0x0, 0x01,
	0x8, 0x1,
	0x2, 0x1,
	0x0, 0x11,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x20,
	0x0, 0x02,
	0x0, 0x12,
	0x18, 0x1,
	0x8, 0x1,
	0x2, 0x1,
	0x0, 0x21,
	0x2, 0x1,
	0x0, 0x22,
	0x2, 0x1,
	0x0, 0x30,
	0x0, 0x03,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x31,
	0x0, 0x13,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x32,
	0x0, 0x23,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x40,
	0x0, 0x04,
	0x2, 0x1,
	0x0, 0x41,
	0x0, 0x14,
	0x1E, 0x1,
	0x10, 0x1,
	0xA, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x42,
	0x0, 0x24,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x33,
	0x0, 0x43,
	0x0, 0x50,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x34,
	0x0, 0x51,
	0x0, 0x61,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x16,
	0x2, 0x1,
	0x0, 0x06,
	0x0, 0x26,
	0x2, 0x1,
	0x0, 0x62,
	0x2, 0x1,
	0x0, 0x15,
	0x2, 0x1,
	0x0, 0x05,
	0x0, 0x52,
	0x10, 0x1,
	0xA, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x25,
	0x0, 0x44,
	0x0, 0x60,
	0x2, 0x1,
	0x0, 0x63,
	0x0, 0x36,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x70,
	0x0, 0x17,
	0x0, 0x71,
	0x10, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x07,
	0x0, 0x64,
	0x0, 0x72,
	0x2, 0x1,
	0x0, 0x27,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x53,
	0x0, 0x35,
	0x2, 0x1,
	0x0, 0x54,
	0x0, 0x45,
	0xA, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x46,
	0x0, 0x73,
	0x2, 0x1,
	0x0, 0x37,
	0x2, 0x1,
	0x0, 0x65,
	0x0, 0x56,
	0xA, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x55,
	0x0, 0x57,
	0x0, 0x74,
	0x2, 0x1,
	0x0, 0x47,
	0x0, 0x66,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x75,
	0x0, 0x76,
	0x2, 0x1,
	0x0, 0x67,
	0x0, 0x77 };
unsigned int table12[] = { 
	0xC, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x10,
	0x0, 0x01,
	0x2, 0x1,
	0x0, 0x11,
	0x2, 0x1,
	0x0, 0x00,
	0x2, 0x1,
	0x0, 0x20,
	0x0, 0x02,
	0x10, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x21,
	0x0, 0x12,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x22,
	0x0, 0x31,
	0x2, 0x1,
	0x0, 0x13,
	0x2, 0x1,
	0x0, 0x30,
	0x2, 0x1,
	0x0, 0x03,
	0x0, 0x40,
	0x1A, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x32,
	0x0, 0x23,
	0x2, 0x1,
	0x0, 0x41,
	0x0, 0x33,
	0xA, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x14,
	0x0, 0x42,
	0x2, 0x1,
	0x0, 0x24,
	0x2, 0x1,
	0x0, 0x04,
	0x0, 0x50,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x43,
	0x0, 0x34,
	0x2, 0x1,
	0x0, 0x51,
	0x0, 0x15,
	0x1C, 0x1,
	0xE, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x52,
	0x0, 0x25,
	0x2, 0x1,
	0x0, 0x53,
	0x0, 0x35,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x60,
	0x0, 0x16,
	0x0, 0x61,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x62,
	0x0, 0x26,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x05,
	0x0, 0x06,
	0x0, 0x44,
	0x2, 0x1,
	0x0, 0x54,
	0x0, 0x45,
	0x12, 0x1,
	0xA, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x63,
	0x0, 0x36,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x70,
	0x0, 0x07,
	0x0, 0x71,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x17,
	0x0, 0x64,
	0x2, 0x1,
	0x0, 0x46,
	0x0, 0x72,
	0xA, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x27,
	0x2, 0x1,
	0x0, 0x55,
	0x0, 0x73,
	0x2, 0x1,
	0x0, 0x37,
	0x0, 0x56,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x65,
	0x0, 0x74,
	0x2, 0x1,
	0x0, 0x47,
	0x0, 0x66,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x75,
	0x0, 0x57,
	0x2, 0x1,
	0x0, 0x76,
	0x2, 0x1,
	0x0, 0x67,
	0x0, 0x77 };
unsigned int table13[] = { 
	0x2, 0x1,
	0x0, 0x00,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x10,
	0x2, 0x1,
	0x0, 0x01,
	0x0, 0x11,
	0x1C, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x20,
	0x0, 0x02,
	0x2, 0x1,
	0x0, 0x21,
	0x0, 0x12,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x22,
	0x0, 0x30,
	0x2, 0x1,
	0x0, 0x03,
	0x0, 0x31,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x13,
	0x2, 0x1,
	0x0, 0x32,
	0x0, 0x23,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x40,
	0x0, 0x04,
	0x0, 0x41,
	0x46, 0x1,
	0x1C, 0x1,
	0xE, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x14,
	0x2, 0x1,
	0x0, 0x33,
	0x0, 0x42,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x24,
	0x0, 0x50,
	0x2, 0x1,
	0x0, 0x43,
	0x0, 0x34,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x51,
	0x0, 0x15,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x05,
	0x0, 0x52,
	0x2, 0x1,
	0x0, 0x25,
	0x2, 0x1,
	0x0, 0x44,
	0x0, 0x53,
	0xE, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x60,
	0x0, 0x06,
	0x2, 0x1,
	0x0, 0x61,
	0x0, 0x16,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x80,
	0x0, 0x08,
	0x0, 0x81,
	0x10, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x35,
	0x0, 0x62,
	0x2, 0x1,
	0x0, 0x26,
	0x0, 0x54,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x45,
	0x0, 0x63,
	0x2, 0x1,
	0x0, 0x36,
	0x0, 0x70,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x07,
	0x0, 0x55,
	0x0, 0x71,
	0x2, 0x1,
	0x0, 0x17,
	0x2, 0x1,
	0x0, 0x27,
	0x0, 0x37,
	0x48, 0x1,
	0x18, 0x1,
	0xC, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x18,
	0x0, 0x82,
	0x2, 0x1,
	0x0, 0x28,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x64,
	0x0, 0x46,
	0x0, 0x72,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x84,
	0x0, 0x48,
	0x2, 0x1,
	0x0, 0x90,
	0x0, 0x09,
	0x2, 0x1,
	0x0, 0x91,
	0x0, 0x19,
	0x18, 0x1,
	0xE, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x73,
	0x0, 0x65,
	0x2, 0x1,
	0x0, 0x56,
	0x0, 0x74,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x47,
	0x0, 0x66,
	0x0, 0x83,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x38,
	0x2, 0x1,
	0x0, 0x75,
	0x0, 0x57,
	0x2, 0x1,
	0x0, 0x92,
	0x0, 0x29,
	0xE, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x67,
	0x0, 0x85,
	0x2, 0x1,
	0x0, 0x58,
	0x0, 0x39,
	0x2, 0x1,
	0x0, 0x93,
	0x2, 0x1,
	0x0, 0x49,
	0x0, 0x86,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0xA0,
	0x2, 0x1,
	0x0, 0x68,
	0x0, 0x0A,
	0x2, 0x1,
	0x0, 0xA1,
	0x0, 0x1A,
	0x44, 0x1,
	0x18, 0x1,
	0xC, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xA2,
	0x0, 0x2A,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x95,
	0x0, 0x59,
	0x2, 0x1,
	0x0, 0xA3,
	0x0, 0x3A,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x4A,
	0x0, 0x96,
	0x2, 0x1,
	0x0, 0xB0,
	0x0, 0x0B,
	0x2, 0x1,
	0x0, 0xB1,
	0x0, 0x1B,
	0x14, 0x1,
	0x8, 0x1,
	0x2, 0x1,
	0x0, 0xB2,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x76,
	0x0, 0x77,
	0x0, 0x94,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x87,
	0x0, 0x78,
	0x0, 0xA4,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x69,
	0x0, 0xA5,
	0x0, 0x2B,
	0xC, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x5A,
	0x0, 0x88,
	0x0, 0xB3,
	0x2, 0x1,
	0x0, 0x3B,
	0x2, 0x1,
	0x0, 0x79,
	0x0, 0xA6,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x6A,
	0x0, 0xB4,
	0x0, 0xC0,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x0C,
	0x0, 0x98,
	0x0, 0xC1,
	0x3C, 0x1,
	0x16, 0x1,
	0xA, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x1C,
	0x2, 0x1,
	0x0, 0x89,
	0x0, 0xB5,
	0x2, 0x1,
	0x0, 0x5B,
	0x0, 0xC2,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x2C,
	0x0, 0x3C,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xB6,
	0x0, 0x6B,
	0x2, 0x1,
	0x0, 0xC4,
	0x0, 0x4C,
	0x10, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xA8,
	0x0, 0x8A,
	0x2, 0x1,
	0x0, 0xD0,
	0x0, 0x0D,
	0x2, 0x1,
	0x0, 0xD1,
	0x2, 0x1,
	0x0, 0x4B,
	0x2, 0x1,
	0x0, 0x97,
	0x0, 0xA7,
	0xC, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0xC3,
	0x2, 0x1,
	0x0, 0x7A,
	0x0, 0x99,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xC5,
	0x0, 0x5C,
	0x0, 0xB7,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x1D,
	0x0, 0xD2,
	0x2, 0x1,
	0x0, 0x2D,
	0x2, 0x1,
	0x0, 0x7B,
	0x0, 0xD3,
	0x34, 0x1,
	0x1C, 0x1,
	0xC, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x3D,
	0x0, 0xC6,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x6C,
	0x0, 0xA9,
	0x2, 0x1,
	0x0, 0x9A,
	0x0, 0xD4,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xB8,
	0x0, 0x8B,
	0x2, 0x1,
	0x0, 0x4D,
	0x0, 0xC7,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x7C,
	0x0, 0xD5,
	0x2, 0x1,
	0x0, 0x5D,
	0x0, 0xE0,
	0xA, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xE1,
	0x0, 0x1E,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x0E,
	0x0, 0x2E,
	0x0, 0xE2,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xE3,
	0x0, 0x6D,
	0x2, 0x1,
	0x0, 0x8C,
	0x0, 0xE4,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xE5,
	0x0, 0xBA,
	0x0, 0xF0,
	0x26, 0x1,
	0x10, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xF1,
	0x0, 0x1F,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xAA,
	0x0, 0x9B,
	0x0, 0xB9,
	0x2, 0x1,
	0x0, 0x3E,
	0x2, 0x1,
	0x0, 0xD6,
	0x0, 0xC8,
	0xC, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x4E,
	0x2, 0x1,
	0x0, 0xD7,
	0x0, 0x7D,
	0x2, 0x1,
	0x0, 0xAB,
	0x2, 0x1,
	0x0, 0x5E,
	0x0, 0xC9,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x0F,
	0x2, 0x1,
	0x0, 0x9C,
	0x0, 0x6E,
	0x2, 0x1,
	0x0, 0xF2,
	0x0, 0x2F,
	0x20, 0x1,
	0x10, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xD8,
	0x0, 0x8D,
	0x0, 0x3F,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0xF3,
	0x2, 0x1,
	0x0, 0xE6,
	0x0, 0xCA,
	0x2, 0x1,
	0x0, 0xF4,
	0x0, 0x4F,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xBB,
	0x0, 0xAC,
	0x2, 0x1,
	0x0, 0xE7,
	0x0, 0xF5,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xD9,
	0x0, 0x9D,
	0x2, 0x1,
	0x0, 0x5F,
	0x0, 0xE8,
	0x1E, 0x1,
	0xC, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x6F,
	0x2, 0x1,
	0x0, 0xF6,
	0x0, 0xCB,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xBC,
	0x0, 0xAD,
	0x0, 0xDA,
	0x8, 0x1,
	0x2, 0x1,
	0x0, 0xF7,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x7E,
	0x0, 0x7F,
	0x0, 0x8E,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x9E,
	0x0, 0xAE,
	0x0, 0xCC,
	0x2, 0x1,
	0x0, 0xF8,
	0x0, 0x8F,
	0x12, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xDB,
	0x0, 0xBD,
	0x2, 0x1,
	0x0, 0xEA,
	0x0, 0xF9,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x9F,
	0x0, 0xEB,
	0x2, 0x1,
	0x0, 0xBE,
	0x2, 0x1,
	0x0, 0xCD,
	0x0, 0xFA,
	0xE, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xDD,
	0x0, 0xEC,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xE9,
	0x0, 0xAF,
	0x0, 0xDC,
	0x2, 0x1,
	0x0, 0xCE,
	0x0, 0xFB,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xBF,
	0x0, 0xDE,
	0x2, 0x1,
	0x0, 0xCF,
	0x0, 0xEE,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xDF,
	0x0, 0xEF,
	0x2, 0x1,
	0x0, 0xFF,
	0x2, 0x1,
	0x0, 0xED,
	0x2, 0x1,
	0x0, 0xFD,
	0x2, 0x1,
	0x0, 0xFC,
	0x0, 0xFE };

unsigned int table15[] = { 
	0x10, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x00,
	0x2, 0x1,
	0x0, 0x10,
	0x0, 0x01,
	0x2, 0x1,
	0x0, 0x11,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x20,
	0x0, 0x02,
	0x2, 0x1,
	0x0, 0x21,
	0x0, 0x12,
	0x32, 0x1,
	0x10, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x22,
	0x2, 0x1,
	0x0, 0x30,
	0x0, 0x31,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x13,
	0x2, 0x1,
	0x0, 0x03,
	0x0, 0x40,
	0x2, 0x1,
	0x0, 0x32,
	0x0, 0x23,
	0xE, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x04,
	0x0, 0x14,
	0x0, 0x41,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x33,
	0x0, 0x42,
	0x2, 0x1,
	0x0, 0x24,
	0x0, 0x43,
	0xA, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x34,
	0x2, 0x1,
	0x0, 0x50,
	0x0, 0x05,
	0x2, 0x1,
	0x0, 0x51,
	0x0, 0x15,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x52,
	0x0, 0x25,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x44,
	0x0, 0x53,
	0x0, 0x61,
	0x5A, 0x1,
	0x24, 0x1,
	0x12, 0x1,
	0xA, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x35,
	0x2, 0x1,
	0x0, 0x60,
	0x0, 0x06,
	0x2, 0x1,
	0x0, 0x16,
	0x0, 0x62,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x26,
	0x0, 0x54,
	0x2, 0x1,
	0x0, 0x45,
	0x0, 0x63,
	0xA, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x36,
	0x2, 0x1,
	0x0, 0x70,
	0x0, 0x07,
	0x2, 0x1,
	0x0, 0x71,
	0x0, 0x55,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x17,
	0x0, 0x64,
	0x2, 0x1,
	0x0, 0x72,
	0x0, 0x27,
	0x18, 0x1,
	0x10, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x46,
	0x0, 0x73,
	0x2, 0x1,
	0x0, 0x37,
	0x0, 0x65,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x56,
	0x0, 0x80,
	0x2, 0x1,
	0x0, 0x08,
	0x0, 0x74,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x81,
	0x0, 0x18,
	0x2, 0x1,
	0x0, 0x82,
	0x0, 0x28,
	0x10, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x47,
	0x0, 0x66,
	0x2, 0x1,
	0x0, 0x83,
	0x0, 0x38,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x75,
	0x0, 0x57,
	0x2, 0x1,
	0x0, 0x84,
	0x0, 0x48,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x90,
	0x0, 0x19,
	0x0, 0x91,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x92,
	0x0, 0x76,
	0x2, 0x1,
	0x0, 0x67,
	0x0, 0x29,
	0x5C, 0x1,
	0x24, 0x1,
	0x12, 0x1,
	0xA, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x85,
	0x0, 0x58,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x09,
	0x0, 0x77,
	0x0, 0x93,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x39,
	0x0, 0x94,
	0x2, 0x1,
	0x0, 0x49,
	0x0, 0x86,
	0xA, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x68,
	0x2, 0x1,
	0x0, 0xA0,
	0x0, 0x0A,
	0x2, 0x1,
	0x0, 0xA1,
	0x0, 0x1A,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xA2,
	0x0, 0x2A,
	0x2, 0x1,
	0x0, 0x95,
	0x0, 0x59,
	0x1A, 0x1,
	0xE, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0xA3,
	0x2, 0x1,
	0x0, 0x3A,
	0x0, 0x87,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x78,
	0x0, 0xA4,
	0x2, 0x1,
	0x0, 0x4A,
	0x0, 0x96,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x69,
	0x0, 0xB0,
	0x0, 0xB1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x1B,
	0x0, 0xA5,
	0x0, 0xB2,
	0xE, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x5A,
	0x0, 0x2B,
	0x2, 0x1,
	0x0, 0x88,
	0x0, 0x97,
	0x2, 0x1,
	0x0, 0xB3,
	0x2, 0x1,
	0x0, 0x79,
	0x0, 0x3B,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x6A,
	0x0, 0xB4,
	0x2, 0x1,
	0x0, 0x4B,
	0x0, 0xC1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x98,
	0x0, 0x89,
	0x2, 0x1,
	0x0, 0x1C,
	0x0, 0xB5,
	0x50, 0x1,
	0x22, 0x1,
	0x10, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x5B,
	0x0, 0x2C,
	0x0, 0xC2,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x0B,
	0x0, 0xC0,
	0x0, 0xA6,
	0x2, 0x1,
	0x0, 0xA7,
	0x0, 0x7A,
	0xA, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xC3,
	0x0, 0x3C,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x0C,
	0x0, 0x99,
	0x0, 0xB6,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x6B,
	0x0, 0xC4,
	0x2, 0x1,
	0x0, 0x4C,
	0x0, 0xA8,
	0x14, 0x1,
	0xA, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x8A,
	0x0, 0xC5,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xD0,
	0x0, 0x5C,
	0x0, 0xD1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xB7,
	0x0, 0x7B,
	0x2, 0x1,
	0x0, 0x1D,
	0x2, 0x1,
	0x0, 0x0D,
	0x0, 0x2D,
	0xC, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xD2,
	0x0, 0xD3,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x3D,
	0x0, 0xC6,
	0x2, 0x1,
	0x0, 0x6C,
	0x0, 0xA9,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x9A,
	0x0, 0xB8,
	0x0, 0xD4,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x8B,
	0x0, 0x4D,
	0x2, 0x1,
	0x0, 0xC7,
	0x0, 0x7C,
	0x44, 0x1,
	0x22, 0x1,
	0x12, 0x1,
	0xA, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xD5,
	0x0, 0x5D,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xE0,
	0x0, 0x0E,
	0x0, 0xE1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x1E,
	0x0, 0xE2,
	0x2, 0x1,
	0x0, 0xAA,
	0x0, 0x2E,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xB9,
	0x0, 0x9B,
	0x2, 0x1,
	0x0, 0xE3,
	0x0, 0xD6,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x6D,
	0x0, 0x3E,
	0x2, 0x1,
	0x0, 0xC8,
	0x0, 0x8C,
	0x10, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xE4,
	0x0, 0x4E,
	0x2, 0x1,
	0x0, 0xD7,
	0x0, 0x7D,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xE5,
	0x0, 0xBA,
	0x2, 0x1,
	0x0, 0xAB,
	0x0, 0x5E,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xC9,
	0x0, 0x9C,
	0x2, 0x1,
	0x0, 0xF1,
	0x0, 0x1F,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xF0,
	0x0, 0x6E,
	0x0, 0xF2,
	0x2, 0x1,
	0x0, 0x2F,
	0x0, 0xE6,
	0x26, 0x1,
	0x12, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xD8,
	0x0, 0xF3,
	0x2, 0x1,
	0x0, 0x3F,
	0x0, 0xF4,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x4F,
	0x2, 0x1,
	0x0, 0x8D,
	0x0, 0xD9,
	0x2, 0x1,
	0x0, 0xBB,
	0x0, 0xCA,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xAC,
	0x0, 0xE7,
	0x2, 0x1,
	0x0, 0x7E,
	0x0, 0xF5,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x9D,
	0x0, 0x5F,
	0x2, 0x1,
	0x0, 0xE8,
	0x0, 0x8E,
	0x2, 0x1,
	0x0, 0xF6,
	0x0, 0xCB,
	0x22, 0x1,
	0x12, 0x1,
	0xA, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x0F,
	0x0, 0xAE,
	0x0, 0x6F,
	0x2, 0x1,
	0x0, 0xBC,
	0x0, 0xDA,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xAD,
	0x0, 0xF7,
	0x2, 0x1,
	0x0, 0x7F,
	0x0, 0xE9,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x9E,
	0x0, 0xCC,
	0x2, 0x1,
	0x0, 0xF8,
	0x0, 0x8F,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xDB,
	0x0, 0xBD,
	0x2, 0x1,
	0x0, 0xEA,
	0x0, 0xF9,
	0x10, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x9F,
	0x0, 0xDC,
	0x2, 0x1,
	0x0, 0xCD,
	0x0, 0xEB,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xBE,
	0x0, 0xFA,
	0x2, 0x1,
	0x0, 0xAF,
	0x0, 0xDD,
	0xE, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xEC,
	0x0, 0xCE,
	0x0, 0xFB,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xBF,
	0x0, 0xED,
	0x2, 0x1,
	0x0, 0xDE,
	0x0, 0xFC,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xCF,
	0x0, 0xFD,
	0x0, 0xEE,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xDF,
	0x0, 0xFE,
	0x2, 0x1,
	0x0, 0xEF,
	0x0, 0xFF };
unsigned int table16[] = { 
	0x2, 0x1,
	0x0, 0x00,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x10,
	0x2, 0x1,
	0x0, 0x01,
	0x0, 0x11,
	0x2A, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x20,
	0x0, 0x02,
	0x2, 0x1,
	0x0, 0x21,
	0x0, 0x12,
	0xA, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x22,
	0x2, 0x1,
	0x0, 0x30,
	0x0, 0x03,
	0x2, 0x1,
	0x0, 0x31,
	0x0, 0x13,
	0xA, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x32,
	0x0, 0x23,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x40,
	0x0, 0x04,
	0x0, 0x41,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x14,
	0x2, 0x1,
	0x0, 0x33,
	0x0, 0x42,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x24,
	0x0, 0x50,
	0x2, 0x1,
	0x0, 0x43,
	0x0, 0x34,
	0x8A, 0x1,
	0x28, 0x1,
	0x10, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x05,
	0x0, 0x15,
	0x0, 0x51,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x52,
	0x0, 0x25,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x44,
	0x0, 0x35,
	0x0, 0x53,
	0xA, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x60,
	0x0, 0x06,
	0x0, 0x61,
	0x2, 0x1,
	0x0, 0x16,
	0x0, 0x62,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x26,
	0x0, 0x54,
	0x2, 0x1,
	0x0, 0x45,
	0x0, 0x63,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x36,
	0x0, 0x70,
	0x0, 0x71,
	0x28, 0x1,
	0x12, 0x1,
	0x8, 0x1,
	0x2, 0x1,
	0x0, 0x17,
	0x2, 0x1,
	0x0, 0x07,
	0x2, 0x1,
	0x0, 0x55,
	0x0, 0x64,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x72,
	0x0, 0x27,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x46,
	0x0, 0x65,
	0x0, 0x73,
	0xA, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x37,
	0x2, 0x1,
	0x0, 0x56,
	0x0, 0x08,
	0x2, 0x1,
	0x0, 0x80,
	0x0, 0x81,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x18,
	0x2, 0x1,
	0x0, 0x74,
	0x0, 0x47,
	0x2, 0x1,
	0x0, 0x82,
	0x2, 0x1,
	0x0, 0x28,
	0x0, 0x66,
	0x18, 0x1,
	0xE, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x83,
	0x0, 0x38,
	0x2, 0x1,
	0x0, 0x75,
	0x0, 0x84,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x48,
	0x0, 0x90,
	0x0, 0x91,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x19,
	0x2, 0x1,
	0x0, 0x09,
	0x0, 0x76,
	0x2, 0x1,
	0x0, 0x92,
	0x0, 0x29,
	0xE, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x85,
	0x0, 0x58,
	0x2, 0x1,
	0x0, 0x93,
	0x0, 0x39,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xA0,
	0x0, 0x0A,
	0x0, 0x1A,
	0x8, 0x1,
	0x2, 0x1,
	0x0, 0xA2,
	0x2, 0x1,
	0x0, 0x67,
	0x2, 0x1,
	0x0, 0x57,
	0x0, 0x49,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x94,
	0x2, 0x1,
	0x0, 0x77,
	0x0, 0x86,
	0x2, 0x1,
	0x0, 0xA1,
	0x2, 0x1,
	0x0, 0x68,
	0x0, 0x95,
	0xDC, 0x1,
	0x7E, 0x1,
	0x32, 0x1,
	0x1A, 0x1,
	0xC, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x2A,
	0x2, 0x1,
	0x0, 0x59,
	0x0, 0x3A,
	0x2, 0x1,
	0x0, 0xA3,
	0x2, 0x1,
	0x0, 0x87,
	0x0, 0x78,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xA4,
	0x0, 0x4A,
	0x2, 0x1,
	0x0, 0x96,
	0x0, 0x69,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xB0,
	0x0, 0x0B,
	0x0, 0xB1,
	0xA, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x1B,
	0x0, 0xB2,
	0x2, 0x1,
	0x0, 0x2B,
	0x2, 0x1,
	0x0, 0xA5,
	0x0, 0x5A,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0xB3,
	0x2, 0x1,
	0x0, 0xA6,
	0x0, 0x6A,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xB4,
	0x0, 0x4B,
	0x2, 0x1,
	0x0, 0x0C,
	0x0, 0xC1,
	0x1E, 0x1,
	0xE, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xB5,
	0x0, 0xC2,
	0x0, 0x2C,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xA7,
	0x0, 0xC3,
	0x2, 0x1,
	0x0, 0x6B,
	0x0, 0xC4,
	0x8, 0x1,
	0x2, 0x1,
	0x0, 0x1D,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x88,
	0x0, 0x97,
	0x0, 0x3B,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xD1,
	0x0, 0xD2,
	0x2, 0x1,
	0x0, 0x2D,
	0x0, 0xD3,
	0x12, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x1E,
	0x0, 0x2E,
	0x0, 0xE2,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x79,
	0x0, 0x98,
	0x0, 0xC0,
	0x2, 0x1,
	0x0, 0x1C,
	0x2, 0x1,
	0x0, 0x89,
	0x0, 0x5B,
	0xE, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x3C,
	0x2, 0x1,
	0x0, 0x7A,
	0x0, 0xB6,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x4C,
	0x0, 0x99,
	0x2, 0x1,
	0x0, 0xA8,
	0x0, 0x8A,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x0D,
	0x2, 0x1,
	0x0, 0xC5,
	0x0, 0x5C,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x3D,
	0x0, 0xC6,
	0x2, 0x1,
	0x0, 0x6C,
	0x0, 0x9A,
	0x58, 0x1,
	0x56, 0x1,
	0x24, 0x1,
	0x10, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x8B,
	0x0, 0x4D,
	0x2, 0x1,
	0x0, 0xC7,
	0x0, 0x7C,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xD5,
	0x0, 0x5D,
	0x2, 0x1,
	0x0, 0xE0,
	0x0, 0x0E,
	0x8, 0x1,
	0x2, 0x1,
	0x0, 0xE3,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xD0,
	0x0, 0xB7,
	0x0, 0x7B,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xA9,
	0x0, 0xB8,
	0x0, 0xD4,
	0x2, 0x1,
	0x0, 0xE1,
	0x2, 0x1,
	0x0, 0xAA,
	0x0, 0xB9,
	0x18, 0x1,
	0xA, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x9B,
	0x0, 0xD6,
	0x0, 0x6D,
	0x2, 0x1,
	0x0, 0x3E,
	0x0, 0xC8,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x8C,
	0x0, 0xE4,
	0x0, 0x4E,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xD7,
	0x0, 0xE5,
	0x2, 0x1,
	0x0, 0xBA,
	0x0, 0xAB,
	0xC, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x9C,
	0x0, 0xE6,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x6E,
	0x0, 0xD8,
	0x2, 0x1,
	0x0, 0x8D,
	0x0, 0xBB,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xE7,
	0x0, 0x9D,
	0x2, 0x1,
	0x0, 0xE8,
	0x0, 0x8E,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xCB,
	0x0, 0xBC,
	0x0, 0x9E,
	0x0, 0xF1,
	0x2, 0x1,
	0x0, 0x1F,
	0x2, 0x1,
	0x0, 0x0F,
	0x0, 0x2F,
	0x42, 0x1,
	0x38, 0x1,
	0x2, 0x1,
	0x0, 0xF2,
	0x34, 0x1,
	0x32, 0x1,
	0x14, 0x1,
	0x8, 0x1,
	0x2, 0x1,
	0x0, 0xBD,
	0x2, 0x1,
	0x0, 0x5E,
	0x2, 0x1,
	0x0, 0x7D,
	0x0, 0xC9,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0xCA,
	0x2, 0x1,
	0x0, 0xAC,
	0x0, 0x7E,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xDA,
	0x0, 0xAD,
	0x0, 0xCC,
	0xA, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0xAE,
	0x2, 0x1,
	0x0, 0xDB,
	0x0, 0xDC,
	0x2, 0x1,
	0x0, 0xCD,
	0x0, 0xBE,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xEB,
	0x0, 0xED,
	0x0, 0xEE,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xD9,
	0x0, 0xEA,
	0x0, 0xE9,
	0x2, 0x1,
	0x0, 0xDE,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xDD,
	0x0, 0xEC,
	0x0, 0xCE,
	0x0, 0x3F,
	0x0, 0xF0,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xF3,
	0x0, 0xF4,
	0x2, 0x1,
	0x0, 0x4F,
	0x2, 0x1,
	0x0, 0xF5,
	0x0, 0x5F,
	0xA, 0x1,
	0x2, 0x1,
	0x0, 0xFF,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xF6,
	0x0, 0x6F,
	0x2, 0x1,
	0x0, 0xF7,
	0x0, 0x7F,
	0xC, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x8F,
	0x2, 0x1,
	0x0, 0xF8,
	0x0, 0xF9,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x9F,
	0x0, 0xFA,
	0x0, 0xAF,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xFB,
	0x0, 0xBF,
	0x2, 0x1,
	0x0, 0xFC,
	0x0, 0xCF,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xFD,
	0x0, 0xDF,
	0x2, 0x1,
	0x0, 0xFE,
	0x0, 0xEF };
unsigned int table24[] = { 
	0x3C, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x00,
	0x0, 0x10,
	0x2, 0x1,
	0x0, 0x01,
	0x0, 0x11,
	0xE, 0x1,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x20,
	0x0, 0x02,
	0x0, 0x21,
	0x2, 0x1,
	0x0, 0x12,
	0x2, 0x1,
	0x0, 0x22,
	0x2, 0x1,
	0x0, 0x30,
	0x0, 0x03,
	0xE, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x31,
	0x0, 0x13,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x32,
	0x0, 0x23,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x40,
	0x0, 0x04,
	0x0, 0x41,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x14,
	0x0, 0x33,
	0x2, 0x1,
	0x0, 0x42,
	0x0, 0x24,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x43,
	0x0, 0x34,
	0x0, 0x51,
	0x6, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x50,
	0x0, 0x05,
	0x0, 0x15,
	0x2, 0x1,
	0x0, 0x52,
	0x0, 0x25,
	0xFA, 0x1,
	0x62, 0x1,
	0x22, 0x1,
	0x12, 0x1,
	0xA, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x44,
	0x0, 0x53,
	0x2, 0x1,
	0x0, 0x35,
	0x2, 0x1,
	0x0, 0x60,
	0x0, 0x06,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x61,
	0x0, 0x16,
	0x2, 0x1,
	0x0, 0x62,
	0x0, 0x26,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x54,
	0x0, 0x45,
	0x2, 0x1,
	0x0, 0x63,
	0x0, 0x36,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x71,
	0x0, 0x55,
	0x2, 0x1,
	0x0, 0x64,
	0x0, 0x46,
	0x20, 0x1,
	0xE, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x72,
	0x2, 0x1,
	0x0, 0x27,
	0x0, 0x37,
	0x2, 0x1,
	0x0, 0x73,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x70,
	0x0, 0x07,
	0x0, 0x17,
	0xA, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x65,
	0x0, 0x56,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x80,
	0x0, 0x08,
	0x0, 0x81,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x74,
	0x0, 0x47,
	0x2, 0x1,
	0x0, 0x18,
	0x0, 0x82,
	0x10, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x28,
	0x0, 0x66,
	0x2, 0x1,
	0x0, 0x83,
	0x0, 0x38,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x75,
	0x0, 0x57,
	0x2, 0x1,
	0x0, 0x84,
	0x0, 0x48,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x91,
	0x0, 0x19,
	0x2, 0x1,
	0x0, 0x92,
	0x0, 0x76,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x67,
	0x0, 0x29,
	0x2, 0x1,
	0x0, 0x85,
	0x0, 0x58,
	0x5C, 0x1,
	0x22, 0x1,
	0x10, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x93,
	0x0, 0x39,
	0x2, 0x1,
	0x0, 0x94,
	0x0, 0x49,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x77,
	0x0, 0x86,
	0x2, 0x1,
	0x0, 0x68,
	0x0, 0xA1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xA2,
	0x0, 0x2A,
	0x2, 0x1,
	0x0, 0x95,
	0x0, 0x59,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xA3,
	0x0, 0x3A,
	0x2, 0x1,
	0x0, 0x87,
	0x2, 0x1,
	0x0, 0x78,
	0x0, 0x4A,
	0x16, 0x1,
	0xC, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xA4,
	0x0, 0x96,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x69,
	0x0, 0xB1,
	0x2, 0x1,
	0x0, 0x1B,
	0x0, 0xA5,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0xB2,
	0x2, 0x1,
	0x0, 0x5A,
	0x0, 0x2B,
	0x2, 0x1,
	0x0, 0x88,
	0x0, 0xB3,
	0x10, 0x1,
	0xA, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x90,
	0x2, 0x1,
	0x0, 0x09,
	0x0, 0xA0,
	0x2, 0x1,
	0x0, 0x97,
	0x0, 0x79,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xA6,
	0x0, 0x6A,
	0x0, 0xB4,
	0xC, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x1A,
	0x2, 0x1,
	0x0, 0x0A,
	0x0, 0xB0,
	0x2, 0x1,
	0x0, 0x3B,
	0x2, 0x1,
	0x0, 0x0B,
	0x0, 0xC0,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x4B,
	0x0, 0xC1,
	0x2, 0x1,
	0x0, 0x98,
	0x0, 0x89,
	0x43, 0x1,
	0x22, 0x1,
	0x10, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x1C,
	0x0, 0xB5,
	0x2, 0x1,
	0x0, 0x5B,
	0x0, 0xC2,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x2C,
	0x0, 0xA7,
	0x2, 0x1,
	0x0, 0x7A,
	0x0, 0xC3,
	0xA, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x3C,
	0x2, 0x1,
	0x0, 0x0C,
	0x0, 0xD0,
	0x2, 0x1,
	0x0, 0xB6,
	0x0, 0x6B,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xC4,
	0x0, 0x4C,
	0x2, 0x1,
	0x0, 0x99,
	0x0, 0xA8,
	0x10, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x8A,
	0x0, 0xC5,
	0x2, 0x1,
	0x0, 0x5C,
	0x0, 0xD1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xB7,
	0x0, 0x7B,
	0x2, 0x1,
	0x0, 0x1D,
	0x0, 0xD2,
	0x9, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x2D,
	0x0, 0xD3,
	0x2, 0x1,
	0x0, 0x3D,
	0x0, 0xC6,
	0x55, 0xFA,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x6C,
	0x0, 0xA9,
	0x2, 0x1,
	0x0, 0x9A,
	0x0, 0xD4,
	0x20, 0x1,
	0x10, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xB8,
	0x0, 0x8B,
	0x2, 0x1,
	0x0, 0x4D,
	0x0, 0xC7,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x7C,
	0x0, 0xD5,
	0x2, 0x1,
	0x0, 0x5D,
	0x0, 0xE1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x1E,
	0x0, 0xE2,
	0x2, 0x1,
	0x0, 0xAA,
	0x0, 0xB9,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x9B,
	0x0, 0xE3,
	0x2, 0x1,
	0x0, 0xD6,
	0x0, 0x6D,
	0x14, 0x1,
	0xA, 0x1,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x3E,
	0x2, 0x1,
	0x0, 0x2E,
	0x0, 0x4E,
	0x2, 0x1,
	0x0, 0xC8,
	0x0, 0x8C,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xE4,
	0x0, 0xD7,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x7D,
	0x0, 0xAB,
	0x0, 0xE5,
	0xA, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xBA,
	0x0, 0x5E,
	0x2, 0x1,
	0x0, 0xC9,
	0x2, 0x1,
	0x0, 0x9C,
	0x0, 0x6E,
	0x8, 0x1,
	0x2, 0x1,
	0x0, 0xE6,
	0x2, 0x1,
	0x0, 0x0D,
	0x2, 0x1,
	0x0, 0xE0,
	0x0, 0x0E,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xD8,
	0x0, 0x8D,
	0x2, 0x1,
	0x0, 0xBB,
	0x0, 0xCA,
	0x4A, 0x1,
	0x2, 0x1,
	0x0, 0xFF,
	0x40, 0x1,
	0x3A, 0x1,
	0x20, 0x1,
	0x10, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xAC,
	0x0, 0xE7,
	0x2, 0x1,
	0x0, 0x7E,
	0x0, 0xD9,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x9D,
	0x0, 0xE8,
	0x2, 0x1,
	0x0, 0x8E,
	0x0, 0xCB,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xBC,
	0x0, 0xDA,
	0x2, 0x1,
	0x0, 0xAD,
	0x0, 0xE9,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x9E,
	0x0, 0xCC,
	0x2, 0x1,
	0x0, 0xDB,
	0x0, 0xBD,
	0x10, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xEA,
	0x0, 0xAE,
	0x2, 0x1,
	0x0, 0xDC,
	0x0, 0xCD,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xEB,
	0x0, 0xBE,
	0x2, 0x1,
	0x0, 0xDD,
	0x0, 0xEC,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xCE,
	0x0, 0xED,
	0x2, 0x1,
	0x0, 0xDE,
	0x0, 0xEE,
	0x0, 0x0F,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xF0,
	0x0, 0x1F,
	0x0, 0xF1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xF2,
	0x0, 0x2F,
	0x2, 0x1,
	0x0, 0xF3,
	0x0, 0x3F,
	0x12, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xF4,
	0x0, 0x4F,
	0x2, 0x1,
	0x0, 0xF5,
	0x0, 0x5F,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xF6,
	0x0, 0x6F,
	0x2, 0x1,
	0x0, 0xF7,
	0x2, 0x1,
	0x0, 0x7F,
	0x0, 0x8F,
	0xA, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xF8,
	0x0, 0xF9,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x9F,
	0x0, 0xAF,
	0x0, 0xFA,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xFB,
	0x0, 0xBF,
	0x2, 0x1,
	0x0, 0xFC,
	0x0, 0xCF,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0xFD,
	0x0, 0xDF,
	0x2, 0x1,
	0x0, 0xFE,
	0x0, 0xEF };
unsigned int table32[] = { 
	0x2, 0x1,
	0x0, 0x00,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x08,
	0x0, 0x04,
	0x2, 0x1,
	0x0, 0x01,
	0x0, 0x02,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x0C,
	0x0, 0x0A,
	0x2, 0x1,
	0x0, 0x03,
	0x0, 0x06,
	0x6, 0x1,
	0x2, 0x1,
	0x0, 0x09,
	0x2, 0x1,
	0x0, 0x05,
	0x0, 0x07,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x0E,
	0x0, 0x0D,
	0x2, 0x1,
	0x0, 0x0F,
	0x0, 0x0B };
unsigned int table33[] = { 
	0x10, 0x1,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x00,
	0x0, 0x01,
	0x2, 0x1,
	0x0, 0x02,
	0x0, 0x03,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x04,
	0x0, 0x05,
	0x2, 0x1,
	0x0, 0x06,
	0x0, 0x07,
	0x8, 0x1,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x08,
	0x0, 0x09,
	0x2, 0x1,
	0x0, 0x0A,
	0x0, 0x0B,
	0x4, 0x1,
	0x2, 0x1,
	0x0, 0x0C,
	0x0, 0x0D,
	0x2, 0x1,
	0x0, 0x0E,
	0x0, 0x0F };


struct hufftables
{
	unsigned int linbits;
	unsigned int *table;
};

struct hufftables tables[34] = 
{
	{ 0, table00 },
	{ 0, table01 },
	{ 0, table02 },
	{ 0, table03 },
	{ 0, table00 },	// not used
	{ 0, table05 },
	{ 0, table06 },
	{ 0, table07 },
	{ 0, table08 },
	{ 0, table09 },
	{ 0, table10 },
	{ 0, table11 },
	{ 0, table12 },
	{ 0, table13 },
	{ 0, table00 },	// not used
	{ 0, table15 },
	{ 1, table16 },
	{ 2, table16 },
	{ 3, table16 },
	{ 4, table16 },
	{ 6, table16 },
	{ 8, table16 },
	{10, table16 },
	{13, table16 },
	{ 4, table24 },
	{ 5, table24 },
	{ 6, table24 },
	{ 7, table24 },
	{ 8, table24 },
	{ 9, table24 },
	{11, table24 },
	{13, table24 },
	{ 0, table32 },		// quadruple A
	{ 0, table33 }		// quadruple B
};



bool decode(struct hufftables root, unsigned int &offs, unsigned inbit, unsigned char &outbit)
{
	// using the exact tables as the standard implementation (just reformated)
	// therefore need to multiply with 2 for correct target offset
	if(inbit==0)
		offs += 2*root.table[offs+0];
	else
		offs += 2*root.table[offs+1];

	// checking new position
	// not syntesizable
	if( root.table[offs+0]==0 )
	{
		outbit = root.table[offs+1];
		offs=0;
		return true;
	}
	return false;
}



int testmain(int argc, char *argv[])
{

	{

		unsigned bits[] = { 0,0,1,1,1,0,1,0,1,1,0,0,1,1,1,0,1,0,1,1,0,1,1,0,1,1 };
		unsigned i;
		unsigned char res;
		unsigned int offs=0;


		for(i=0; i<sizeof(bits)/sizeof(*bits); i++)
		{
			printf("%u", bits[i]);
			if( decode(tables[6], offs, bits[i], res) )
				printf(" -> %02X\n", res);
		}

		return 0;



	
	}




	{
		FILE*file = fopen("huffdec", "rb");
		read_decoder_table(file);
	
	}

	{
		CReader       reader;
		CFrameDecoder fdec;
		CCRC		  crc;
		int i,k;

		for(i=0; i<3*626*8; i++)
		{

			k = reader.getDataBit();
			if( fdec.isCRCReset() )
				crc.reset();
			else if( fdec.isCRC() )
				crc.input(k);


			fdec.input(k, crc.output());
			if(i%(fdec.isData()?1176:8)==0)
				printf("");
		}
	}








/*
//huffman test
	{
		
		int arrayin [20] = { 0,0,0,0,0,0,1,0,1,1,0,1,0,1,1,1,1,1,1,1 };
		int arrayout[20] = { 0,0,0,0,0,0,1,0,1,1,0,1,0,1,1,1,1,1,1,1 };

		Tree tree;
		struct node *workingnode=tree.Root;

		int outnum=decode(tree.Root, arrayin, 20, arrayout, 20);

		int i;
		for(i=0; i<outnum; i++)
			printf("%i ", arrayout[i]);
		printf("\n");

		for(i=0; i<20; i++)
		{
			if( decode(tree.Root, workingnode, arrayin[i], outnum) )
				printf("%i ", outnum);
		}
		printf("\n");

	}
*/




/*
//double linked list
	CDLinkNode head, tail, root;

	{
	CDLinkNode a(head,tail);
	CDLinkNode b(head,tail);
	CDLinkNode c(head,tail);
	}

	{
	CDLinkNode d(root);
	CDLinkNode e(root);
	{
	CDLinkNode f(root);
	}
	}

	list<int> intlist;

	iterator iter(intlist);
	iter.next();

	xyz<int> ia;
	xyz<long> ib;

	int& a = ia.getstart();
	int& b = ib.getstart();
*/

//	argtest();

/*	{
		unsigned long i, r1;
		double k, r2;
		unsigned long tick1, tick2;

		tick1=GetTickCount();
		for(i=0; i<10000000; i+=1)
			r1=sqrt1(i);
		tick2=GetTickCount();
		printf("%lu ", tick2-tick1);

		tick1=GetTickCount();
		for(i=0; i<10000000; i+=1)
			r1=sqrt2(i);
		tick2=GetTickCount();
		printf("%lu ", tick2-tick1);

		tick1=GetTickCount();
		for(i=0; i<10000000; i+=1)
			r1=sqrt3(i);
		tick2=GetTickCount();
		printf("%lu ", tick2-tick1);


		tick1=GetTickCount();
		for(k=0; k<10000000; k+=1)
			r2=sqrt(k);
		tick2=GetTickCount();
		printf("%lu \n", tick2-tick1);
	}
*/

/*	{
		size_t k;
		for(k=0; k<40; k++)
			sqrt4test(k);

		return 0;
	}
*/
/*	{
		size_t k,v,res;
		int i;

		for(k=0; k<0x00010000; k++)
		for(i=-10; i<10; i++)
		{
			v = k*k+i;
			printf("\r%u                                   ", v);
			if( (int)v >=0 )
			{
				res = sqrt4(v);
				if( res != (size_t)sqrt(v) )
					printf("\rerr: %i -> %i != %lf (%i,%i,%i)\n", v, res, sqrt(v), (log2(v)/2), (v>>(log2(v)/2)), (1<<(log2(v)/2)), ((v>>(log2(v)/2))+(1<<(log2(v)/2)))/2);
			}
		}
		printf("\n");
		return 0;
	}
*/
/*
	{
		unsigned long tick;
		size_t j,r=0;
		size_t i,k, start, run=1000, width=10000, res=0;

		for(start=0x7FFFFFFF; start; start>>=4)
		{
			printf("starting sqrt with %i, %i ascending numbers, %i runs\n", start, width, run);

			printf("results: shino1 %i, shino2 %i, shino3 %i, shino4 %i, skot %i, std sqrt %lf\n", sqrt1(start), sqrt2(start), sqrt3(start), sqrt4(start), newt_sqrt(start),sqrt(start));

			tick = GetTickCount();
			for(k=0;k<run; k++)
			for(i=start;i<start+width;i++)
				res += sqrt1(i);
			printf("%li ", GetTickCount()-tick);
			printf("sqrt shinomori, init with n/2\n");
			
			tick = GetTickCount();
			for(k=0;k<run; k++)
			for(i=start;i<start+width;i++)
				res += sqrt2(i);
			printf("%li ", GetTickCount()-tick);
			printf("sqrt shinomori, init with n>>log2(n)/2\n");

			tick = GetTickCount();
			for(k=0;k<run; k++)
			for(i=start;i<start+width;i++)
				res += sqrt3(i);
			printf("%li ", GetTickCount()-tick);
			printf("sqrt shinomori, init with 1<<log2(n)/2\n");
			
			tick = GetTickCount();
			for(k=0;k<run; k++)
			for(i=start;i<start+width;i++)
				res += sqrt4(i);
			printf("%li ", GetTickCount()-tick);
			printf("sqrt shinomori, init with (n>>log2(n)/2+1<<log2(n)/2)/2\n");

			tick = GetTickCount();
			for(k=0;k<run; k++)
			for(i=start;i<start+width;i++)
				res += newt_sqrt(i);
			printf("%li ", GetTickCount()-tick);
			printf("sqrt skotlex, init with n/2 + division by zero fix\n");

			tick = GetTickCount();
			for(k=0;k<run; k++)
			for(j=start;j<start+width;j++)
				r += (size_t)sqrt((double)j);
			printf("%li ", GetTickCount()-tick);
			printf("standard double sqrt\n");
		}
		
	}

*/

/*
	{
		BB bb;

		int x = bb.func();
		int y = bb.AA::func();
	}
return 0;
*/
/*
	printf("%i\n", sizeof(testclass));
	testclass* aaa1= new testclass;
	testclass* aaa2= new testclass[2];
	delete aaa1;
	delete[] aaa2;

	vartest();
*/

	return 0;
}