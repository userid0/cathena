#include "eacompiler.h"


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

class Variant
{
	class _value
	{
		friend class Variant;

		typedef enum _value_type
		{
			VAR_NONE = 0,
			VAR_INTEGER,
			VAR_STRING,
			VAR_FLOAT,
			VAR_ARRAY,
		} VARTYPE;

		VARTYPE			cType;
		union
		{	// integer
			int64		cInteger;
			// double
			double		cFloat;
			// string (actually a pointer to a string<> object since a class cannot be a union member)
			void*		cString;
			// array
			Variant*	cArray;
		};
		size_t			cSize;
	public:
		///////////////////////////////////////////////////////////////////////
		// default constructor/destructor
		_value() :cType(VAR_NONE), cInteger(0), cSize(1)
		{}
		~_value()
		{
			clear();
		}
		///////////////////////////////////////////////////////////////////////
		// type constructors
		_value(const _value &v) :cType(VAR_NONE), cInteger(0), cSize(1)
		{	assign(v);
		}
		_value(const int val) :cType(VAR_INTEGER), cInteger(val), cSize(1)
		{}
		_value(const double val) :cType(VAR_FLOAT), cFloat(val), cSize(1)
		{}
		_value(const char* val) :cType(VAR_STRING), cString(new string<>(val)), cSize(1)
		{}
		_value(const string<>& val) :cType(VAR_STRING), cString(new string<>(val)), cSize(1)
		{}

		///////////////////////////////////////////////////////////////////////
		//
		const _value& operator=(const _value &v)
		{
			assign(v);
			return *this; 
		}
		const _value& operator=(const int val)
		{
			assign(val);
			return *this; 
		}
		const _value& operator=(const double val)
		{
			assign(val);
			return *this; 
		}
		const _value& operator=(const char* val)
		{
			assign(val);
			return *this; 
		}
		const _value& operator=(const string<>& val)
		{
			assign(val);
			return *this; 
		}
		///////////////////////////////////////////////////////////////////////
		//
		void assign(const _value &v)
		{
			clear();
			switch(v.cType)
			{
			case VAR_INTEGER:
				cType = VAR_INTEGER;
				cSize=1;
				cInteger = v.cInteger; 
				break;
			case VAR_FLOAT:
				cType = VAR_FLOAT;
				cSize=1;
				cFloat = v.cFloat; 
				break;
			case VAR_STRING:
				cType = VAR_STRING;
				cSize=1;
				cString = (void*)(new string<>( *((string<>*)v.cString)) );
				break;
			case VAR_ARRAY:
			{
				size_t i;
				cType = VAR_ARRAY;
				cSize=v.cSize;
				cArray = new Variant[cSize];
				for(i=0; i<cSize; i++)
					cArray[i] = v.cArray[i];
				break;
			}
			case VAR_NONE: // already initialized for this
			default:
				break;
			}
		}
		void assign(const int val)
		{
			clear();
			cType = VAR_INTEGER;
			cSize=1;
			cInteger = val; 
		}
		void assign(const double val)
		{
			clear();
			cType = VAR_FLOAT;
			cSize=1;
			cFloat = val;
		}
		void assign(const char* val)
		{
			clear();
			cType = VAR_STRING;
			cSize=1;
			cString = (void*)(new string<>(val));
		}
		void assign(const string<>& val)
		{
			clear();
			cType = VAR_STRING;
			cSize=1;
			cString = (void*)(new string<>(val));
		}

		///////////////////////////////////////////////////////////////////////
		//
		void clear()
		{	
			switch(cType)
			{
			case VAR_ARRAY:
				if(cArray) delete [] cArray;
				break;
			case VAR_STRING:
				if(cString) delete ((string<>*)cString);
				break;
			case VAR_INTEGER:
			case VAR_FLOAT:
			default:
				break;
			}
			cType = VAR_NONE;
			cInteger = 0;
			cSize = 0;
		}
		///////////////////////////////////////////////////////////////////////
		bool isValid() const	{ return cType != VAR_NONE; }	
		bool isInt() const		{ return cType == VAR_INTEGER; }	
		bool isFloat() const	{ return cType == VAR_FLOAT; }	
		bool isString() const	{ return cType == VAR_STRING; }	
		bool isArray() const	{ return cType == VAR_ARRAY; }
		size_t getSize() const	{ return (cType== VAR_ARRAY) ? cSize : 1; }
		///////////////////////////////////////////////////////////////////////
		void setarray(size_t cnt)
		{	// generate an array from this node and set cArray[0] with current content
			Variant *temp = new Variant[cnt];
			// copy stuff into cArray[0]
			temp[0].cValue->cType = this->cType;
			temp[0].cValue->cSize = this->cSize;
			switch(this->cType)
			{
			case VAR_INTEGER:
				temp[0].cValue->cInteger = this->cInteger; 
				break;
			case VAR_FLOAT:
				temp[0].cValue->cFloat = this->cFloat; 
				break;
			case VAR_STRING:
				temp[0].cValue->cString = this->cString;
				break;
			case VAR_ARRAY:
				temp[0].cValue->cArray = this->cArray;
				break;
			case VAR_NONE: // already initialized for this
			default:
				break;
			}
			// make this an array
			this->cType = VAR_ARRAY;
			this->cArray= temp;
			this->cSize = cnt;
		}
		///////////////////////////////////////////////////////////////////////
		void addarray(size_t cnt)
		{	
			if( this->cType == VAR_ARRAY )
			{	// go into elements
				size_t i;
				for(i=0; i<cSize; i++)
					cArray[i].addarray(cnt);
			}
			else
			{	// make this node an array
				setarray(cnt);
			}
		}

		friend int compare(const Variant& va, const Variant& vb);
	};

	friend class Variant::_value;

	TPtrCommon< _value > cValue;

public:
	///////////////////////////////////////////////////////////////////////////
	// Construction/Destruction
	Variant()	{}
	~Variant()	{}
	///////////////////////////////////////////////////////////////////////////
	// Copy/Assignment
	Variant(const Variant &v, bool ref=false)	{ assign(v, ref); }
	Variant(int val)							{ assign(val); }
	Variant(double val)							{ assign(val); }
	Variant(const char* val)					{ assign(val); }
	const Variant& operator=(const Variant &v)	{ assign(v);   return *this; }
	const Variant& operator=(const int val)		{ assign(val); return *this; }
	const Variant& operator=(const double val)	{ assign(val); return *this; }
	const Variant& operator=(const char* val)	{ assign(val); return *this; }

	///////////////////////////////////////////////////////////////////////
	// type of the variant
	bool isReference() const	{ return cValue.isReference(); }
	void makeValue() const		{ cValue.setaccess(AUTOREF); }		// enable copy-on-write
	void makeVariable() const	{ cValue.setaccess(AUTOCOUNT); }	// disable copy-on-write

	///////////////////////////////////////////////////////////////////////////
	// Type Initialize Variant (aka copy)
	void assign(const Variant& v, bool ref=false)
	{
		if( cValue.isReference() )
			cValue = v.cValue;			// just share the pointer
		else
			*(cValue) = *(v.cValue);	// copy the content
		if(ref) cValue.setaccess(AUTOCOUNT); // disable copy-on-write for references
	}
	///////////////////////////////////////////////////////////////////////////
	// Type Initialize Integer
	void assign(int val)
	{
		cValue->assign(val);
	}
	///////////////////////////////////////////////////////////////////////////
	// Type Initialize double
	void assign(double val)
	{
		cValue->assign(val);
	}
	///////////////////////////////////////////////////////////////////////////
	// Type Initialize String
	void assign(const char* val)
	{
		cValue->assign(val);
	}
	///////////////////////////////////////////////////////////////////////////
	// Create Array from actual element
	void setarray(size_t cnt)
	{	
		if(cnt>0)
		{
			cValue->setarray(cnt);
		}
		else
			clear();
	}
	///////////////////////////////////////////////////////////////////////////
	// Create Array by vectorizing deepest elements
	void addarray(size_t cnt)
	{	
		if(cnt>0)
		{
			cValue->addarray(cnt);
		}
		else
			clear();
	}

	///////////////////////////////////////////////////////////////////////////
	// clear this
	void clear()
	{
		cValue->clear();
	}


	///////////////////////////////////////////////////////////////////////////
	// Access to elements
	bool isValid() const	{ return cValue->isValid(); }
	bool isInt() const		{ return cValue->isInt(); }
	bool isFloat() const	{ return cValue->isFloat(); }
	bool isString() const	{ return cValue->isString(); }
	bool isArray() const	{ return cValue->isArray(); }
	size_t getSize() const	{ return cValue->getSize(); }

	///////////////////////////////////////////////////////////////////////////
	// Access to array elements
	const Variant& operator[](size_t inx) const
	{	// on Arrays return the element, out of bounds return element 0
		// other array accesses return this object
		return (cValue->isArray()) ? ((inx<cValue->getSize()) ? cValue->cArray[inx] : cValue->cArray[0]) : *this;
		return *this;
	}
	Variant& operator[](size_t inx)
	{	// on Arrays return the element, out of bounds return element 0
		// other array accesses return this object
		return (cValue->isArray()) ? ((inx<cValue->getSize()) ? cValue->cArray[inx] : cValue->cArray[0]) : *this;
		return *this;
	}

	///////////////////////////////////////////////////////////////////////////
	// local conversions
	void convert2string()
	{
		if(cValue->cType!=_value::VAR_STRING)
		{
			switch(cValue->cType)
			{
			case _value::VAR_NONE:
				assign("");
				break;
			case _value::VAR_INTEGER:
				assign( string<>((int)(cValue->cInteger)) );
				break;
			case _value::VAR_FLOAT:
				assign( string<>(cValue->cFloat) );
				break;
			case _value::VAR_STRING:
				break;
			case _value::VAR_ARRAY:
				assign( cValue->cArray[0].getString() );
				break;
			}
		}
	}
	void convert2float()
	{
		if(cValue->cType!=_value::VAR_FLOAT)
		{
			assign( this->getFloat() );
		}
	}
	void convert2int()
	{
		if(cValue->cType!=_value::VAR_INTEGER)
		{
			assign( this->getInt() );
		}
	}
	void convert2number()
	{
		if(cValue->cType!=_value::VAR_INTEGER && cValue->cType!=_value::VAR_FLOAT)
		{
			if( this->getFloat() != floor(this->getFloat()) )
				assign( this->getFloat() );
			else
				assign( this->getInt() );
		}
	}
	void cast(int type)
	{	//!! using parser opcodes here
		switch(type)
		{
		case PT_INT:
			convert2int();
		case PT_STRING:
			convert2string();
		case PT_DOUBLE:
			convert2float();
		}
	}
	///////////////////////////////////////////////////////////////////////////
	// access conversion 
	string<> getString() const
	{
		switch(cValue->cType)
		{
		case _value::VAR_NONE:
			break;
		case _value::VAR_INTEGER:
			return string<>((int)(cValue->cInteger));
		case _value::VAR_FLOAT:
			return string<>(cValue->cFloat);
		case _value::VAR_STRING:
			return *((string<>*)(cValue->cString));
		case _value::VAR_ARRAY:
			return cValue->cArray[0].getString();
		}	
		return string<>("");
	}
	double getFloat() const
	{
		switch(cValue->cType)
		{
		case _value::VAR_NONE:
			break;
		case _value::VAR_INTEGER:
			return (int)(cValue->cInteger);
		case _value::VAR_FLOAT:
			return cValue->cFloat;
		case _value::VAR_STRING:
			return atof(*((string<>*)(cValue->cString)));
		case _value::VAR_ARRAY:
			return cValue->cArray[0].getFloat();
		}	
		return 0.0;
	}
	int getInt() const
	{
		switch(cValue->cType)
		{
		case _value::VAR_NONE:
			break;
		case _value::VAR_INTEGER:
			return (int)(cValue->cInteger);
		case _value::VAR_FLOAT:
			return (int)( floor(0.5+cValue->cFloat) );
		case _value::VAR_STRING:
			return atoi(*((string<>*)(cValue->cString)));
		case _value::VAR_ARRAY:
			return cValue->cArray[0].getInt();
		}	
		return 0;
	}

	///////////////////////////////////////////////////////////////////////////
	// unary operations
	const Variant operator-() const
	{
		if( isValid() )
		{
			Variant temp(*this);
			if( temp.isArray() )
			{	// go through the array
				size_t i;
				for(i=0; i<temp.cValue->cSize; i++)
					temp.cValue->cArray[i] = -(temp.cValue->cArray[i]);
			}
			else 
			{
				temp.convert2number();
				if( temp.isFloat() )
					temp.cValue->cFloat = -(temp.cValue->cFloat);
				else
					temp.cValue->cInteger = -(temp.cValue->cInteger);
			}
			return temp;
		}
		return *this;
	}
	const Variant operator~() const
	{
		if( isValid() )
		{
			Variant temp(*this);
			if( temp.isArray() )
			{	// go through the array
				size_t i;
				for(i=0; i<temp.cValue->cSize; i++)
					temp.cValue->cArray[i] = ~(temp.cValue->cArray[i]);
			}
			else
			{
				temp.convert2int();
				temp.cValue->cInteger = ~(temp.cValue->cInteger);
			}
			return temp;
		}
		return *this;
	}
	const Variant operator!() const
	{
		if( isValid() )
		{
			Variant temp(*this);
			if( temp.isArray() )
			{	// go through the array
				size_t i;
				for(i=0; i<temp.cValue->cSize; i++)
					temp.cValue->cArray[i] = !(temp.cValue->cArray[i]);
			}
			else
			{
				temp.convert2int();
				temp.cValue->cInteger = !(temp.cValue->cInteger);
			}
			return temp;
		}
		return *this;
	}



	///////////////////////////////////////////////////////////////////////////
	// arithmetic operations
	const Variant& operator+=(const Variant& v)
	{
		if( !isValid() || !v.isValid() )
		{	// invalid inputs, invalid output
			clear();
		}
		////////////////////////////
		// simple types at the end
		else if( isArray() && v.isArray() )
		{	// add two arrays
			// don't check for dimension mismatches, just pad with zeros
			size_t i, val = min(cValue->cSize, v.cValue->cSize);
			for(i=0; i<val; i++)
				cValue->cArray[i] += v.cValue->cArray[i];

		}
		else if( isArray() && !v.isArray() )
		{	// add a given skalar recursively to a local array
			size_t i;
			for(i=0; i<cValue->cSize; i++)
				cValue->cArray[i] += v;
		}
		else if( !isArray() && v.isArray() )
		{	// add a local skalar to a given array
			size_t i;
			Variant temp(*this);
			this->setarray(v.cValue->cSize);
			for(i=0; i<v.cValue->cSize; i++)
			{	
				this->cValue->cArray[i]  = temp;
				this->cValue->cArray[i] += v.cValue->cArray[i];
			}
		}
		////////////////////////////
		// simple types at the end
		else if( isString() || v.isString() )
		{	// add as strings
			convert2string();
			string<>* pstr = (string<>*)(cValue->cString);
			*pstr += v.getString();
		}
		else if( isFloat() || v.isFloat() )
		{
			convert2float();
			cValue->cFloat += v.getFloat();
		}
		else
		{
			convert2int();
			cValue->cInteger += v.getInt();
		}
		return *this;
	}
	friend Variant operator+(const Variant& va, const Variant& vb)
	{
		Variant temp(va);
		temp += vb;
		return temp;
	}

	const Variant& operator-=(const Variant& v)
	{
		if( !isValid() || !v.isValid() )
		{	// invalid inputs, invalid output
			clear();
		}
		////////////////////////////
		// simple types at the end
		else if( isArray() && v.isArray() )
		{	// add two arrays
			// don't check for dimension mismatches, just pad with zeros
			size_t i, val = min(cValue->cSize, v.cValue->cSize);
			for(i=0; i<val; i++)
				cValue->cArray[i] -= v.cValue->cArray[i];

		}
		else if( isArray() && !v.isArray() )
		{	// add a given skalar recursively to a local array
			size_t i;
			for(i=0; i<cValue->cSize; i++)
				cValue->cArray[i] -= v;
		}
		else if( !isArray() && v.isArray() )
		{	// add a local skalar to a given array
			size_t i;
			Variant temp(*this);
			this->setarray(v.cValue->cSize);
			for(i=0; i<v.cValue->cSize; i++)
			{	
				this->cValue->cArray[i]  = temp;
				this->cValue->cArray[i] -= v.cValue->cArray[i];
			}
		}
		////////////////////////////
		// simple types at the end
		//else if( isString() || v.isString() )
		//{	// '-' not defined for strings
		//}
		else if( isFloat() || v.isFloat() )
		{
			convert2float();
			cValue->cFloat -= v.getFloat();
		}
		else
		{
			convert2int();
			cValue->cInteger -= v.getInt();
		}
		return *this;
	}
	friend Variant operator-(const Variant& va, const Variant& vb)
	{
		Variant temp(va);
		temp -= vb;
		return temp;

	}

	const Variant& operator*=(const Variant& v)
	{
		if( !isValid() || !v.isValid() )
		{	// invalid inputs, invalid output
			clear();
		}
		////////////////////////////
		// simple types at the end
		else if( isArray() && v.isArray() )
		{	// add two arrays
			// don't check for dimension mismatches, just pad with zeros
			size_t i, val = min(cValue->cSize, v.cValue->cSize);
			for(i=0; i<val; i++)
				cValue->cArray[i] *= v.cValue->cArray[i];
			// for the rest of the elements, multiply with 0
			for(   ; i<cValue->cSize; i++)
				cValue->cArray[i] *= 0;
		}
		else if( isArray() && !v.isArray() )
		{	// add a given skalar recursively to a local array
			size_t i;
			for(i=0; i<cValue->cSize; i++)
				cValue->cArray[i] *= v;
		}
		else if( !isArray() && v.isArray() )
		{	// add a local skalar to a given array
			size_t i;
			Variant temp(*this);
			this->setarray(v.cValue->cSize);
			for(i=0; i<v.cValue->cSize; i++)
			{	
				this->cValue->cArray[i]  = temp;
				this->cValue->cArray[i] *= v.cValue->cArray[i];
			}
		}
		////////////////////////////
		// simple types at the end
		//else if( isString() || v.isString() )
		//{	// '-' not defined for strings
		//}
		else if( isFloat() || v.isFloat() )
		{
			convert2float();
			cValue->cFloat *= v.getFloat();
		}
		else
		{
			convert2int();
			cValue->cInteger *= v.getInt();
		}
		return *this;
	}
	friend Variant operator*(const Variant& va, const Variant& vb)
	{
		Variant temp(va);
		temp *= vb;
		return temp;

	}
	const Variant& operator/=(const Variant& v)
	{
		if( !isValid() || !v.isValid() )
		{	// invalid inputs, invalid output
			clear();
		}
		////////////////////////////
		// simple types at the end
		else if( isArray() && v.isArray() )
		{	// add two arrays
			// don't check for dimension mismatches, just pad with zeros
			size_t i, val = min(cValue->cSize, v.cValue->cSize);
			for(i=0; i<val; i++)
				cValue->cArray[i] /= v.cValue->cArray[i];
			// for the rest of the elements, divide by 0 -> invalid
			for(   ; i<cValue->cSize; i++)
				cValue->cArray[i].clear();
		}
		else if( isArray() && !v.isArray() )
		{	// add a given skalar recursively to a local array
			size_t i;
			for(i=0; i<cValue->cSize; i++)
				cValue->cArray[i] /= v;
		}
		else if( !isArray() && v.isArray() )
		{	// add a local skalar to a given array
			size_t i;
			Variant temp(*this);
			this->setarray(v.cValue->cSize);
			for(i=0; i<v.cValue->cSize; i++)
			{	
				this->cValue->cArray[i]  = temp;
				this->cValue->cArray[i] /= v.cValue->cArray[i];
			}
		}
		////////////////////////////
		// simple types at the end
		//else if( isString() || v.isString() )
		//{	// '-' not defined for strings
		//}
		else if( isFloat() || v.isFloat() )
		{
			
			if( 0==v.getFloat() )
				clear();
			else
			{
				convert2float();
				cValue->cFloat /= v.getFloat();
			}
		}
		else
		{
			if( 0==v.getInt() )
				clear();
			else
			{
				convert2int();
				cValue->cInteger /= v.getInt();
			}
		}
		return *this;
	}
	friend Variant operator/(const Variant& va, const Variant& vb)
	{
		Variant temp(va);
		temp /= vb;
		return temp;
	}
	///////////////////////////////////////////////////////////////////////////
	// Define postfix increment operator.
	Variant operator++(int)
	{
		Variant temp(*this);
		if( isValid() )
		{
			if( isArray() )
			{	
				size_t i;
				for(i=0; i<cValue->cSize; i++)
					cValue->cArray[i]++;
			}
			else 
			{	
				convert2number();
				*this+=1;
			}
		}
		return temp;
	}
	Variant operator--(int)
	{
		Variant temp(*this);
		if( isValid() )
		{
			if( isArray() )
			{	
				size_t i;
				for(i=0; i<cValue->cSize; i++)
					--cValue->cArray[i];
			}
			else 
			{	
				convert2number();
				*this-=1;
			}
		}
		return temp;
	}
	///////////////////////////////////////////////////////////////////////////
	// Define prefix increment operator.
	Variant& operator++() 
	{
		if( isValid() )
		{
			if( isArray() )
			{	
				size_t i;
				for(i=0; i<cValue->cSize; i++)
					++cValue->cArray[i];
			}
			else 
			{	
				convert2number();
				*this+=1;
			}
		}
		return *this;
	}
	Variant& operator--() 
	{
		if( isValid() )
		{
			if( isArray() )
			{	
				size_t i;
				for(i=0; i<cValue->cSize; i++)
					--cValue->cArray[i];
			}
			else 
			{	
				convert2number();
				*this-=1;
			}
		}
		return *this;
	}

	///////////////////////////////////////////////////////////////////////////
	// binary/logic operations
	const Variant& operator&=(const Variant& v)
	{
		if( !isValid() || !v.isValid() )
		{	// invalid inputs, invalid output
			clear();
		}
		////////////////////////////
		// simple types at the end
		else if( isArray() && v.isArray() )
		{	// add two arrays
			// don't check for dimension mismatches, just pad with zeros
			size_t i, val = min(cValue->cSize, v.cValue->cSize);
			for(i=0; i<val; i++)
				cValue->cArray[i] &= v.cValue->cArray[i];
			// for the rest of the elements, use 0
			for(   ; i<cValue->cSize; i++)
				cValue->cArray[i] = 0;
		}
		else if( isArray() && !v.isArray() )
		{	// add a given skalar recursively to a local array
			size_t i;
			for(i=0; i<cValue->cSize; i++)
				cValue->cArray[i] &= v;
		}
		else if( !isArray() && v.isArray() )
		{	// add a local skalar to a given array
			size_t i;
			Variant temp(*this);
			this->setarray(v.cValue->cSize);
			for(i=0; i<v.cValue->cSize; i++)
			{	
				this->cValue->cArray[i]  = temp;
				this->cValue->cArray[i] &= v.cValue->cArray[i];
			}
		}
		////////////////////////////
		// simple types at the end
		else if( isString() || v.isString() )
		{	// make it append two strings
			convert2string();
			string<>* pstr = (string<>*)(cValue->cString);
			*pstr += v.getString();
		}
		else
		{
			convert2int();
			cValue->cInteger &= v.getInt();
		}
		return *this;
	}
	friend Variant operator&(const Variant& va, const Variant& vb)
	{
		Variant temp(va);
		temp &= vb;
		return temp;
	}
	const Variant& operator|=(const Variant& v)
	{
		if( !isValid() || !v.isValid() )
		{	// invalid inputs, invalid output
			clear();
		}
		////////////////////////////
		// simple types at the end
		else if( isArray() && v.isArray() )
		{	// add two arrays
			// don't check for dimension mismatches, just pad with zeros
			size_t i, val = min(cValue->cSize, v.cValue->cSize);
			for(i=0; i<val; i++)
				cValue->cArray[i] |= v.cValue->cArray[i];
			// for the rest of the elements, do nothing
		}
		else if( isArray() && !v.isArray() )
		{	// add a given skalar recursively to a local array
			size_t i;
			for(i=0; i<cValue->cSize; i++)
				cValue->cArray[i] |= v;
		}
		else if( !isArray() && v.isArray() )
		{	// add a local skalar to a given array
			size_t i;
			Variant temp(*this);
			this->setarray(v.cValue->cSize);
			for(i=0; i<v.cValue->cSize; i++)
			{	
				this->cValue->cArray[i]  = temp;
				this->cValue->cArray[i] |= v.cValue->cArray[i];
			}
		}
		////////////////////////////
		// simple types at the end
		//else if( isString() || v.isString() )
		//{	// not defined for strings
		//}
		else
		{
			convert2int();
			cValue->cInteger |= v.getInt();
		}
		return *this;
	}
	friend Variant operator|(const Variant& va, const Variant& vb)
	{
		Variant temp(va);
		temp |= vb;
		return temp;
	}
	const Variant& operator^=(const Variant& v)
	{
		if( !isValid() || !v.isValid() )
		{	// invalid inputs, invalid output
			clear();
		}
		////////////////////////////
		// simple types at the end
		else if( isArray() && v.isArray() )
		{	// add two arrays
			// don't check for dimension mismatches, just pad with zeros
			size_t i, val = min(cValue->cSize, v.cValue->cSize);
			for(i=0; i<val; i++)
				cValue->cArray[i] ^= v.cValue->cArray[i];
			// for the rest of the elements, do nothing
		}
		else if( isArray() && !v.isArray() )
		{	// add a given skalar recursively to a local array
			size_t i;
			for(i=0; i<cValue->cSize; i++)
				cValue->cArray[i] ^= v;
		}
		else if( !isArray() && v.isArray() )
		{	// add a local skalar to a given array
			size_t i;
			Variant temp(*this);
			this->setarray(v.cValue->cSize);
			for(i=0; i<v.cValue->cSize; i++)
			{	
				this->cValue->cArray[i]  = temp;
				this->cValue->cArray[i] ^= v.cValue->cArray[i];
			}
		}
		////////////////////////////
		// simple types at the end
		//else if( isString() || v.isString() )
		//{	// not defined for strings
		//}
		else
		{
			convert2int();
			cValue->cInteger ^= v.getInt();
		}
		return *this;
	}
	friend Variant operator^(const Variant& va, const Variant& vb)
	{
		Variant temp(va);
		temp ^= vb;
		return temp;
	}
	const Variant& operator>>=(const Variant& v)
	{
		if( !isValid() || !v.isValid() )
		{	// invalid inputs, invalid output
			clear();
		}
		////////////////////////////
		// simple types at the end
		else if( isArray() && v.isArray() )
		{	// add two arrays
			// don't check for dimension mismatches, just pad with zeros
			size_t i, val = min(cValue->cSize, v.cValue->cSize);
			for(i=0; i<val; i++)
				cValue->cArray[i] >>= v.cValue->cArray[i];
			// for the rest of the elements, do nothing
		}
		else if( isArray() && !v.isArray() )
		{	// add a given skalar recursively to a local array
			size_t i;
			for(i=0; i<cValue->cSize; i++)
				cValue->cArray[i] >>= v;
		}
		else if( !isArray() && v.isArray() )
		{	// add a local skalar to a given array
			size_t i;
			Variant temp(*this);
			this->setarray(v.cValue->cSize);
			for(i=0; i<v.cValue->cSize; i++)
			{	
				this->cValue->cArray[i]  = temp;
				this->cValue->cArray[i] >>= v.cValue->cArray[i];
			}
		}
		else
		{
			convert2int();
			cValue->cInteger >>= v.getInt();
		}
		return *this;
	}
	friend Variant operator>>(const Variant& va, const Variant& vb)
	{
		Variant temp(va);
		temp >>= vb;
		return temp;
	}
	const Variant& operator<<=(const Variant& v)
	{
		if( !isValid() || !v.isValid() )
		{	// invalid inputs, invalid output
			clear();
		}
		////////////////////////////
		// simple types at the end
		else if( isArray() && v.isArray() )
		{	// add two arrays
			// don't check for dimension mismatches, just pad with zeros
			size_t i, val = min(cValue->cSize, v.cValue->cSize);
			for(i=0; i<val; i++)
				cValue->cArray[i] <<= v.cValue->cArray[i];
			// for the rest of the elements, do nothing
		}
		else if( isArray() && !v.isArray() )
		{	// add a given skalar recursively to a local array
			size_t i;
			for(i=0; i<cValue->cSize; i++)
				cValue->cArray[i] <<= v;
		}
		else if( !isArray() && v.isArray() )
		{	// add a local skalar to a given array
			size_t i;
			Variant temp(*this);
			this->setarray(v.cValue->cSize);
			for(i=0; i<v.cValue->cSize; i++)
			{	
				this->cValue->cArray[i]  = temp;
				this->cValue->cArray[i] <<= v.cValue->cArray[i];
			}
		}
		else
		{
			convert2int();
			cValue->cInteger <<= v.getInt();
		}
		return *this;
	}
	friend Variant operator<<(const Variant& va, const Variant& vb)
	{
		Variant temp(va);
		temp <<= vb;
		return temp;
	}
	friend Variant operator&&(const Variant& va, const Variant& vb)
	{
		return Variant( va.getInt() && vb.getInt() );
	}
	friend Variant operator||(const Variant& va, const Variant& vb)
	{
		return Variant( va.getInt() || vb.getInt() );
	}
	///////////////////////////////////////////////////////////////////////////
	// compare operations
	friend int compare(const Variant& va, const Variant& vb)
	{
		if( va.cValue == vb.cValue )
		{	// identic pointers
			return 0;
		}
		else if( !va.isValid() && !vb.isValid() )
		{	// both invalid
			return 0;
		}
		else if( !va.isValid() || !vb.isValid() )
		{	// only one invalud
			return (!va.isValid()) ? -1 : 1;
		}
		////////////////////////////
		// simple types at the end
		else if( va.isArray() && vb.isArray() )
		{	// two arrays
			if( va.cValue->cSize != vb.cValue->cSize )
				return va.cValue->cSize - vb.cValue->cSize;
			else
			{
				size_t i;
				int val;
				for(i=0; i<va.cValue->cSize; i++)
				{
					val = compare(va.cValue->cArray[i], vb.cValue->cArray[i]);
					if( val!=0 )
						return val;
				}
				return 0;
			}
		}
		else if( va.isArray() && !vb.isArray() )
		{	
			return 1;
		}
		else if( !va.isArray() && vb.isArray() )
		{	
			return -1;
		}
		else if( va.isString() || vb.isString() )
		{	
			return ::compare( va.getString(), vb.getString() );
		}
		else if( va.isFloat() || vb.isFloat() )
		{
			double v = va.getFloat() - vb.getFloat();
			return (v<0) ? -1 : (v>0) ? 1 : 0;
		}
		else if( va.isInt() || vb.isInt() )
		{
			return va.getInt() - vb.getInt();
		}
		return 0;
	}
	bool operator==(const Variant& v) const
	{
		return 0==compare(*this,v);
	}
	bool operator!=(const Variant& v) const
	{
		return 0!=compare(*this,v);
	}
	bool operator< (const Variant& v) const
	{
		return 0< compare(*this,v);
	}
	bool operator<=(const Variant& v) const
	{
		return 0<=compare(*this,v);
	}
	bool operator> (const Variant& v) const
	{
		return 0> compare(*this,v);
	}
	bool operator>=(const Variant& v) const
	{
		return 0>=compare(*this,v);
	}

};

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////




class Variable
{
	Variable(const Variable&);					// no copy
	const Variable& operator=(const Variable&);	// no assign

public:
	string<>	cName;
	Variant		cValue;
	///////////////////////////////////////////////////////////////////////////
	// Construct/Destruct
	Variable(const char* name) : cName(name)	{  }
	~Variable()	{  }

	///////////////////////////////////////////////////////////////////////////
	// PreInitialize Array
	bool setsize(size_t cnt)
	{
	//	cValue.setarray(cnt);
		return true;
	}
	///////////////////////////////////////////////////////////////////////////
	// Set Values
	void set(int val)				{ cValue = val; }
	void set(double val)			{ cValue = val; }
	void set(const char* val)		{ cValue = val; }
	void set(const Variant & val)	{ cValue = val; }

	///////////////////////////////////////////////////////////////////////////
	// Set Value
	operator Variant()				{ return cValue; }
};




///////////////////////////////////////////////////////////////////////////////
// the user stack
///////////////////////////////////////////////////////////////////////////////
class UserStack : private noncopyable
{
	///////////////////////////////////////////////////////////////////////////
	TstackDCT<Variant>		cStack;		// the stack
	size_t					cSC;		// stack counter
	size_t					cSB;		// initial stack start index
	size_t					cParaBase;	// function parameter start index
	size_t					cTempBase;	// TempVar start index

	size_t					cPC;		// Programm Counter
	CProgramm*				cProg;

	bool process()
	{
		bool run = true;
		CProgramm::CCommand ccmd;

		while(cProg && run && cProg->getCommand(cPC, ccmd) )
		{
			switch( ccmd.cCommand )
			{
			case OP_START:
			case OP_NOP:
			{
				break;
			}
			/////////////////////////////////////////////////////////////////
			// assignment operations
			// take two stack values and push up one
			case OP_ASSIGN:	// <Op If> '='   <Op>
			{
				cSC--;
				cStack[cSC-1] = cStack[cSC];
				cStack[cSC-1].makeValue();
				break;
			}
			case OP_ADD:		// <Op AddSub> '+' <Op MultDiv>
			case OP_ASSIGN_ADD:	// <Op If> '+='  <Op>
			{
				cSC--;
				cStack[cSC-1] += cStack[cSC];
				cStack[cSC-1].makeValue();
				break;
			}
			case OP_SUB:		// <Op AddSub> '-' <Op MultDiv>
			case OP_ASSIGN_SUB:	// <Op If> '-='  <Op>
			{
				cSC--;
				cStack[cSC-1] -= cStack[cSC];
				cStack[cSC-1].makeValue();
				break;
			}
			case OP_MUL:		// <Op MultDiv> '*' <Op Unary>
			case OP_ASSIGN_MUL:	// <Op If> '*='  <Op>
			{
				cSC--;
				cStack[cSC-1] *= cStack[cSC];
				cStack[cSC-1].makeValue();
				break;
			}
			case OP_DIV:		// <Op MultDiv> '/' <Op Unary>
			case OP_ASSIGN_DIV:	// <Op If> '/='  <Op>
			{
				cSC--;
				cStack[cSC-1] /= cStack[cSC];
				cStack[cSC-1].makeValue();
				break;
			}
			case OP_MOD:		// <Op MultDiv> '%' <Op Unary>
			{
				cSC--;
				cStack[cSC-1] /= cStack[cSC];
				cStack[cSC-1].makeValue();
				break;
			}
			case OP_BIN_XOR:	// <Op BinXOR> '^' <Op BinAND>
			case OP_ASSIGN_XOR:	// <Op If> '^='  <Op>
			{
				cSC--;
				cStack[cSC-1] ^= cStack[cSC];
				cStack[cSC-1].makeValue();
				break;
			}
			case OP_BIN_AND:		// <Op BinAND> '&' <Op Equate>
			case OP_ASSIGN_AND:	// <Op If> '&='  <Op>
			{
				cSC--;
				cStack[cSC-1] &= cStack[cSC];
				cStack[cSC-1].makeValue();
				break;
			}
			case OP_BIN_OR:		// <Op BinOr> '|' <Op BinXOR>
			case OP_ASSIGN_OR:	// <Op If> '|='  <Op>
			{
				cSC--;
				cStack[cSC-1] |= cStack[cSC];
				cStack[cSC-1].makeValue();
				break;
			}
			case OP_LOG_AND:	// <Op And> '&&' <Op BinOR>
			{
				cSC--;
				cStack[cSC-1] = cStack[cSC-1] && cStack[cSC];
				break;
			}
			case OP_LOG_OR:		// <Op Or> '||' <Op And>
			{
				cSC--;
				cStack[cSC-1] = cStack[cSC-1] || cStack[cSC];
				break;
			}
			case OP_RSHIFT:		// <Op Shift> '>>' <Op AddSub>
			case OP_ASSIGN_RSH:	// <Op If> '>>='  <Op>
			{
				cSC--;
				cStack[cSC-1] = cStack[cSC-1] >> cStack[cSC];
				break;
			}
			case OP_LSHIFT:		// <Op Shift> '<<' <Op AddSub>
			case OP_ASSIGN_LSH:	// <Op If> '<<='  <Op>
			{
				cSC--;
				cStack[cSC-1] = cStack[cSC-1] << cStack[cSC];
				break;
			}
			case OP_EQUATE:		// <Op Equate> '==' <Op Compare>
			{
				cSC--;
				cStack[cSC-1] = (cStack[cSC-1]==cStack[cSC]);
				break;
			}
			case OP_UNEQUATE:	// <Op Equate> '!=' <Op Compare>
			{
				cSC--;
				cStack[cSC-1] = (cStack[cSC-1]!=cStack[cSC]);
				break;
			}
			case OP_ISGT:		// <Op Compare> '>'  <Op Shift>
			{
				cSC--;
				cStack[cSC-1] = (cStack[cSC-1]>cStack[cSC]);
				break;
			}
			case OP_ISGTEQ:		// <Op Compare> '>=' <Op Shift>
			{
				cSC--;
				cStack[cSC-1] = (cStack[cSC-1]>=cStack[cSC]);
				break;
			}
			case OP_ISLT:		// <Op Compare> '<'  <Op Shift>
			{
				cSC--;
				cStack[cSC-1] = (cStack[cSC-1]<cStack[cSC]);
				break;
			}
			case OP_ISLTEQ:		// <Op Compare> '<=' <Op Shift>
			{
				cSC--;
				cStack[cSC-1] = (cStack[cSC-1]<=cStack[cSC]);
				break;
			}
			/////////////////////////////////////////////////////////////////
			// select operation
			// take three stack values and push the second or third depending on the first
			case OP_SELECT:	// <Op Or> '?' <Op If> ':' <Op If>
			{
				cSC -= 2;
				cStack[cSC-1] = (cStack[cSC-1]!=0) ? cStack[cSC] : cStack[cSC+1];
				break;
			}

			/////////////////////////////////////////////////////////////////
			// unary operations
			// take one stack values and push a value
			case OP_NOT:	// '!'    <Op Unary>
			{
				cStack[cSC-1] = !(cStack[cSC-1]);
				break;
			}
			case OP_INVERT:	// '~'    <Op Unary>
			{
				cStack[cSC-1] = ~(cStack[cSC-1]);
				break;
			}
			case OP_NEGATE:	// '-'    <Op Unary>
			{
				cStack[cSC-1] = -(cStack[cSC-1]);
				break;
			}

			/////////////////////////////////////////////////////////////////
			// sizeof operations
			// take one stack values and push the result
								// sizeof '(' <Type> ')' // replaces with OP_PUSH_INT on compile time
			case OP_SIZEOF:		// sizeof '(' Id ')'
			{
				cStack[cSC-1].makeValue();
				cStack[cSC-1] = (int)cStack[cSC-1].getSize();
				break;
			}

			/////////////////////////////////////////////////////////////////
			// cast operations
			// take one stack values and push the result
			case OP_CAST:	// '(' <Type> ')' <Op Unary>   !CAST
			{	// <Op Unary> is first on the stack, <Type> is second
				cStack[cSC-1].cast(ccmd.cParam1);
				break;
			}

			/////////////////////////////////////////////////////////////////
			// Pre operations
			// take one stack variable and push a value
			case OP_PREADD:		// '++'   <Op Unary>
			{	
				++cStack[cSC-1];
				cStack[cSC-1].makeValue();
				break;
			}
			case OP_PRESUB:		// '--'   <Op Unary>
			{	
				--cStack[cSC-1];
				cStack[cSC-1].makeValue();
				break;
			}
			/////////////////////////////////////////////////////////////////
			// Post operations
			// take one stack variable and push a value
			case OP_POSTADD:	// <Op Pointer> '++'
			{	
				Variant temp = cStack[cSC-1];
				temp.makeValue();
				cStack[cSC-1]++;
				cStack[cSC-1].makeValue();
				cStack[cSC-1] = temp;
				break;
			}
			case OP_POSTSUB:	// <Op Pointer> '--'
			{	
				Variant temp(cStack[cSC-1]);
				temp.makeValue();
				cStack[cSC-1]--;
				cStack[cSC-1].makeValue();
				cStack[cSC-1] = temp;
				break;
			}

			/////////////////////////////////////////////////////////////////
			// Member Access
			// take a variable and a value from stack and push a varible
			case OP_MEMBER:		// <Op Pointer> '.' <Value>     ! member
			{
				printf("not implemented yet\n");

				cSC--;
				break;
			}
			/////////////////////////////////////////////////////////////////
			// Array
			// take a variable and a value from stack and push a varible
			case OP_ARRAY:		// <Op Pointer> '[' <Expr> ']'  ! array
			{
				cSC--;
				cStack[cSC-1].assign( cStack[cSC-1][ cStack[cSC].getInt() ], true);
				break;
			}
			/////////////////////////////////////////////////////////////////
			// standard function calls
			// check the values on stack before or inside the call of function
			case OP_CALLSCRIPT1:
			case OP_CALLSCRIPT2:
			case OP_CALLSCRIPT3:
			case OP_CALLSCRIPT4:
							// Id '(' <Expr> ')'
							// Id '(' ')'
							// Id <Call List> ';'
							// Id ';'
			{

				printf("not implemented yet\n");
				cSC--;
				break;
			}
			/////////////////////////////////////////////////////////////////
			// standard function calls
			// check the values on stack before or inside the call of function
			case OP_CALLBUILDIN1:
			case OP_CALLBUILDIN2:
			case OP_CALLBUILDIN3:
			case OP_CALLBUILDIN4:
							// Id '(' <Expr> ')'
							// Id '(' ')'
							// Id <Call List> ';'
							// Id ';'
			{
				printf("not implemented yet\n");
				cSC--;
				break;
			}

			/////////////////////////////////////////////////////////////////
			// conditional branch
			// take one value from stack 
			// and add 1 or the branch offset to the programm counter
			case OP_NIF:
			{
				cSC--;
				if( cStack[cSC]==0 )
					cPC = ccmd.cParam1;

				break;
			}
			case OP_IF:		// if '(' <Expr> ')' <Normal Stm>
			{
				if( cStack[cSC]!=0 )
					cPC = ccmd.cParam1;

				break;
			}
			/////////////////////////////////////////////////////////////////
			// unconditional branch
			// add the branch offset to the programm counter
			case OP_GOTO:	// goto position
			{
				cPC = ccmd.cParam1;
				break;
			}

			case OP_CLEAR:
			{
				cStack[cSC-1].clear();
				break;
			}
			case OP_RESIZE:
			{	//this->logging("array resize (%i dimension(s))", ccmd.cParam1); break;
				// there are (ccmd.cParam1) elements on stack containing the dimemsions oth the multi-array
				size_t i, dim = ccmd.cParam1;
				cSC -= dim;
				cStack[cSC-1].clear();
				for(i=0; i<dim; i++)
				{	// number of elements in this dimension
					cStack[cSC-1].addarray( cStack[cSC+i].getInt() );
				}
				break;
			}
			case OP_VECTORIZE1:
			case OP_VECTORIZE2:
			case OP_VECTORIZE3:
			case OP_VECTORIZE4:
			{	//this->logging("vectorize '%i' elements", ccmd.cParam1); break;
				size_t i, cnt = ccmd.cParam1;
				cSC -= cnt;
				cStack[cSC].setarray( cnt );
				for(i=1; i<cnt; i++)
				{	// put the elements into the array
					cStack[cSC][i] = cStack[cSC+i];				
				}
				// and virtually push the vectorized element
				cSC ++;
				break;
			}

			/////////////////////////////////////////////////////////////////
			// explicit stack pushes
			// Values pushed on stack directly
			// HexLiteral
			// DecLiteral
			// StringLiteral
			// CharLiteral
			// FloatLiteral
			// Id
			// <Call Arg>  ::= '-'

			case OP_PUSH_ADDR:
			case OP_PUSH_INT1:	// followed by an integer
			case OP_PUSH_INT2:
			case OP_PUSH_INT3:
			case OP_PUSH_INT4:
			{
				cStack[cSC].makeValue();
				cStack[cSC] = ccmd.cParam1;
				cSC++;
				break;
			}
			case OP_PUSH_STRING:	// followed by a string (pointer)
			{
				cStack[cSC].makeValue();
				cStack[cSC] = ccmd.cString;
				cSC++;
				break;
			}
			case OP_PUSH_FLOAT:	// followed by a float
			{
				cStack[cSC].makeValue();
				cStack[cSC] = (double)CProgramm::int2float(ccmd.cParam1);
				cSC++;
				break;
			}
			case OP_PUSH_VAR:	// followed by a string containing a variable name
			{
				cStack[cSC].makeValue();
//				cStack[cSC] = findvariable(ccmd.cString);
				cStack[cSC].makeVariable();
				cSC++;
				break;
			}
			case OP_PUSH_VALUE:
			{
				cStack[cSC].makeValue();
//				cStack[cSC] = findvariable(ccmd.cString);
				cStack[cSC].makeVariable();
				cSC++;
				break;
			}
			case OP_PUSH_PARAM:
			{
				cStack[cSC].makeValue();
				cStack[cSC] = cStack[cParaBase+ccmd.cParam1];
				cStack[cSC].makeVariable();
				cSC++;
				break;
			}
			case OP_PUSH_TEMPVAR1:
			case OP_PUSH_TEMPVAR2:
			case OP_PUSH_TEMPVAR3:
			case OP_PUSH_TEMPVAR4:
			{
				cStack[cSC].makeValue();
				cStack[cSC] = cStack[cSB+ccmd.cParam1];
				cStack[cSC].makeVariable();
				cSC++;
				break;
			}
			case OP_PUSH_TEMPVALUE1:
			case OP_PUSH_TEMPVALUE2:
			case OP_PUSH_TEMPVALUE3:
			case OP_PUSH_TEMPVALUE4:
			{
				cStack[cSC].makeValue();
				cStack[cSC] = cStack[cSB+ccmd.cParam1];
				cSC++;
				break;
			}

			case OP_POP:	// decrements the stack by one
			{	// maybe better reset the stack
				cSC--;
				break;
			}


			case VX_LABEL:
			case VX_BREAK:
			case VX_CONT:
			case VX_GOTO:
				printf("non-converted temporal opcodes\n");

			case OP_RETURN:
			case OP_END:
			default:
			{
				run=false;
				break;
			}
			}// end switch
		}// end while
		return true;
	}

public:
	///////////////////////////////////////////////////////////////////////////
	// construct/destruct
	UserStack() : cSC(0), cSB(0), cParaBase(0), cPC(0), cProg(NULL)
	{}
	~UserStack()
	{}

	///////////////////////////////////////////////////////////////////////////
	// start a programm
	bool Call(size_t programm_id)
	{		

	
		return true;
	}
	///////////////////////////////////////////////////////////////////////////
	// comming back from a callback
	void Continue(Variant retvalue)
	{


	}
};



struct aaa
{
	char str[24];
	int  val;
};

void vartest()
{

	aaa xxa = {"hallo",1};
	aaa xxb = {"xx",2};

	aaa xxc;

	xxc = xxa;
	xxc = xxb;


	/////////////////////////
	Variant a,b,c;
	a = 8.6;

	Variant ref(a,true);
	ref += 2;

	printf("%s\n", (const char*)a.getString());
	printf("%s\n", (const char*)ref.getString());

	b = "hallo";

	ref = a+b;

	printf("%s\n", (const char*)a.getString());
	printf("%s\n", (const char*)ref.getString());

	ref++;
	printf("%s\n", (const char*)a.getString());
	printf("%s\n", (const char*)ref.getString());

	b.setarray(3);
	b[1] = 1;
	b[2] = 2.2;

	c = a;
	c = b;
	printf("%s\n", (const char*)c[0].getString());
	printf("%s\n", (const char*)c[1].getString());
	printf("%s\n\n", (const char*)c[2].getString());
	c = a+b;
	printf("%s\n", (const char*)c[0].getString());
	printf("%s\n", (const char*)c[1].getString());
	printf("%s\n\n", (const char*)c[2].getString());
	b = c++;
	printf("%s\n", (const char*)c[0].getString());
	printf("%s\n", (const char*)c[1].getString());
	printf("%s\n\n", (const char*)c[2].getString());
	printf("%s\n", (const char*)b[0].getString());
	printf("%s\n", (const char*)b[1].getString());
	printf("%s\n\n", (const char*)b[2].getString());

	c[1] += c[0];
	c[2] =  4;

	printf("%s\n", (const char*)c[0].getString());
	printf("%s\n", (const char*)c[1].getString());
	printf("%s\n\n", (const char*)c[2].getString());
	c += a;
	printf("%s\n", (const char*)c[0].getString());
	printf("%s\n", (const char*)c[1].getString());
	printf("%s\n\n", (const char*)c[2].getString());
	
	c[2] /= a;			printf("%s\n", (const char*)c[2].getString());
	c[2] &= a;			printf("%s\n", (const char*)c[2].getString());
	c[2] |= a;			printf("%s\n", (const char*)c[2].getString());
	c[2] ^= a;			printf("%s\n", (const char*)c[2].getString());
	c[2] = a && c[2];	printf("%s\n", (const char*)c[2].getString());
	c[2] = a || c[2];	printf("%s\n\n", (const char*)c[2].getString());

	printf("%s\n", (const char*)c[0].getString());
	printf("%s\n", (const char*)c[1].getString());
	printf("%s\n\n", (const char*)c[2].getString());




}
















///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


const unsigned char engine[] = 
{

	0x78, 0x9C, 0xED, 0x9D, 0x07, 0x58, 0x54, 0x49, 
	0xB6, 0xC7, 0xAB, 0xCD, 0x80, 0x88, 0xA2, 0x30, 
	0x28, 0x20, 0x92, 0x54, 0x10, 0x73, 0x1A, 0x73, 
	0x6C, 0x04, 0x15, 0x53, 0x1B, 0x80, 0x11, 0x67, 
	0x54, 0x1C, 0x66, 0x98, 0xA0, 0x03, 0x93, 0x61, 
	0x72, 0x9E, 0x35, 0xBB, 0xE6, 0x80, 0xE3, 0x28, 
	0x0B, 0x18, 0xD6, 0xB0, 0xB0, 0xEC, 0xC2, 0x8E, 
	0xB2, 0x6C, 0xDE, 0xB7, 0x39, 0xE7, 0xDD, 0xB7, 
	0xE1, 0x6D, 0xCE, 0xBB, 0xEF, 0xBD, 0x0D, 0x6F, 
	0xDF, 0xAD, 0xAA, 0x3E, 0xBF, 0xEE, 0xC6, 0x16, 
	0xDB, 0xD9, 0x09, 0xE2, 0xE7, 0x37, 0xF3, 0xC9, 
	0xAF, 0xEA, 0x56, 0xDD, 0x7B, 0xCE, 0xFF, 0x54, 
	0x9D, 0x5B, 0xF7, 0xF6, 0xBD, 0xDD, 0xF3, 0xD4, 
	0x62, 0xB5, 0x50, 0xCD, 0x55, 0x83, 0xD4, 0x12, 
	0xB5, 0x56, 0x95, 0xA9, 0x72, 0xB5, 0xC1, 0xF9, 
	0x77, 0x90, 0x5A, 0xEE, 0x94, 0xD6, 0xA9, 0x7B, 
	0x9D, 0x52, 0xB9, 0x1A, 0xA9, 0x1E, 0x56, 0xA3, 
	0xD5, 0x08, 0x35, 0x4A, 0x29, 0x95, 0xD7, 0x5D, 
	0xAD, 0x5B, 0xE2, 0x19, 0xE2, 0x50, 0x9B, 0x7F, 
	0x66, 0xBB, 0x72, 0xD7, 0xAB, 0xBC, 0x6E, 0x6A, 
	0xDD, 0xF2, 0xDC, 0xE3, 0x2A, 0xF7, 0x41, 0x95, 
	0xFB, 0x71, 0x95, 0xBB, 0xD0, 0x95, 0xBB, 0xCE, 
	0x95, 0xD7, 0x59, 0xAD, 0xCB, 0xCD, 0x55, 0xCA, 
	0xF9, 0x5F, 0xE3, 0x1C, 0xE7, 0xAF, 0x27, 0x4C, 
	0x85, 0xAB, 0x08, 0xD5, 0x53, 0x45, 0x3A, 0x47, 
	0x3A, 0xAA, 0x64, 0x83, 0x4B, 0x79, 0xB2, 0x28, 
	0x74, 0x52, 0x9E, 0x0A, 0x0A, 0x9D, 0x95, 0xE7, 
	0x09, 0x0A, 0x5D, 0x94, 0x27, 0x85, 0x42, 0x57, 
	0xE5, 0x49, 0xA6, 0xD0, 0x4D, 0x79, 0x52, 0x55, 
	0x9A, 0x9A, 0xA9, 0x66, 0xA9, 0xD9, 0x6A, 0x8E, 
	0xE3, 0x95, 0x5B, 0x65, 0xAB, 0x79, 0x2A, 0xC7, 
	0x39, 0xF6, 0x7C, 0xB5, 0xC0, 0xF1, 0x33, 0x4F, 
	0x2D, 0x72, 0xFC, 0x5D, 0xA2, 0x96, 0xAA, 0x65, 
	0xCA, 0xE3, 0xF8, 0xB8, 0x42, 0xAD, 0x54, 0xAB, 
	0x54, 0xBE, 0x2A, 0x50, 0x85, 0xEA, 0x76, 0x75, 
	0x97, 0x2A, 0x55, 0xF7, 0x38, 0x3E, 0xDF, 0xA7, 
	0xEE, 0x57, 0x1B, 0xD5, 0x26, 0xF5, 0x80, 0x7A, 
	0xC8, 0xF1, 0xFC, 0x51, 0xF5, 0x98, 0x7A, 0x9C, 
	0x43, 0x74, 0x57, 0x9E, 0x74, 0x0A, 0x3D, 0x94, 
	0x67, 0x30, 0x85, 0x30, 0xAB, 0x83, 0x2D, 0x84, 
	0x2B, 0xCF, 0x50, 0x0A, 0x11, 0xCA, 0x93, 0x41, 
	0xA1, 0xA7, 0xF2, 0x64, 0x52, 0x88, 0x54, 0x9E, 
	0x61, 0x14, 0x7A, 0x29, 0xCF, 0x70, 0x0A, 0x51, 
	0xCA, 0x33, 0x82, 0x42, 0x6F, 0xE5, 0x19, 0x49, 
	0xA1, 0x8F, 0xF2, 0x8C, 0xA2, 0x10, 0xAD, 0x3C, 
	0xA3, 0xD5, 0x18, 0x35, 0x56, 0x8D, 0x53, 0xE3, 
	0xD5, 0x04, 0x35, 0x51, 0xDD, 0xAA, 0x26, 0xB1, 
	0xB1, 0xAF, 0xF2, 0x4C, 0xA6, 0xD0, 0x4F, 0x79, 
	0xA6, 0x50, 0x88, 0x51, 0x9E, 0xA9, 0x14, 0x62, 
	0x95, 0x67, 0x1A, 0x85, 0x5B, 0x94, 0x67, 0x3A, 
	0x85, 0x38, 0xE5, 0x99, 0x41, 0xA1, 0xBF, 0xF2, 
	0xDC, 0x46, 0x61, 0x80, 0xF2, 0x14, 0x51, 0x88, 
	0x57, 0x9E, 0x35, 0x14, 0x12, 0x94, 0xE7, 0x0E, 
	0xF5, 0x94, 0x7A, 0x5A, 0x3D, 0xA3, 0x9E, 0x55, 
	0xCF, 0xA9, 0xE7, 0xD5, 0x0B, 0xEA, 0x45, 0xF5, 
	0x92, 0x7A, 0x59, 0xBD, 0xA2, 0x5E, 0x55, 0xEF, 
	0x51, 0x9B, 0xD5, 0x16, 0xB5, 0x55, 0x6D, 0x53, 
	0xDB, 0xD5, 0x0E, 0xB5, 0x53, 0xED, 0x52, 0xEF, 
	0x55, 0xBB, 0xD5, 0x1E, 0xB5, 0x57, 0xED, 0x53, 
	0xFB, 0xD5, 0x01, 0x75, 0x50, 0x1D, 0x52, 0x87, 
	0xD5, 0x11, 0x55, 0xA5, 0x5E, 0x53, 0xC7, 0xD4, 
	0xEB, 0xEA, 0xB8, 0x3A, 0xA1, 0xAA, 0xD5, 0xFB, 
	0x54, 0x8D, 0xAA, 0x55, 0x75, 0xEA, 0xA4, 0x3A, 
	0xA5, 0x4E, 0xAB, 0x33, 0xEA, 0xFD, 0xEA, 0xAC, 
	0x3A, 0xA7, 0xCE, 0xAB, 0x0B, 0xEA, 0x03, 0xAA, 
	0x5E, 0x35, 0xA8, 0x0F, 0xAA, 0x46, 0xF5, 0x21, 
	0xF5, 0x61, 0xD5, 0xA4, 0x9A, 0xD5, 0x47, 0xD4, 
	0x1B, 0xEA, 0xA2, 0xBA, 0xA4, 0x5A, 0xD4, 0x47, 
	0x55, 0xAB, 0xFA, 0x98, 0xFA, 0xB8, 0xFA, 0x84, 
	0xFA, 0xA4, 0xFA, 0x94, 0xFA, 0xB4, 0xFA, 0x8C, 
	0xFA, 0xAC, 0xFA, 0x0F, 0xF5, 0x39, 0xF5, 0x79, 
	0xF5, 0x05, 0xF5, 0x45, 0xF5, 0x25, 0xF5, 0x65, 
	0xF5, 0x15, 0xF5, 0x55, 0xF5, 0x35, 0xF5, 0x75, 
	0xF5, 0x0D, 0xF5, 0x4D, 0xF5, 0x2D, 0xF5, 0x6D, 
	0xF5, 0x1D, 0xF5, 0x5D, 0xF5, 0x3D, 0xF5, 0x7D, 
	0xF5, 0x03, 0xF5, 0x43, 0xF5, 0x23, 0xF5, 0x9F, 
	0xEA, 0xC7, 0xEA, 0x27, 0xEA, 0xA7, 0xEA, 0x67, 
	0xEA, 0xBF, 0xD4, 0xCF, 0xD5, 0x2F, 0xD4, 0x2F, 
	0xD5, 0xAF, 0xD4, 0xAF, 0xD5, 0x6F, 0xD4, 0x6F, 
	0xD5, 0xEF, 0xD4, 0xEF, 0xD5, 0x1F, 0xD4, 0x1F, 
	0xD5, 0x9F, 0xD4, 0x9F, 0xD5, 0x5F, 0xD4, 0x5F, 
	0xD5, 0x7F, 0xAB, 0xFF, 0x51, 0xFF, 0xAB, 0xFE, 
	0xA6, 0xFE, 0xAE, 0xFE, 0xA1, 0xFE, 0xA9, 0xFE, 
	0x4F, 0xFD, 0x0B, 0x31, 0x12, 0x95, 0x67, 0x2D, 
	0x85, 0x81, 0xCA, 0xB3, 0x8E, 0x42, 0x92, 0xF2, 
	0xAC, 0xA7, 0x30, 0x48, 0x79, 0x8A, 0x29, 0x24, 
	0x2B, 0xCF, 0x06, 0x0A, 0x29, 0xCA, 0x73, 0x27, 
	0x85, 0x54, 0xE5, 0x29, 0xA1, 0x90, 0xA6, 0x3C, 
	0x77, 0x53, 0x48, 0x57, 0x9E, 0x32, 0x0A, 0x83, 
	0x95, 0xA7, 0x9C, 0xC2, 0x10, 0xE5, 0x79, 0x90, 
	0xC2, 0x50, 0xE5, 0x79, 0x84, 0x42, 0x86, 0xF2, 
	0x54, 0x52, 0xC8, 0x54, 0x9E, 0x27, 0x29, 0x0C, 
	0x53, 0x9E, 0x41, 0x2A, 0x59, 0xE9, 0xA9, 0x94, 
	0xAE, 0x06, 0xAB, 0x21, 0x6A, 0xA8, 0xCA, 0x50, 
	0x99, 0x6A, 0x98, 0xCA, 0x52, 0xC3, 0x9D, 0x34, 
	0x30, 0xD2, 0x49, 0x04, 0x97, 0x0F, 0xBA, 0xC9, 
	0x6A, 0x8A, 0x9A, 0xAA, 0xA6, 0xA9, 0xE9, 0x6A, 
	0xC6, 0x9B, 0x9C, 0x80, 0xB7, 0xA9, 0x22, 0xB5, 
	0xC6, 0x99, 0x86, 0x77, 0x98, 0xD4, 0xB3, 0x5E, 
	0x15, 0x3B, 0xC9, 0xE7, 0x4E, 0x55, 0xE2, 0x4C, 
	0xCB, 0xBB, 0x2F, 0x9B, 0x98, 0x3A, 0x51, 0x3D, 
	0x68, 0xA6, 0xE7, 0x23, 0xDE, 0x09, 0x5A, 0xA1, 
	0x2A, 0xD5, 0x13, 0xEA, 0xC9, 0xB7, 0x60, 0xE8, 
	0x1D, 0xBD, 0x41, 0x06, 0x5F, 0x96, 0xF2, 0xAC, 
	0xA6, 0x30, 0x5C, 0x27, 0xDD, 0x41, 0x14, 0x47, 
	0xE8, 0xB4, 0x79, 0x79, 0x80, 0x87, 0x9B, 0x2C, 
	0x7F, 0xA5, 0xE0, 0xBE, 0x5B, 0xA1, 0xAD, 0x7C, 
	0x4B, 0xC2, 0x7A, 0x63, 0x04, 0x75, 0xA4, 0xF2, 
	0xDC, 0x47, 0x61, 0x94, 0xF2, 0x6C, 0xA2, 0x30, 
	0x5A, 0x79, 0xEE, 0xA5, 0x30, 0xC6, 0x9E, 0x09, 
	0x83, 0xC5, 0xF2, 0xCD, 0x9E, 0x1D, 0xDF, 0x4C, 
	0xE4, 0xC4, 0x9C, 0xB1, 0x7A, 0xF4, 0x49, 0x61, 
	0x9C, 0x1E, 0x7B, 0x29, 0x41, 0x46, 0xDE, 0xC8, 
	0x80, 0x24, 0x72, 0x9B, 0x5A, 0x6D, 0x46, 0xCD, 
	0x1D, 0x37, 0xA7, 0xF6, 0x65, 0xA3, 0x60, 0xBC, 
	0xCE, 0xD0, 0x52, 0x98, 0x60, 0xF5, 0x0C, 0x3E, 
	0x9B, 0xDF, 0xBE, 0x64, 0xBD, 0xFA, 0x66, 0xBA, 
	0x7E, 0x4B, 0x63, 0x3A, 0xD1, 0x9E, 0x75, 0x6F, 
	0x06, 0xB2, 0xA3, 0x07, 0xF2, 0xD6, 0x37, 0x73, 
	0x6E, 0x7D, 0xF7, 0x16, 0x4E, 0x37, 0xCF, 0xAE, 
	0xBE, 0xD0, 0x4D, 0xD2, 0xD7, 0x56, 0x57, 0xBE, 
	0xA0, 0x9A, 0xAC, 0x3C, 0x1B, 0x29, 0x4C, 0x51, 
	0x9E, 0xFB, 0x29, 0x4C, 0xBD, 0xDA, 0xE4, 0xBD, 
	0x39, 0x51, 0xAF, 0xBF, 0x68, 0x4F, 0x53, 0x9E, 
	0x87, 0x28, 0x4C, 0x0F, 0x16, 0xC1, 0x9B, 0xC9, 
	0xB7, 0xA3, 0xC5, 0x74, 0x86, 0xF2, 0xDC, 0x45, 
	0x61, 0xA6, 0xCE, 0xC4, 0x97, 0xCF, 0xC6, 0xC0, 
	0x55, 0xA6, 0x5D, 0x63, 0xDE, 0xCC, 0x82, 0x3E, 
	0x0D, 0x67, 0xF9, 0x4E, 0x60, 0x37, 0x2F, 0x0D, 
	0x3B, 0x4E, 0xD8, 0x66, 0xEB, 0xFB, 0xA2, 0x23, 
	0x9D, 0x9C, 0xF0, 0x84, 0xDF, 0x3D, 0xD5, 0x39, 
	0xFE, 0x8B, 0x91, 0x9B, 0x4B, 0x91, 0x8E, 0x13, 
	0xCD, 0xB9, 0x6D, 0xCF, 0x47, 0xEF, 0xD4, 0x4D, 
	0xB8, 0x9B, 0x67, 0xA4, 0xB7, 0x36, 0x90, 0xEE, 
	0x60, 0x97, 0x03, 0x37, 0xB3, 0xE9, 0xF5, 0x1E, 
	0xB6, 0xEC, 0xE0, 0x57, 0x71, 0x37, 0xC3, 0x76, 
	0x7D, 0x87, 0x6D, 0xDE, 0x95, 0x2F, 0xBE, 0x6F, 
	0x9E, 0xDD, 0xAE, 0x9F, 0x30, 0xE5, 0x5C, 0x6B, 
	0x98, 0xFE, 0x9D, 0x20, 0xDD, 0x0C, 0xD1, 0x9B, 
	0x09, 0x51, 0xAE, 0xF2, 0xB8, 0x95, 0xEF, 0x93, 
	0xC8, 0xF9, 0xC1, 0x22, 0x76, 0x73, 0x52, 0x5D, 
	0x4F, 0x11, 0x5B, 0xA0, 0x9F, 0x26, 0xF0, 0x3D, 
	0x42, 0xB0, 0xF0, 0x4A, 0x73, 0xEC, 0xDD, 0x99, 
	0x61, 0x37, 0xA3, 0x15, 0x18, 0xAD, 0x3C, 0xE5, 
	0x79, 0x94, 0xC2, 0xA2, 0xEB, 0x2B, 0x56, 0x37, 
	0xE7, 0x56, 0xDB, 0x68, 0x2D, 0x0E, 0xF5, 0x84, 
	0x75, 0xED, 0x81, 0xB9, 0x19, 0x8E, 0x6B, 0x0F, 
	0xC7, 0x92, 0xE0, 0x37, 0xEA, 0xFD, 0xCF, 0x3F, 
	0xFE, 0x67, 0x13, 0xE9, 0xB6, 0xF4, 0xDA, 0x3E, 
	0x9A, 0xB9, 0x79, 0x6A, 0xBB, 0x5E, 0xE2, 0xBD, 
	0xEC, 0xDA, 0x3F, 0x53, 0xBB, 0x19, 0xB6, 0x77, 
	0x3F, 0x6C, 0x9E, 0x37, 0xF3, 0x51, 0xE8, 0xCD, 
	0xB0, 0xBD, 0xDB, 0x61, 0x5B, 0xFE, 0xF6, 0x3C, 
	0x3D, 0x74, 0xF5, 0x80, 0x5C, 0xFE, 0xE4, 0xD0, 
	0x8A, 0x77, 0xCB, 0x94, 0x60, 0x8F, 0x31, 0xAD, 
	0x7C, 0x67, 0x9F, 0xAA, 0x6A, 0xDF, 0x98, 0x55, 
	0xEF, 0xDE, 0x23, 0x5E, 0x97, 0x1B, 0x93, 0xFF, 
	0x4E, 0x1A, 0x73, 0xB5, 0x30, 0x15, 0xBC, 0x5B, 
	0xCA, 0x04, 0x33, 0xA6, 0xF0, 0xDD, 0x30, 0xE6, 
	0x4A, 0xCA, 0xDC, 0xF6, 0xF6, 0x19, 0x73, 0xED, 
	0xB3, 0x69, 0xF5, 0x5B, 0x6F, 0xCC, 0x9B, 0x7F, 
	0x42, 0xB1, 0xE8, 0x9D, 0x09, 0x53, 0x68, 0xC6, 
	0xAC, 0x51, 0x9E, 0x7B, 0x28, 0xDC, 0xFE, 0xF6, 
	0xCA, 0x14, 0x7A, 0xC2, 0xB9, 0xE3, 0xDD, 0x99, 
	0x56, 0xC1, 0x8D, 0x59, 0xFB, 0xEE, 0x18, 0x13, 
	0xCC, 0x94, 0x75, 0x6F, 0xBF, 0x29, 0xA1, 0x8F, 
	0xE3, 0xF5, 0xEF, 0xE4, 0x0C, 0x6F, 0xDF, 0x94, 
	0xE2, 0xB7, 0x53, 0x97, 0x6B, 0x9D, 0xDF, 0x1B, 
	0xDE, 0xA9, 0xF1, 0x12, 0x8A, 0x31, 0x77, 0xBE, 
	0x1D, 0xC6, 0xBC, 0xD9, 0xCC, 0x57, 0xF2, 0xCE, 
	0x29, 0x13, 0xFC, 0xA6, 0xA0, 0x18, 0x72, 0xD7, 
	0xDB, 0x65, 0xC8, 0x9B, 0x51, 0xE5, 0xEE, 0x77, 
	0x6B, 0xA9, 0x77, 0xB9, 0x29, 0xA5, 0xEF, 0xE4, 
	0xD0, 0x6D, 0x5F, 0x95, 0x7B, 0xDE, 0xB9, 0x29, 
	0x7D, 0xB5, 0x00, 0xDD, 0xFB, 0xEE, 0x64, 0xDD, 
	0xCB, 0xDF, 0x08, 0xBC, 0xEF, 0x7A, 0x78, 0xD5, 
	0x42, 0x8C, 0xB9, 0x5F, 0x79, 0x7C, 0x96, 0x6D, 
	0x7C, 0x7B, 0x2D, 0xBB, 0xB6, 0x09, 0xB5, 0xE9, 
	0xED, 0x96, 0xE9, 0x5A, 0x8C, 0x79, 0xE0, 0x9D, 
	0x8B, 0xD9, 0xD5, 0x8D, 0x29, 0x7B, 0xA7, 0x07, 
	0x50, 0x7B, 0xC6, 0x94, 0x77, 0xA4, 0x17, 0xC3, 
	0x6E, 0xDE, 0xB1, 0x71, 0xC2, 0xD6, 0x45, 0xAD, 
	0xF3, 0xE8, 0x77, 0xAA, 0xDD, 0x8E, 0xC8, 0xD9, 
	0x4E, 0x45, 0x6E, 0x67, 0x6F, 0x9D, 0x4B, 0xD7, 
	0x95, 0x39, 0xFF, 0x6D, 0x54, 0xFA, 0xE5, 0xD0, 
	0xDC, 0xEE, 0xDE, 0xFA, 0x4E, 0xCA, 0xB3, 0xCA, 
	0x08, 0xFC, 0xA0, 0x79, 0xBB, 0x7B, 0x93, 0x59, 
	0x3B, 0xE8, 0x0F, 0x7A, 0x9D, 0x2D, 0xB6, 0x45, 
	0x67, 0xE5, 0x99, 0xE3, 0xF4, 0xBA, 0xCF, 0xF9, 
	0x6F, 0x83, 0x23, 0xFF, 0x83, 0x6A, 0x90, 0x13, 
	0xD4, 0xFB, 0x95, 0x7E, 0x47, 0x35, 0xB7, 0xAB, 
	0xB7, 0x4D, 0x97, 0xCB, 0xDB, 0x2C, 0x74, 0xF6, 
	0x79, 0xBF, 0xDD, 0x53, 0x37, 0x6F, 0xAB, 0xAE, 
	0x97, 0xB7, 0xF2, 0x38, 0xFF, 0xAE, 0x35, 0xEB, 
	0x7A, 0xA7, 0x5D, 0x17, 0x6F, 0xBB, 0x6E, 0xF6, 
	0xDD, 0x67, 0xC7, 0x66, 0x5B, 0xEE, 0xAE, 0xCB, 
	0x01, 0x35, 0x3D, 0xEC, 0x8B, 0xDE, 0x94, 0xC3, 
	0x74, 0x79, 0x9A, 0x7F, 0x4D, 0xB8, 0x7D, 0x35, 
	0x9B, 0x72, 0x84, 0x7D, 0x3B, 0x9B, 0x72, 0x4F, 
	0x5D, 0x0E, 0xA8, 0x89, 0xD4, 0x35, 0x01, 0xFB, 
	0xE8, 0x65, 0xDF, 0xDB, 0xA6, 0x1C, 0x65, 0x5F, 
	0xDD, 0xA6, 0xDC, 0xDB, 0xBE, 0xBD, 0x4D, 0xB9, 
	0x8F, 0x2E, 0x07, 0xEC, 0x21, 0xDA, 0xBE, 0xC4, 
	0x4E, 0xB9, 0xAF, 0x7D, 0x91, 0x9B, 0x72, 0x3F, 
	0xFB, 0x2E, 0x37, 0xE5, 0x18, 0x5D, 0x0E, 0xD8, 
	0x43, 0xAC, 0x7D, 0x6D, 0x9B, 0xF2, 0x2D, 0xBA, 
	0x1C, 0x50, 0x13, 0x67, 0xDF, 0xE5, 0xA6, 0xDC, 
	0xDF, 0xBE, 0xA7, 0x4D, 0x79, 0x80, 0x7D, 0x55, 
	0x9B, 0x72, 0xBC, 0x7D, 0x5B, 0x9B, 0x72, 0x82, 
	0x7D, 0x61, 0x9B, 0x72, 0xA2, 0x2E, 0x07, 0xD8, 
	0x30, 0xD0, 0xBE, 0x7D, 0x4F, 0x39, 0xC9, 0xBE, 
	0x2C, 0x4C, 0x79, 0x90, 0x2E, 0x07, 0xD4, 0x24, 
	0xEB, 0x9A, 0x80, 0x7D, 0xA4, 0xD8, 0x97, 0xF6, 
	0x29, 0xA7, 0xDA, 0x77, 0x8C, 0x29, 0xA7, 0xD9, 
	0x97, 0xDF, 0x29, 0xA7, 0xEB, 0x72, 0x40, 0xCD, 
	0x60, 0x5D, 0x13, 0xB0, 0xCF, 0x21, 0xF6, 0xC5, 
	0x75, 0xCA, 0x43, 0x75, 0x39, 0xA0, 0x26, 0xC3, 
	0xD6, 0x04, 0xF4, 0xCA, 0xD4, 0x75, 0x01, 0x35, 
	0xC3, 0xEC, 0x3B, 0xEF, 0x94, 0xB3, 0xF4, 0x78, 
	0x0B, 0xA8, 0x19, 0xAE, 0x5B, 0x04, 0xD4, 0x8C, 
	0xB0, 0xAF, 0xC6, 0x53, 0x1E, 0xA9, 0xCB, 0x01, 
	0x2D, 0x46, 0xE9, 0x9A, 0x80, 0x36, 0xA3, 0x6D, 
	0x4D, 0x40, 0xAB, 0x31, 0xFA, 0xA5, 0xF0, 0xF5, 
	0xCE, 0x7F, 0x1B, 0x9D, 0x64, 0x76, 0xBF, 0x9D, 
	0x07, 0xB2, 0x6D, 0xAC, 0xDE, 0xF6, 0x90, 0x53, 
	0xB7, 0xD1, 0xBF, 0x76, 0x9C, 0x7E, 0x73, 0xBC, 
	0xCC, 0x99, 0x41, 0x6B, 0xD5, 0x3D, 0xFE, 0xF5, 
	0xE3, 0xF5, 0x4B, 0xE4, 0x6B, 0xCD, 0x77, 0x36, 
	0xF8, 0xD5, 0x4E, 0xD0, 0xB5, 0x77, 0x99, 0x39, 
	0xE6, 0x57, 0x3B, 0x51, 0xCF, 0x44, 0x5B, 0xBB, 
	0xD0, 0x3B, 0xF7, 0xCB, 0x9C, 0xD2, 0xBD, 0xFE, 
	0x6D, 0x6E, 0xD5, 0x3D, 0x37, 0x3A, 0x36, 0x95, 
	0x07, 0x5A, 0x35, 0x49, 0xEA, 0x1F, 0x34, 0x33, 
	0xFC, 0xA1, 0xC0, 0xE3, 0x4D, 0x56, 0x9E, 0xB9, 
	0x4E, 0xCD, 0xFA, 0x2B, 0xEF, 0x77, 0x8A, 0x7E, 
	0xBF, 0x5D, 0x27, 0x76, 0xED, 0xDB, 0xBD, 0x81, 
	0xFB, 0x9E, 0xAA, 0xB7, 0x05, 0x78, 0x3B, 0xCD, 
	0xD6, 0x3C, 0xE4, 0xFD, 0xFE, 0x09, 0xBF, 0x2D, 
	0xD3, 0xF5, 0xAB, 0xF1, 0xF7, 0xB6, 0xF5, 0x77, 
	0x86, 0xAE, 0xF5, 0x66, 0x27, 0xA9, 0x9B, 0xA9, 
	0xEB, 0x1E, 0xF5, 0x5A, 0x73, 0xBF, 0xFF, 0x96, 
	0x59, 0xCA, 0x93, 0xED, 0xEC, 0x63, 0xA3, 0x63, 
	0xCB, 0x83, 0x57, 0xB6, 0x78, 0xB6, 0x7E, 0xEF, 
	0x7E, 0x63, 0xA0, 0x82, 0x73, 0xF4, 0xEB, 0xF7, 
	0xBA, 0xE7, 0xBA, 0xB6, 0xAD, 0xE7, 0xEA, 0x2D, 
	0x1B, 0xDB, 0x46, 0xCD, 0xAD, 0x3C, 0x39, 0x4A, 
	0x5B, 0x71, 0xC5, 0xA3, 0x64, 0x2B, 0x27, 0x73, 
	0x07, 0xD8, 0x3D, 0x4F, 0xBF, 0xD5, 0x7F, 0xA7, 
	0x7F, 0x4D, 0x8E, 0xAE, 0x69, 0x33, 0x4A, 0x72, 
	0x95, 0x67, 0xB1, 0xB3, 0xA7, 0x62, 0xE7, 0x64, 
	0xFB, 0x90, 0x93, 0xBF, 0x73, 0xCC, 0xC8, 0x08, 
	0xD8, 0xCF, 0x7C, 0x69, 0x91, 0x6D, 0xC6, 0xD8, 
	0xFA, 0x60, 0x6D, 0x16, 0x48, 0x9B, 0x3C, 0x67, 
	0xCB, 0x26, 0xA5, 0x55, 0x59, 0xEB, 0x9C, 0x7A, 
	0x83, 0xB4, 0x5C, 0xE8, 0x6B, 0xA9, 0x6D, 0xF1, 
	0x38, 0xFB, 0x2B, 0x73, 0x68, 0x93, 0x63, 0x55, 
	0x90, 0xD6, 0x79, 0xBE, 0xD6, 0x32, 0x96, 0xB4, 
	0xEF, 0x41, 0x5A, 0x2E, 0x92, 0x96, 0x57, 0xD9, 
	0xE3, 0x62, 0x5F, 0xBB, 0xBB, 0xCC, 0x62, 0x20, 
	0x48, 0x9B, 0x25, 0xD2, 0x66, 0x95, 0x19, 0xE3, 
	0x41, 0xDB, 0x2C, 0xD5, 0x5F, 0x93, 0xB0, 0xC1, 
	0x2C, 0x22, 0xDA, 0x8C, 0x8A, 0x65, 0xFA, 0x3B, 
	0x13, 0xEE, 0x76, 0x96, 0x14, 0x1B, 0x9C, 0xFD, 
	0x07, 0xE8, 0xEF, 0xD1, 0x5B, 0x1E, 0x34, 0xD6, 
	0xDD, 0xAF, 0x4A, 0xFC, 0xB7, 0x2C, 0x57, 0x1E, 
	0x8F, 0xDF, 0x96, 0x2B, 0x46, 0x79, 0x85, 0xDE, 
	0xC3, 0x23, 0x66, 0xAB, 0x9E, 0x97, 0x7E, 0x5B, 
	0x56, 0xEA, 0x2F, 0x67, 0xD8, 0xE0, 0x9C, 0x1B, 
	0x37, 0xF9, 0xD7, 0xAE, 0xD2, 0xDF, 0xD2, 0xA0, 
	0xCF, 0xCF, 0x6D, 0x46, 0x7F, 0xBE, 0xF2, 0xCC, 
	0x72, 0xF6, 0x6E, 0x6C, 0x90, 0xF3, 0x7E, 0x81, 
	0xAD, 0xD3, 0xC7, 0x7C, 0xCC, 0xBF, 0xBE, 0x50, 
	0x79, 0x66, 0x9B, 0xB1, 0xBA, 0xDE, 0x66, 0x0C, 
	0xA9, 0xBF, 0x4D, 0x67, 0x01, 0x6D, 0xDF, 0xBD, 
	0xCE, 0x99, 0xF8, 0xB2, 0xBD, 0xAD, 0xF6, 0xDF, 
	0xAA, 0xFD, 0xF1, 0xE6, 0x01, 0xD9, 0x5E, 0x14, 
	0x6C, 0xFB, 0x06, 0xFF, 0x16, 0x6B, 0xFC, 0x5B, 
	0x68, 0x75, 0xEE, 0xF3, 0xDF, 0x7A, 0xBB, 0xDE, 
	0x7A, 0xD9, 0x51, 0xEF, 0xB0, 0x7D, 0xF4, 0xAC, 
	0x96, 0x3E, 0xE5, 0xFE, 0xDB, 0xD7, 0xFA, 0x67, 
	0xA5, 0x80, 0xA3, 0xAD, 0x93, 0xCC, 0x73, 0xAF, 
	0x7F, 0xED, 0x7A, 0x5F, 0x6D, 0xC0, 0x7E, 0x8A, 
	0x75, 0xFD, 0xDD, 0x76, 0x4E, 0x4B, 0xDD, 0x06, 
	0xBD, 0x46, 0x7A, 0xD8, 0xBB, 0x36, 0xF1, 0xAB, 
	0xBF, 0x53, 0xD7, 0x3F, 0xEA, 0xC4, 0x25, 0xA0, 
	0x75, 0x89, 0xAF, 0x36, 0xA8, 0x3E, 0x77, 0xE9, 
	0xDC, 0x62, 0xE7, 0x9B, 0x5F, 0xED, 0xDD, 0xCA, 
	0x33, 0xCF, 0x9B, 0x1D, 0x82, 0xFA, 0x57, 0xAA, 
	0xB3, 0xC0, 0x5C, 0xFF, 0x9A, 0x7B, 0x74, 0xCD, 
	0xFD, 0x66, 0xC4, 0x04, 0x39, 0x8A, 0x73, 0xE5, 
	0xBB, 0xD0, 0x2C, 0x97, 0x37, 0x04, 0x57, 0xF9, 
	0x3E, 0xBD, 0x7D, 0x8E, 0x19, 0x99, 0x41, 0x8F, 
	0xE7, 0x4C, 0x60, 0x3B, 0xE3, 0x97, 0x38, 0x16, 
	0x05, 0x6C, 0xD9, 0xA8, 0xB7, 0xE8, 0xFC, 0xE6, 
	0x57, 0xB7, 0xC9, 0xD6, 0x15, 0xFB, 0xD7, 0x3D, 
	0xA0, 0xEB, 0x6C, 0x26, 0xBF, 0x3B, 0x98, 0x85, 
	0xCE, 0x15, 0xCD, 0x22, 0xE7, 0x08, 0x7A, 0xCD, 
	0x97, 0x1B, 0xD8, 0xB3, 0x5C, 0x6F, 0xD1, 0x79, 
	0xF5, 0x3E, 0x33, 0x4A, 0x82, 0x58, 0xFF, 0xA0, 
	0x6E, 0xB1, 0xC4, 0xB1, 0xDF, 0xAF, 0xEE, 0xA1, 
	0xC0, 0x7C, 0xE7, 0xB7, 0xE5, 0xE1, 0xB6, 0x79, 
	0xCE, 0x6F, 0xDB, 0x23, 0xC1, 0xF3, 0x9B, 0x5F, 
	0x8B, 0x47, 0xFD, 0x33, 0x55, 0x80, 0xD7, 0x8F, 
	0xC9, 0x96, 0xCB, 0x6C, 0x79, 0x3C, 0x58, 0xCE, 
	0xF2, 0xDB, 0x5E, 0xD1, 0x36, 0x57, 0xF9, 0x6D, 
	0xAB, 0x6C, 0x9B, 0xA3, 0xFC, 0xB6, 0x3D, 0xA1, 
	0xB7, 0x6D, 0x32, 0xB3, 0xB2, 0xD8, 0xF4, 0x7E, 
	0x28, 0xD0, 0xA2, 0x27, 0x7D, 0xDB, 0xEF, 0x0F, 
	0xD4, 0xF4, 0x29, 0xDF, 0x96, 0x72, 0xA5, 0xB3, 
	0x58, 0x89, 0xCD, 0x6D, 0xB2, 0xFD, 0x69, 0xD9, 
	0x3E, 0xDB, 0x64, 0xAA, 0x59, 0x8E, 0x4F, 0x01, 
	0xA3, 0xED, 0x99, 0xC0, 0xED, 0x8B, 0x9D, 0xCB, 
	0x34, 0xBF, 0xAD, 0xCF, 0x06, 0x6E, 0xCD, 0x6F, 
	0xBB, 0xFD, 0x39, 0xD9, 0x6E, 0xE7, 0x70, 0x80, 
	0x16, 0xCF, 0xFB, 0xB6, 0x6D, 0x34, 0x59, 0x6E, 
	0xAD, 0x59, 0xC5, 0xF8, 0xB5, 0x78, 0x41, 0x5A, 
	0xB8, 0xCD, 0xB7, 0x2D, 0xAD, 0x6D, 0x3B, 0xC3, 
	0x5F, 0x94, 0xED, 0xB9, 0x36, 0x2B, 0x4B, 0xFD, 
	0x4B, 0x52, 0x2F, 0xE3, 0x50, 0xCF, 0xEC, 0x87, 
	0xFD, 0x5B, 0xBC, 0x2C, 0x2D, 0x16, 0x07, 0xCE, 
	0xE1, 0x57, 0xA4, 0x5E, 0x8F, 0x7E, 0x7B, 0x66, 
	0xDD, 0x10, 0xD8, 0xE2, 0x55, 0xFF, 0x16, 0x6D, 
	0x3C, 0x7A, 0x8F, 0x6F, 0x5B, 0x1B, 0x4F, 0x36, 
	0xCB, 0x16, 0x8F, 0xC9, 0xDD, 0x77, 0x06, 0xF6, 
	0xDB, 0xE2, 0xDB, 0x6A, 0xCF, 0x32, 0x8B, 0x03, 
	0xFD, 0xD9, 0x2A, 0xDB, 0x57, 0x38, 0x16, 0x69, 
	0x95, 0x02, 0xB2, 0xF9, 0x36, 0xE5, 0xB1, 0xDF, 
	0xCE, 0xB5, 0x36, 0x70, 0xAE, 0x6C, 0xF7, 0xAF, 
	0x0F, 0x98, 0xC9, 0x3B, 0x02, 0xB7, 0x04, 0x58, 
	0xBA, 0x53, 0x6F, 0x6B, 0x33, 0xF3, 0x77, 0xE9, 
	0x3A, 0x3D, 0x9A, 0xD7, 0x07, 0xB6, 0x7D, 0xAF, 
	0x7F, 0x7D, 0x90, 0x99, 0xBE, 0x5B, 0x79, 0x96, 
	0xF9, 0x9D, 0x51, 0x83, 0xE6, 0x9B, 0x3D, 0xD2, 
	0x66, 0xA5, 0x99, 0xF3, 0x0F, 0x99, 0xAB, 0x4E, 
	0xBF, 0xED, 0x7B, 0xF5, 0x79, 0x74, 0xBD, 0xD9, 
	0xB6, 0x36, 0x30, 0x12, 0xFB, 0x02, 0xB7, 0x04, 
	0x58, 0xB6, 0xDF, 0x6E, 0x0B, 0x32, 0x03, 0x0F, 
	0xE8, 0x2D, 0x97, 0xCD, 0xBD, 0x83, 0xBA, 0x76, 
	0x93, 0x69, 0xFF, 0xE0, 0xE5, 0x79, 0xE9, 0x90, 
	0x3D, 0x97, 0x07, 0xA8, 0x7B, 0x58, 0xEA, 0x82, 
	0xE6, 0xFA, 0x23, 0xCA, 0xB3, 0xDC, 0x89, 0xD2, 
	0xA6, 0x40, 0xAB, 0xAA, 0x94, 0xC7, 0xE7, 0xA5, 
	0x5F, 0xFD, 0x51, 0x5B, 0x1F, 0xE0, 0xDD, 0x6B, 
	0x52, 0x37, 0x48, 0x05, 0x39, 0x8B, 0x1D, 0xF3, 
	0x6D, 0x0D, 0x72, 0xF4, 0xD7, 0xF5, 0x35, 0xBC, 
	0x7F, 0x0E, 0xE9, 0xA6, 0xD6, 0x2D, 0xD3, 0x5F, 
	0xB2, 0xB6, 0x5E, 0xB9, 0x9D, 0xD3, 0xA2, 0xFE, 
	0x2A, 0xB6, 0x2E, 0xBA, 0xC6, 0x65, 0x6A, 0xF2, 
	0xBA, 0x6A, 0xEE, 0xA4, 0x9C, 0x2D, 0x6E, 0xE7, 
	0x24, 0x65, 0x8B, 0x9D, 0x6D, 0x71, 0xBF, 0xB7, 
	0xD8, 0xC5, 0x16, 0x1F, 0xF7, 0x16, 0xBB, 0xDA, 
	0xE2, 0xC3, 0xDE, 0x62, 0x37, 0x5B, 0x7C, 0xC4, 
	0x5B, 0xEC, 0x6E, 0x8B, 0x8F, 0x79, 0x8B, 0x3D, 
	0x6C, 0xF1, 0x21, 0x6F, 0x31, 0xCC, 0x16, 0x1F, 
	0xF5, 0x16, 0xC3, 0x6D, 0xB1, 0xC2, 0x5B, 0x8C, 
	0xB0, 0xC5, 0x4A, 0x6F, 0xB1, 0xA7, 0x2D, 0x3E, 
	0xE8, 0x2D, 0x46, 0xDA, 0xE2, 0x46, 0x6F, 0xB1, 
	0x97, 0x2D, 0x1E, 0xF0, 0x16, 0xA3, 0x6C, 0xF1, 
	0x75, 0x6F, 0xB1, 0xB7, 0x2D, 0x16, 0x7A, 0x8B, 
	0x7D, 0x94, 0x73, 0x2E, 0x75, 0x3B, 0xAB, 0x6A, 
	0xFD, 0x25, 0x75, 0xCB, 0x9C, 0x2B, 0x71, 0xC7, 
	0x39, 0x5D, 0xD4, 0xFF, 0x3B, 0x6D, 0xC2, 0x75, 
	0x65, 0x5F, 0xE5, 0x08, 0xE0, 0x76, 0xC6, 0x9C, 
	0xAE, 0x74, 0xF6, 0xBE, 0x43, 0xE9, 0x9D, 0xC6, 
	0x79, 0xB7, 0xF6, 0x0B, 0xBA, 0x55, 0xF6, 0x1F, 
	0xA3, 0x1C, 0x01, 0xDC, 0xCE, 0xBA, 0xD9, 0xAA, 
	0x1D, 0xAB, 0x1C, 0xB5, 0xDC, 0xCE, 0xE2, 0x58, 
	0x37, 0x30, 0x35, 0xB7, 0x28, 0x47, 0x30, 0xB7, 
	0xB3, 0xF8, 0xA6, 0x26, 0x4E, 0x39, 0x22, 0xB9, 
	0x9D, 0x85, 0x2E, 0x3B, 0xE9, 0xAF, 0x1C, 0x9D, 
	0xDC, 0xCE, 0x12, 0xDE, 0x16, 0x07, 0x28, 0x47, 
	0x18, 0xB7, 0xB3, 0xC2, 0xB5, 0xC5, 0x78, 0xE5, 
	0x08, 0xE3, 0x76, 0x16, 0xB3, 0xB6, 0x98, 0xA0, 
	0x1C, 0x15, 0xDD, 0xCE, 0x8A, 0x3A, 0x2F, 0x4A, 
	0x17, 0x13, 0xF5, 0x17, 0xEB, 0xB9, 0x9D, 0x13, 
	0xB8, 0xF6, 0xAD, 0xD8, 0x18, 0x59, 0xA6, 0x9C, 
	0x91, 0xED, 0x5C, 0x82, 0xE9, 0x1A, 0xFB, 0xEF, 
	0x06, 0x95, 0x17, 0xA1, 0x1B, 0x0F, 0xBC, 0x52, 
	0x63, 0xA7, 0x41, 0x1F, 0xDD, 0x20, 0x49, 0x39, 
	0x32, 0x4B, 0x83, 0x9D, 0x57, 0xD8, 0x1B, 0xFB, 
	0x8C, 0xD4, 0x5D, 0x9C, 0x3C, 0xFC, 0x7A, 0x3B, 
	0x06, 0xDC, 0xEF, 0x3D, 0x74, 0xB2, 0x72, 0x22, 
	0x16, 0xAC, 0xD9, 0x7B, 0xBD, 0x7E, 0xA5, 0xE8, 
	0x5D, 0xBA, 0x9D, 0x68, 0xD9, 0x48, 0xA5, 0x4A, 
	0x51, 0x2B, 0x58, 0xEA, 0x6D, 0x93, 0x66, 0x2B, 
	0x45, 0xB7, 0x74, 0x5B, 0xEC, 0xE6, 0x2D, 0x0E, 
	0xD6, 0x3B, 0x76, 0x3B, 0xC7, 0xB5, 0x7B, 0x18, 
	0xA2, 0x3D, 0x70, 0x63, 0x73, 0x5E, 0x98, 0xAE, 
	0x1C, 0xAA, 0x2D, 0x72, 0x3B, 0xEB, 0x74, 0x7F, 
	0x77, 0x6C, 0xFB, 0x0C, 0x6D, 0x8B, 0xDB, 0x49, 
	0x7B, 0xBA, 0x52, 0xAC, 0xCA, 0x94, 0x4A, 0xDB, 
	0x66, 0x98, 0x72, 0xD0, 0xEC, 0x33, 0xD6, 0x74, 
	0xEC, 0xA1, 0x2B, 0xB3, 0xFC, 0x2B, 0xBB, 0x99, 
	0x7A, 0xD3, 0x77, 0xB8, 0x1E, 0x2C, 0x6E, 0x27, 
	0x23, 0xDB, 0x79, 0x37, 0xC2, 0x14, 0xED, 0x7E, 
	0x46, 0x2A, 0xA7, 0xDA, 0xED, 0x24, 0x71, 0x7D, 
	0xAC, 0xED, 0xDE, 0xF6, 0xA3, 0xA4, 0xD2, 0xB6, 
	0x19, 0xAD, 0x1C, 0x74, 0x3B, 0x4B, 0x5D, 0x27, 
	0xE7, 0xA1, 0xC0, 0x18, 0xE5, 0x54, 0xB8, 0x9D, 
	0xAB, 0x72, 0xBB, 0xCF, 0xB1, 0xA6, 0x68, 0x37, 
	0x8D, 0xD3, 0x0D, 0xF5, 0x40, 0xB5, 0x9B, 0xC6, 
	0x9B, 0xA2, 0x1D, 0x72, 0x13, 0xB4, 0xD2, 0x5E, 
	0x29, 0xEC, 0xCE, 0x27, 0xDA, 0x9A, 0x6E, 0x5E, 
	0x11, 0xEC, 0x1E, 0x6E, 0xD5, 0x31, 0xD1, 0xE2, 
	0xD8, 0x36, 0x93, 0xA4, 0xE8, 0x0D, 0x81, 0xA9, 
	0x74, 0x9A, 0xBF, 0xE6, 0x54, 0x1E, 0x51, 0x4E, 
	0x36, 0xD2, 0x73, 0xC4, 0xEC, 0x7F, 0x8A, 0x72, 
	0x2A, 0xDC, 0xCE, 0xBA, 0x50, 0x1F, 0xDD, 0xD4, 
	0x4C, 0xB5, 0x35, 0xCE, 0xAC, 0xD9, 0xE4, 0xDD, 
	0xF9, 0x34, 0xA9, 0xB1, 0xC5, 0xE9, 0xD2, 0xC5, 
	0xEE, 0x76, 0x86, 0xDE, 0x9F, 0xDB, 0xC9, 0x89, 
	0x5A, 0x90, 0x63, 0xDE, 0x36, 0x33, 0xA5, 0xD2, 
	0xEE, 0x73, 0x96, 0x72, 0xD0, 0x0C, 0x89, 0x02, 
	0xAF, 0xF2, 0xB3, 0xFD, 0x6A, 0x74, 0x6C, 0x1E, 
	0xF0, 0x76, 0x9C, 0x23, 0xF5, 0x76, 0xE7, 0x73, 
	0x69, 0xE6, 0xB4, 0x79, 0xD1, 0x5B, 0xE9, 0xD6, 
	0xCD, 0xDD, 0x7A, 0x4A, 0xDC, 0xA3, 0x9C, 0xC1, 
	0x67, 0x2B, 0xB3, 0x75, 0xC9, 0xED, 0xB4, 0xD1, 
	0x66, 0xDC, 0xE3, 0xAD, 0x9C, 0x67, 0x2B, 0x1F, 
	0x90, 0x4A, 0x73, 0x88, 0x1C, 0x69, 0x69, 0x8B, 
	0xB9, 0xD2, 0xC6, 0x76, 0x99, 0xAF, 0x2D, 0x72, 
	0xEB, 0x99, 0x7C, 0xBB, 0x72, 0x26, 0xB0, 0xB5, 
	0x76, 0x41, 0x60, 0xA5, 0xF6, 0xC2, 0xF4, 0x5D, 
	0xA8, 0x45, 0x72, 0x3B, 0x46, 0xDB, 0x62, 0x9E, 
	0x2D, 0xCE, 0xF4, 0x16, 0x17, 0xD9, 0xE2, 0x4A, 
	0x6F, 0x71, 0xB1, 0x2D, 0x4E, 0xF0, 0x16, 0x97, 
	0xD8, 0xE2, 0x18, 0x6F, 0x71, 0xA9, 0x8E, 0x80, 
	0xDB, 0xB9, 0x40, 0xB5, 0xC5, 0x65, 0xB6, 0x38, 
	0xCD, 0x5B, 0xF4, 0xD8, 0x62, 0x8E, 0xB7, 0xB8, 
	0xDC, 0x16, 0xC7, 0x7A, 0x6D, 0x5E, 0xA1, 0x13, 
	0x92, 0x11, 0xE4, 0xB0, 0x11, 0xC4, 0x68, 0xBE, 
	0x52, 0x97, 0xDC, 0xCE, 0xB9, 0xD0, 0xF9, 0x63, 
	0xC7, 0xD5, 0x2A, 0x53, 0x63, 0xF7, 0x90, 0xAF, 
	0x9C, 0x2D, 0x6E, 0x67, 0x40, 0xD8, 0x62, 0x81, 
	0x2D, 0xDE, 0xEB, 0x2D, 0x16, 0xDA, 0x62, 0xB9, 
	0x77, 0x57, 0xB7, 0x29, 0x67, 0x8B, 0x89, 0x42, 
	0xAC, 0x77, 0x32, 0xAE, 0x56, 0xCE, 0x46, 0xB7, 
	0xD6, 0xD7, 0xC9, 0xAB, 0x77, 0x9A, 0xBC, 0x5A, 
	0xEE, 0x4D, 0x17, 0x45, 0xC1, 0x36, 0xE9, 0x41, 
	0x53, 0xEE, 0xED, 0xBB, 0xC6, 0x36, 0x58, 0x15, 
	0xD8, 0xD7, 0x64, 0xA4, 0xDB, 0xED, 0xA6, 0xD9, 
	0x66, 0x53, 0xBE, 0x1E, 0xA5, 0xBA, 0x2A, 0xCE, 
	0xB0, 0xDF, 0x21, 0xEE, 0xB0, 0xCD, 0xA6, 0x9A, 
	0x3D, 0xFB, 0xEF, 0x27, 0xCE, 0xDB, 0x60, 0xAD, 
	0x6D, 0xB0, 0xC2, 0x6F, 0x93, 0x23, 0xCE, 0x1D, 
	0x46, 0x1C, 0xE3, 0xE0, 0x3A, 0xDB, 0x40, 0x12, 
	0xFB, 0x7A, 0x5B, 0x34, 0x47, 0xB4, 0x0D, 0x8A, 
	0x6D, 0xCD, 0xDD, 0xDE, 0xE2, 0x06, 0x5B, 0xBC, 
	0xCF, 0x5B, 0xBC, 0xD3, 0x16, 0x77, 0x7B, 0x8B, 
	0x25, 0xB6, 0xB8, 0xC6, 0x1B, 0x8E, 0xBB, 0x94, 
	0xD3, 0xCF, 0xAD, 0xC7, 0x6E, 0xA9, 0x6F, 0xA2, 
	0xDD, 0xAD, 0x9C, 0xDE, 0x6E, 0x3D, 0xD5, 0xA5, 
	0xA6, 0xD4, 0xD6, 0x4C, 0xF2, 0x1D, 0xF4, 0x1E, 
	0xED, 0xAE, 0xDB, 0xD9, 0xBB, 0x8D, 0xD7, 0xBD, 
	0xA6, 0x68, 0x37, 0xDD, 0xA7, 0x35, 0x70, 0x3B, 
	0x47, 0xB2, 0x9B, 0xEE, 0x37, 0x45, 0xAB, 0xE7, 
	0x46, 0xED, 0x99, 0x5B, 0x67, 0x8D, 0x2A, 0x93, 
	0xC7, 0x0E, 0xEB, 0xB2, 0x1D, 0xB7, 0x9B, 0xEC, 
	0xA6, 0x29, 0x7E, 0xF5, 0xA6, 0xFB, 0x03, 0xA6, 
	0xDE, 0x5A, 0xEB, 0xE4, 0xF2, 0x35, 0x36, 0xB8, 
	0xAB, 0x7D, 0xB6, 0x95, 0x53, 0x29, 0xB6, 0x3D, 
	0xA8, 0x9C, 0xC8, 0xBA, 0x9D, 0x36, 0x76, 0x0F, 
	0x0F, 0x99, 0xA2, 0xDD, 0xC3, 0xC3, 0xBA, 0xAB, 
	0x5B, 0x8F, 0x92, 0x68, 0x4D, 0xB6, 0xFD, 0x23, 
	0x52, 0x69, 0x8B, 0x8F, 0x2A, 0x07, 0x8D, 0x6B, 
	0xA6, 0xF8, 0x98, 0x2D, 0x76, 0xF3, 0xDA, 0xF9, 
	0xB8, 0x72, 0xD6, 0x95, 0xE6, 0x70, 0xBD, 0xF4, 
	0x7E, 0x9D, 0x78, 0xD9, 0x3D, 0x57, 0x28, 0x47, 
	0x63, 0xB7, 0x9E, 0x1B, 0xB7, 0xFB, 0x6C, 0xAB, 
	0xB4, 0x95, 0x33, 0x4C, 0x8D, 0x69, 0xF6, 0x84, 
	0x72, 0x84, 0xD1, 0x3B, 0xD7, 0x06, 0x94, 0x78, 
	0x0F, 0xF1, 0xA4, 0x54, 0xDA, 0xE2, 0x53, 0x7A, 
	0x20, 0xB8, 0x9D, 0x3F, 0xB6, 0xCB, 0xD3, 0xCA, 
	0x41, 0x93, 0x2E, 0x86, 0x29, 0x2A, 0x9F, 0xA1, 
	0x72, 0xB0, 0xAF, 0xF2, 0x59, 0x2A, 0xB3, 0x7C, 
	0x95, 0xCF, 0x51, 0xD9, 0xC7, 0x57, 0xF9, 0x3C, 
	0x95, 0x31, 0xBE, 0xCA, 0x17, 0xA8, 0x4C, 0xF4, 
	0x55, 0xBE, 0x48, 0x65, 0xA4, 0xAF, 0xF2, 0x25, 
	0x2A, 0x93, 0x7D, 0x95, 0x2F, 0x53, 0x39, 0xDA, 
	0x57, 0xF9, 0x0A, 0x95, 0x19, 0xA6, 0xD2, 0x38, 
	0xF8, 0xAA, 0x54, 0xDA, 0x51, 0xF1, 0x1E, 0x9D, 
	0x2F, 0xDD, 0xBA, 0x7F, 0x7F, 0x4D, 0x7A, 0x00, 
	0x48, 0xC6, 0xDB, 0x2C, 0x9B, 0xEC, 0xDE, 0xB6, 
	0x28, 0x07, 0x4D, 0x4B, 0x67, 0x41, 0xF0, 0xA4, 
	0xB7, 0xCD, 0x56, 0x5B, 0xF9, 0xA4, 0xB7, 0xCD, 
	0x36, 0xBD, 0x45, 0x17, 0xF5, 0x0A, 0xEF, 0x19, 
	0x6F, 0x9B, 0xED, 0xB6, 0xF2, 0x19, 0x6F, 0x9B, 
	0x1D, 0x7A, 0x8B, 0x2E, 0xEA, 0xB5, 0xC8, 0xB3, 
	0xDE, 0x36, 0x3B, 0x6D, 0xE5, 0xB3, 0xDE, 0x36, 
	0xBB, 0xF4, 0x16, 0x5D, 0xD4, 0x8B, 0xA1, 0xA7, 
	0xBD, 0x6D, 0xDE, 0x6B, 0x2B, 0x9F, 0xF6, 0xB6, 
	0xD9, 0xAD, 0xB7, 0xE8, 0xA2, 0x5E, 0x5C, 0xBE, 
	0xE0, 0x6D, 0xB3, 0xC7, 0x56, 0xBE, 0xE0, 0x6D, 
	0xB3, 0x57, 0x6F, 0xD1, 0x45, 0x7D, 0xAA, 0x7E, 
	0xDE, 0x5B, 0xB9, 0x8F, 0xCA, 0x30, 0x53, 0x69, 
	0x3A, 0xEE, 0xB7, 0x95, 0xD2, 0xE6, 0x80, 0xDE, 
	0xA2, 0x8B, 0xFA, 0xA4, 0xBE, 0xD9, 0x5B, 0x79, 
	0x90, 0xCA, 0x91, 0xBE, 0xCA, 0x43, 0x54, 0x0E, 
	0xF1, 0x55, 0x1E, 0xA6, 0x32, 0xD3, 0x54, 0x9A, 
	0x43, 0x1C, 0xB1, 0x95, 0xD2, 0xA6, 0x4A, 0x6F, 
	0xD1, 0x45, 0xBD, 0x64, 0x79, 0xC2, 0x5B, 0x79, 
	0x94, 0xCA, 0x51, 0xA6, 0xD2, 0x74, 0x7C, 0xCD, 
	0x56, 0x4A, 0x9B, 0x63, 0x7A, 0x8B, 0x2E, 0xEA, 
	0xD5, 0xD2, 0x4B, 0xDE, 0xCA, 0xD7, 0xA9, 0xEC, 
	0x66, 0x2A, 0x4D, 0xC7, 0xE3, 0xB6, 0x52, 0xDA, 
	0x9C, 0xD0, 0x5B, 0x74, 0x51, 0xAF, 0xA1, 0xB7, 
	0x7A, 0x2B, 0xAB, 0xA9, 0xEC, 0xE7, 0xAB, 0x7C, 
	0x1F, 0x95, 0xE1, 0xA6, 0xD2, 0xEC, 0xAD, 0xC6, 
	0x56, 0x6E, 0xF5, 0xCE, 0xAF, 0x5A, 0xBD, 0xC5, 
	0xAD, 0x2F, 0x03, 0xA4, 0xA6, 0xCE, 0xD6, 0xA4, 
	0xFA, 0x6A, 0x4E, 0xDA, 0x9A, 0x6E, 0xBE, 0x9A, 
	0x53, 0xB6, 0x26, 0xCD, 0xB7, 0xDB, 0xD3, 0xB6, 
	0xE6, 0x55, 0x6F, 0xF1, 0x8C, 0x2D, 0xBE, 0xC7, 
	0x5B, 0x7C, 0xBF, 0x2D, 0x3E, 0xE7, 0x2D, 0x9E, 
	0xB5, 0xC5, 0x2D, 0xDE, 0xE2, 0x39, 0x5B, 0x7C, 
	0xC5, 0x5B, 0x3C, 0x6F, 0x8B, 0x55, 0xDE, 0x63, 
	0x5D, 0x50, 0xCE, 0x5E, 0xF5, 0x56, 0x67, 0x1D, 
	0x69, 0x6B, 0x3E, 0x40, 0x4D, 0x77, 0x6F, 0x4D, 
	0xBD, 0x72, 0x0E, 0xE5, 0xD6, 0x0B, 0xCD, 0x57, 
	0xBC, 0x35, 0x0D, 0xB6, 0xA6, 0xBB, 0xA9, 0x31, 
	0x69, 0xE7, 0x83, 0xCA, 0x39, 0xBE, 0x5B, 0xE7, 
	0x9C, 0xBD, 0xE6, 0x1C, 0xB1, 0xD5, 0x5B, 0xDF, 
	0xA8, 0x1C, 0x43, 0xDC, 0xFA, 0x1C, 0x2C, 0x9B, 
	0x6C, 0xFD, 0x87, 0xFC, 0xEB, 0x4B, 0x7D, 0x69, 
	0xEA, 0xC3, 0x7A, 0x97, 0xE6, 0xE8, 0x7D, 0x7D, 
	0xCB, 0xAD, 0x26, 0xFF, 0xCA, 0x3D, 0xDE, 0x3D, 
	0x34, 0x53, 0x39, 0xC0, 0x9C, 0x98, 0xE2, 0xBD, 
	0x0E, 0x7E, 0xC4, 0xD6, 0xCB, 0x5A, 0xF1, 0x0D, 
	0x5B, 0xDC, 0xE3, 0x2D, 0x5E, 0xD4, 0xA9, 0xDD, 
	0xED, 0xAC, 0x7B, 0x6C, 0xF1, 0x92, 0x2D, 0xCA, 
	0x62, 0xB5, 0xC5, 0x16, 0x67, 0x79, 0x8B, 0x1F, 
	0xB5, 0xC5, 0x89, 0xDE, 0x62, 0xAB, 0x2D, 0xCA, 
	0xCA, 0xF0, 0x63, 0xB6, 0x28, 0xA7, 0xC5, 0xBC, 
	0x17, 0xD5, 0xBA, 0xB9, 0xCE, 0x95, 0xA6, 0x73, 
	0xC6, 0xFD, 0xD7, 0xBF, 0xDC, 0xB9, 0xE6, 0xFE, 
	0xB4, 0x5B, 0x5F, 0x67, 0x76, 0x72, 0xFE, 0x74, 
	0xD2, 0x9F, 0x3E, 0xBB, 0xF5, 0xA5, 0x65, 0x17, 
	0xE7, 0x4F, 0x17, 0xFD, 0x69, 0xB1, 0x5B, 0x5F, 
	0x4A, 0xF6, 0xB4, 0x91, 0x7F, 0xCA, 0x8A, 0xF9, 
	0x8C, 0x1D, 0x2B, 0x7A, 0x06, 0x87, 0xD9, 0xB9, 
	0x16, 0x6E, 0x97, 0xBF, 0x11, 0x76, 0x51, 0xDC, 
	0xD3, 0xAE, 0xA5, 0x23, 0xED, 0x72, 0xBC, 0x97, 
	0x5D, 0xB9, 0x38, 0x62, 0xBF, 0xCF, 0xF9, 0xE3, 
	0x0C, 0xD7, 0x53, 0xCE, 0x1F, 0x27, 0x87, 0x9E, 
	0x75, 0xFE, 0x38, 0xC9, 0xFB, 0xA2, 0xF3, 0xC7, 
	0x91, 0xEB, 0x92, 0xF3, 0xC7, 0x19, 0xB5, 0x1F, 
	0x75, 0xFE, 0x38, 0xA9, 0xB4, 0xD5, 0xF9, 0xE3, 
	0xA4, 0xAF, 0x4F, 0x3A, 0x7F, 0x9C, 0xE5, 0xEC, 
	0xA7, 0x9D, 0x3F, 0xCE, 0x8A, 0xE0, 0x73, 0xCE, 
	0x1F, 0x27, 0xB3, 0x7D, 0x5E, 0x99, 0x65, 0xD9, 
	0x17, 0x9C, 0x3F, 0xCE, 0xBA, 0xEC, 0x8B, 0xCE, 
	0x9F, 0x04, 0x9D, 0x5B, 0xDC, 0x3A, 0xDB, 0x7E, 
	0x59, 0x99, 0x35, 0xD1, 0x77, 0x9D, 0x3F, 0x4E, 
	0x46, 0xFA, 0x91, 0xF3, 0xC7, 0x49, 0x70, 0x7F, 
	0x70, 0xFE, 0x38, 0xF9, 0xF5, 0x9F, 0xCE, 0x1F, 
	0xE7, 0xBA, 0xA5, 0x87, 0xCB, 0x0C, 0xEB, 0x04, 
	0x97, 0x19, 0xB9, 0xE9, 0x2E, 0x33, 0x60, 0x32, 
	0x9C, 0x3F, 0xCE, 0x09, 0x60, 0xA4, 0xF3, 0xC7, 
	0x99, 0xFA, 0x33, 0x9C, 0x3F, 0xCE, 0x44, 0x9E, 
	0xE3, 0xFC, 0x71, 0xB2, 0x6D, 0x8E, 0xF3, 0xC7, 
	0x99, 0xFA, 0x0B, 0x5C, 0x6E, 0x1D, 0xD0, 0xB9, 
	0x8E, 0x54, 0xB3, 0x5D, 0x46, 0x2C, 0x2B, 0x9D, 
	0xD6, 0x7C, 0xAE, 0x53, 0x76, 0x2A, 0xA3, 0xA5, 
	0xD4, 0x59, 0x97, 0x06, 0x4A, 0xA9, 0x8B, 0x2E, 
	0xA5, 0x38, 0xA5, 0x5E, 0xBA, 0xD4, 0x55, 0x94, 
	0x1F, 0xA6, 0xE7, 0xB7, 0x11, 0xB9, 0xBB, 0xF3, 
	0xC7, 0x39, 0xD3, 0xF4, 0x90, 0x26, 0xDD, 0xDA, 
	0x6D, 0x62, 0xF6, 0xD9, 0x5D, 0xEF, 0x73, 0xB9, 
	0x74, 0xE8, 0xE1, 0xD7, 0x21, 0xCC, 0x76, 0x08, 
	0xB7, 0x1D, 0x22, 0xA4, 0x49, 0xD8, 0xD5, 0x0F, 
	0x1B, 0xEE, 0xDD, 0x67, 0x3B, 0x4D, 0x22, 0xDA, 
	0x3D, 0x50, 0x1F, 0xDD, 0xA4, 0xA7, 0xDE, 0x8B, 
	0xD3, 0x41, 0xA7, 0xE9, 0x48, 0xE7, 0xCF, 0x08, 
	0x1B, 0x1C, 0x97, 0x3E, 0x1B, 0x9A, 0xA0, 0x3A, 
	0x27, 0x10, 0xBD, 0x64, 0x9B, 0xEB, 0x6C, 0xF5, 
	0xEE, 0xCC, 0xDB, 0x72, 0xA4, 0x9E, 0x64, 0x5E, 
	0x91, 0x7B, 0xC9, 0xB6, 0x44, 0x3D, 0x66, 0xBD, 
	0x95, 0x51, 0x52, 0x39, 0x4A, 0xA7, 0x3D, 0x6F, 
	0x65, 0x6F, 0xA9, 0x4C, 0xD1, 0x67, 0x66, 0x6F, 
	0x65, 0x1F, 0xA9, 0x1C, 0xAD, 0x4C, 0x54, 0x4C, 
	0x65, 0xB4, 0xDF, 0x3E, 0xFB, 0x4A, 0x65, 0x5F, 
	0xA9, 0x4C, 0xD5, 0x59, 0xD3, 0x5B, 0xD9, 0xCF, 
	0xCF, 0xB2, 0x18, 0x31, 0x37, 0x26, 0xB0, 0x52, 
	0x5F, 0xDD, 0xC5, 0x3A, 0xDB, 0xFA, 0xE9, 0x6D, 
	0xB1, 0xDA, 0xE9, 0x05, 0x4A, 0xAF, 0xCF, 0x9D, 
	0x01, 0xEB, 0x5D, 0xF3, 0x19, 0xA7, 0xFB, 0x2B, 
	0xB3, 0x4E, 0x1B, 0x60, 0x3B, 0xC4, 0x8B, 0x4A, 
	0xB7, 0xB4, 0xE9, 0x30, 0x21, 0x48, 0x07, 0x7B, 
	0xD8, 0x38, 0x69, 0x39, 0xD1, 0xBF, 0x89, 0xDD, 
	0xD6, 0x3F, 0xF8, 0x36, 0x73, 0x84, 0x01, 0xA1, 
	0x1C, 0xC1, 0x18, 0x1F, 0x7F, 0x0D, 0xC6, 0x9B, 
	0x51, 0x90, 0xD0, 0x26, 0x70, 0xB7, 0xFA, 0x87, 
	0xD8, 0x2A, 0x98, 0x28, 0x4D, 0x26, 0x29, 0x33, 
	0x11, 0x8C, 0xB9, 0x03, 0xA5, 0xD2, 0xA5, 0x17, 
	0x0C, 0x6C, 0x33, 0x1D, 0x92, 0xFC, 0x3A, 0x0C, 
	0x92, 0x03, 0x0D, 0xF2, 0x3B, 0x50, 0xB2, 0x3D, 
	0xC2, 0x78, 0x45, 0x13, 0xB3, 0xCF, 0xE4, 0x36, 
	0x4D, 0x46, 0x2A, 0x33, 0xD5, 0xCC, 0x3E, 0x53, 
	0x64, 0x9B, 0x73, 0x1D, 0x9C, 0x2A, 0x95, 0xA9, 
	0x52, 0x39, 0x45, 0x9F, 0x74, 0xBD, 0x95, 0x69, 
	0x52, 0x39, 0x58, 0x9F, 0x60, 0xBC, 0x95, 0xE9, 
	0x52, 0x39, 0x44, 0xAF, 0x0E, 0xBD, 0x95, 0x83, 
	0xA5, 0x32, 0x59, 0xAF, 0x12, 0xBC, 0x95, 0x43, 
	0xA4, 0x32, 0x5D, 0xAF, 0x00, 0xBC, 0x95, 0x43, 
	0xA5, 0x72, 0xAC, 0x5E, 0xB4, 0x79, 0xCD, 0xCD, 
	0x08, 0xAC, 0xD4, 0x81, 0xCB, 0x94, 0x6D, 0x99, 
	0xB2, 0xCD, 0x56, 0xEA, 0x26, 0xC3, 0x64, 0xDB, 
	0x30, 0xBF, 0x7E, 0xC3, 0xAC, 0x04, 0x59, 0xB2, 
	0x2D, 0xCB, 0x4F, 0xBA, 0x2C, 0xAB, 0xD2, 0x70, 
	0x31, 0x62, 0xB8, 0xDF, 0xB6, 0x11, 0xD2, 0x61, 
	0x84, 0x0E, 0x78, 0x9E, 0x92, 0x4A, 0xDD, 0x61, 
	0xA4, 0x6C, 0x1B, 0x29, 0x1D, 0xA6, 0xEA, 0x75, 
	0x8B, 0x69, 0x32, 0x5A, 0x76, 0x36, 0x4A, 0xFA, 
	0x4D, 0x34, 0xDB, 0x6C, 0x8C, 0x46, 0x4B, 0xA5, 
	0xB3, 0x97, 0x31, 0x2A, 0x68, 0xBF, 0x31, 0x7E, 
	0x46, 0x8C, 0x95, 0x03, 0x8D, 0xF5, 0x33, 0x62, 
	0xAC, 0xED, 0x3E, 0x4E, 0x3A, 0x8C, 0xF3, 0x53, 
	0x62, 0x94, 0x54, 0x8E, 0xF7, 0xDB, 0xCB, 0x04, 
	0x39, 0xFA, 0x04, 0xBF, 0xCA, 0x89, 0x76, 0x2F, 
	0xB7, 0xDA, 0xDC, 0x33, 0x59, 0x0E, 0x34, 0x31, 
	0x68, 0x13, 0xBB, 0xCF, 0x5B, 0xFD, 0xB6, 0x4D, 
	0x92, 0x0E, 0x93, 0x02, 0x2B, 0xBD, 0x23, 0xCB, 
	0xCE, 0xAA, 0xC9, 0xB2, 0xCD, 0x39, 0xAF, 0x4C, 
	0x51, 0xE6, 0x34, 0xB1, 0x98, 0xE3, 0xE9, 0xD1, 
	0x73, 0xBB, 0xEC, 0x7A, 0x8A, 0xB4, 0x9C, 0xA6, 
	0x1C, 0x4D, 0xBC, 0x95, 0x53, 0xFD, 0x32, 0xD8, 
	0x34, 0xA9, 0x9C, 0xE6, 0x97, 0xAC, 0xA6, 0x4B, 
	0xE5, 0x74, 0xA9, 0x74, 0x4E, 0x52, 0x33, 0xA4, 
	0x72, 0x86, 0x54, 0x3A, 0x27, 0xB7, 0x99, 0x52, 
	0x39, 0xD3, 0x2F, 0xAD, 0xCD, 0x92, 0xCA, 0x59, 
	0x7E, 0x63, 0x77, 0xB6, 0x54, 0xCE, 0xF6, 0x1B, 
	0xBB, 0x73, 0xA4, 0x72, 0x8E, 0x54, 0x3A, 0xE7, 
	0xF0, 0xB9, 0x52, 0x39, 0xD7, 0x2F, 0x00, 0x6E, 
	0xD1, 0xC5, 0x2D, 0x95, 0xD3, 0x4D, 0xA5, 0x3E, 
	0xDB, 0x67, 0x4B, 0x1C, 0xB2, 0xDB, 0x6C, 0x73, 
	0x86, 0xE9, 0x3C, 0x5F, 0x13, 0xD3, 0x7D, 0x9E, 
	0xDF, 0x10, 0x9E, 0x67, 0x07, 0x51, 0x8E, 0x6C, 
	0xCB, 0xF1, 0x3B, 0x5E, 0x8E, 0xED, 0x9E, 0x2B, 
	0xDB, 0x72, 0xFD, 0xFA, 0xE5, 0xDA, 0xF1, 0x32, 
	0x5F, 0xB6, 0xCD, 0xD7, 0x83, 0xC8, 0x57, 0xA9, 
	0x63, 0xBB, 0x40, 0x7C, 0x58, 0xE0, 0x17, 0xC6, 
	0x85, 0xD2, 0x61, 0x61, 0x60, 0xA5, 0xEE, 0x90, 
	0x27, 0x1D, 0xF2, 0xFC, 0xB6, 0x2D, 0x92, 0xCA, 
	0x45, 0x7E, 0x47, 0xA0, 0x72, 0xB1, 0x9F, 0xE4, 
	0x4B, 0xA4, 0x72, 0x89, 0x5F, 0x12, 0x58, 0x2A, 
	0x95, 0x4B, 0xFD, 0x02, 0xBE, 0x4C, 0x2A, 0x97, 
	0xF9, 0x79, 0xE4, 0x11, 0xCB, 0x3C, 0x81, 0x95, 
	0x5A, 0x89, 0xE5, 0xB2, 0x6D, 0xB9, 0x9F, 0x3C, 
	0xCB, 0xAD, 0x3C, 0x2B, 0x64, 0xDB, 0x0A, 0xBF, 
	0x7E, 0x2B, 0xAC, 0x9D, 0x2B, 0x65, 0xDB, 0x4A, 
	0x3F, 0x8F, 0x56, 0x5A, 0x6F, 0x57, 0x89, 0x11, 
	0xAB, 0xFC, 0xB6, 0xE5, 0x4B, 0x87, 0xFC, 0xC0, 
	0x4A, 0xDD, 0xA1, 0x40, 0x3A, 0x14, 0xC8, 0xB6, 
	0x5B, 0xCD, 0xBD, 0x27, 0xDB, 0xA1, 0x30, 0xB0, 
	0x52, 0x77, 0xB8, 0x4D, 0x3A, 0xDC, 0xE6, 0xB7, 
	0xB3, 0xD5, 0xD2, 0x61, 0x75, 0x60, 0xA5, 0xEE, 
	0x50, 0x24, 0x1D, 0x8A, 0xFC, 0xB6, 0xAD, 0x91, 
	0xCA, 0x35, 0x3A, 0x00, 0x4B, 0x14, 0x95, 0x66, 
	0x2F, 0xB7, 0xFB, 0x4D, 0x04, 0x7D, 0xBB, 0x63, 
	0x86, 0xB9, 0x15, 0x6E, 0x3B, 0xDC, 0xE1, 0x17, 
	0x87, 0xB5, 0x52, 0xB9, 0xD6, 0x6F, 0x3A, 0xAD, 
	0x93, 0xCA, 0x75, 0x7E, 0xC1, 0x59, 0x2F, 0x95, 
	0xEB, 0xFD, 0x66, 0x4E, 0xB1, 0x54, 0x16, 0xFB, 
	0x89, 0xBC, 0x41, 0x8C, 0xD8, 0x10, 0x58, 0xA9, 
	0x83, 0x73, 0xA7, 0x6C, 0xBB, 0xD3, 0x2F, 0x62, 
	0x77, 0xDA, 0x88, 0x95, 0xC8, 0x5C, 0x29, 0xF1, 
	0xEB, 0x57, 0x62, 0x17, 0xC8, 0x77, 0x59, 0xFF, 
	0xEE, 0x96, 0xE3, 0xDD, 0xE5, 0xA7, 0xC4, 0xDD, 
	0xB2, 0xCF, 0xBB, 0x03, 0x2B, 0xB5, 0x74, 0xA5, 
	0xD2, 0xA1, 0x54, 0xAB, 0xB4, 0xC8, 0xEE, 0xE5, 
	0x1E, 0xE9, 0x70, 0x8F, 0x5F, 0x87, 0x7B, 0x6C, 
	0x87, 0x7B, 0xA5, 0xC3, 0xBD, 0x7E, 0xDB, 0xEE, 
	0x93, 0x0E, 0xF7, 0xF9, 0xED, 0xE5, 0x3E, 0xDB, 
	0xE1, 0x7E, 0x59, 0x71, 0xDE, 0xEF, 0xDD, 0x66, 
	0xBB, 0x6F, 0xF4, 0x3B, 0xB5, 0x6E, 0x92, 0xCA, 
	0x4D, 0x7E, 0x7A, 0x3E, 0x20, 0x95, 0x0F, 0xF8, 
	0x79, 0x5B, 0x26, 0x07, 0x2A, 0x0B, 0xAC, 0xD4, 
	0x2A, 0x95, 0xCB, 0xB6, 0x72, 0x3F, 0xE9, 0xCA, 
	0xAD, 0x74, 0x0F, 0xCA, 0xB6, 0x07, 0xFD, 0xFA, 
	0x3D, 0x68, 0xED, 0x7C, 0x48, 0x64, 0x7D, 0x48, 
	0x1B, 0xB8, 0x98, 0x4A, 0x9D, 0x93, 0x1F, 0xB6, 
	0x3E, 0x3C, 0x22, 0xDD, 0x1F, 0xF6, 0x5B, 0x2C, 
	0xB4, 0xDD, 0xF6, 0x88, 0xDF, 0xB6, 0x47, 0xED, 
	0x5E, 0x1E, 0x93, 0x6D, 0x8F, 0xB6, 0xB3, 0xED, 
	0x31, 0x3F, 0x21, 0x1F, 0xB3, 0xD7, 0x32, 0x8F, 
	0x8B, 0x49, 0x8F, 0xFB, 0xF5, 0xAB, 0xB0, 0x91, 
	0xAE, 0xB4, 0xDD, 0x9F, 0x90, 0x26, 0x15, 0xED, 
	0x36, 0x31, 0x0A, 0x56, 0xFA, 0x1D, 0x81, 0x7E, 
	0x4F, 0x88, 0xB7, 0x01, 0xAE, 0x04, 0x34, 0x79, 
	0x52, 0x37, 0x09, 0x53, 0x57, 0x58, 0xA6, 0x99, 
	0xD3, 0xD9, 0x53, 0xBA, 0x49, 0xB6, 0xAF, 0xC9, 
	0x4C, 0xDB, 0x64, 0x8C, 0xBD, 0xF5, 0xE2, 0xDF, 
	0xF2, 0xE9, 0x50, 0x5A, 0x9A, 0xC3, 0x3E, 0xA3, 
	0x5B, 0x86, 0x5F, 0xE9, 0xB0, 0x66, 0xC5, 0xF9, 
	0xAC, 0x6E, 0x12, 0xE1, 0x6B, 0x32, 0xCB, 0x36, 
	0xE9, 0x61, 0x2F, 0xCE, 0x7D, 0x97, 0x0A, 0xCF, 
	0xCB, 0x3E, 0x9F, 0xD3, 0x1D, 0x7A, 0x5E, 0x69, 
	0x9F, 0xA6, 0xC9, 0xF3, 0xBA, 0x49, 0xE4, 0x95, 
	0x9A, 0x0C, 0xD0, 0x4D, 0x5E, 0x10, 0x21, 0x67, 
	0xDB, 0xDB, 0x61, 0x63, 0x6D, 0xCB, 0xF1, 0xF6, 
	0xC6, 0xD7, 0x1C, 0x7B, 0x05, 0x1E, 0x46, 0x3F, 
	0x7D, 0xEB, 0x20, 0xCB, 0xDC, 0xAF, 0xB1, 0x71, 
	0x78, 0x51, 0xBA, 0x87, 0x99, 0xBB, 0x27, 0x76, 
	0x5A, 0xBC, 0xA4, 0x0F, 0x3B, 0x51, 0x8C, 0x78, 
	0x39, 0xB0, 0x49, 0x9B, 0x2B, 0x1B, 0x23, 0xE4, 
	0x2B, 0x6D, 0x16, 0xCF, 0x73, 0xEC, 0xF1, 0xC2, 
	0xEC, 0xED, 0x0C, 0x7F, 0x8F, 0x5E, 0xF5, 0xEE, 
	0x3A, 0xB8, 0x47, 0x66, 0xF0, 0xBD, 0xA7, 0xCD, 
	0xF1, 0xFC, 0x57, 0xDB, 0x9B, 0x65, 0xDB, 0x5C, 
	0x7B, 0x0F, 0x23, 0xCC, 0xDC, 0x51, 0xB1, 0xAE, 
	0x6C, 0x69, 0xE3, 0x8A, 0xA9, 0xDC, 0x2A, 0xC7, 
	0xF3, 0x56, 0x1A, 0x23, 0xB6, 0xE9, 0xCA, 0x5E, 
	0xED, 0x2A, 0xBF, 0x5D, 0x37, 0x89, 0x6A, 0x37, 
	0xE0, 0x3B, 0x74, 0x13, 0xE7, 0x92, 0x4D, 0x5F, 
	0xFE, 0xEF, 0x54, 0x57, 0xBE, 0x36, 0xDC, 0x25, 
	0xB2, 0xEE, 0xD4, 0x1D, 0x3A, 0xCB, 0x11, 0x76, 
	0xE9, 0x52, 0x9F, 0x76, 0x8F, 0xF0, 0x5E, 0xDD, 
	0x24, 0xCD, 0xD7, 0xC4, 0x6D, 0x9B, 0x44, 0xDA, 
	0x3B, 0xC7, 0xBE, 0x23, 0xEC, 0x91, 0x7D, 0xEE, 
	0xD6, 0x1D, 0xD2, 0xDB, 0x75, 0x6C, 0x8F, 0x6E, 
	0x32, 0xB8, 0xDD, 0xC3, 0xEE, 0xD5, 0x4D, 0xBA, 
	0xD9, 0x26, 0xFA, 0x03, 0xBD, 0xEC, 0x00, 0x8F, 
	0x9C, 0xC9, 0x7C, 0xC2, 0x1E, 0xB6, 0x5A, 0xF6, 
	0xB9, 0x4F, 0x94, 0xB7, 0x63, 0x42, 0x2F, 0x19, 
	0xF7, 0xD3, 0xDD, 0xC6, 0x61, 0xBF, 0xDF, 0xC9, 
	0xED, 0x80, 0x54, 0x1E, 0xF0, 0x3B, 0xAB, 0x1D, 
	0x94, 0xCA, 0x83, 0x7E, 0x67, 0xB5, 0x43, 0x52, 
	0x79, 0xC8, 0x2F, 0x0B, 0x1F, 0x96, 0xCA, 0xC3, 
	0x7E, 0x67, 0xB5, 0x23, 0x52, 0x79, 0xC4, 0x2F, 
	0x9B, 0x56, 0xC9, 0xB0, 0xA9, 0x0A, 0xAC, 0xD4, 
	0x59, 0xF8, 0xA8, 0x6C, 0x3B, 0xEA, 0x97, 0x9A, 
	0x8F, 0xDA, 0x09, 0xF4, 0x9A, 0x38, 0xF6, 0x9A, 
	0x5F, 0xBF, 0xD7, 0xAC, 0xEF, 0xC7, 0xEC, 0x88, 
	0x7C, 0x5D, 0x8E, 0x77, 0xCC, 0x2F, 0x91, 0xBD, 
	0x2E, 0xFB, 0x7C, 0x3D, 0xB0, 0x52, 0x4B, 0x77, 
	0x5C, 0x46, 0xC1, 0x71, 0xAD, 0xEE, 0x42, 0x39, 
	0xC2, 0x09, 0x5D, 0xEA, 0xDE, 0x6E, 0xC4, 0xAA, 
	0x75, 0x93, 0xAC, 0x76, 0x53, 0xDE, 0xFB, 0x74, 
	0x93, 0xBE, 0xBE, 0x26, 0xF3, 0x02, 0x22, 0xE6, 
	0x18, 0x51, 0x23, 0xB1, 0xAD, 0xD1, 0x2D, 0x67, 
	0xF9, 0x5A, 0xE6, 0x04, 0x69, 0xA9, 0x3F, 0x4B, 
	0xAC, 0x95, 0x0E, 0xB5, 0x6D, 0xA6, 0xF6, 0x7C, 
	0xDB, 0x61, 0x81, 0xCA, 0xAD, 0x0B, 0xE8, 0x77, 
	0x52, 0x6C, 0xA9, 0x6B, 0xD3, 0xE1, 0x32, 0x5B, 
	0x68, 0x79, 0xB2, 0x8D, 0x2D, 0x41, 0x5B, 0x1A, 
	0x09, 0x4E, 0xE9, 0x96, 0xFD, 0xEC, 0x54, 0x3B, 
	0xAD, 0xCC, 0xCD, 0xB8, 0x33, 0x76, 0x0C, 0xBE, 
	0x5F, 0x64, 0x3D, 0xAD, 0x9B, 0x74, 0x91, 0xD2, 
	0x19, 0x5D, 0xEA, 0x2A, 0xA5, 0xF7, 0xEB, 0x52, 
	0x8C, 0x64, 0xCC, 0xB3, 0xBA, 0x34, 0xD9, 0x77, 
	0xD8, 0x85, 0x01, 0x87, 0x8D, 0x52, 0xB9, 0xE7, 
	0xEC, 0xD1, 0x3F, 0x64, 0x95, 0xF8, 0xB0, 0xD2, 
	0xCF, 0x3A, 0xE4, 0x7E, 0x44, 0x04, 0x39, 0x77, 
	0x35, 0x05, 0xCF, 0xDB, 0x7E, 0x0D, 0xD2, 0xE1, 
	0x7C, 0x88, 0x1D, 0x2E, 0x48, 0x87, 0x0B, 0x57, 
	0x94, 0xFC, 0x03, 0x01, 0xFD, 0xEA, 0x45, 0xC8, 
	0x0F, 0x5C, 0x4D, 0x72, 0x5A, 0xD6, 0x5F, 0x4D, 
	0xF2, 0x7A, 0x31, 0xA2, 0xE1, 0x8A, 0x46, 0x7C, 
	0x30, 0xA0, 0x43, 0xA3, 0xEC, 0xFA, 0x83, 0x57, 
	0x33, 0x82, 0x96, 0x8D, 0x57, 0x33, 0x42, 0xB7, 
	0xBC, 0x45, 0xB7, 0xFC, 0x50, 0x9B, 0x50, 0x2D, 
	0xBA, 0x6A, 0xA8, 0xAC, 0xF1, 0x1F, 0xBE, 0xA2, 
	0xF1, 0x4D, 0x01, 0x07, 0x6A, 0x16, 0x93, 0x9A, 
	0xAE, 0x66, 0x3C, 0x2D, 0x9B, 0xAF, 0x66, 0x3C, 
	0x2D, 0x3F, 0xD2, 0x66, 0x9F, 0x8B, 0x03, 0x5A, 
	0x2E, 0x51, 0xB9, 0x6F, 0x48, 0xCB, 0x37, 0xF4, 
	0x3E, 0xDD, 0xAA, 0xFD, 0x96, 0x46, 0x90, 0x8B, 
	0xD7, 0x2E, 0x88, 0x39, 0xC2, 0x25, 0xDD, 0x2F, 
	0xD6, 0xD7, 0x6F, 0x69, 0x40, 0x3F, 0x67, 0x79, 
	0xD7, 0x22, 0x53, 0xAD, 0x45, 0xB7, 0xBC, 0xA5, 
	0xDD, 0x84, 0xF4, 0x51, 0xDD, 0x24, 0xAE, 0xDD, 
	0x53, 0x48, 0xAB, 0x6E, 0x32, 0xC4, 0xD7, 0x64, 
	0x59, 0xC0, 0xF1, 0x62, 0x54, 0xEE, 0xC7, 0xEC, 
	0xF4, 0xFD, 0x84, 0x18, 0xF8, 0x31, 0xDD, 0x61, 
	0xA8, 0xAF, 0xC3, 0x65, 0x67, 0xD1, 0x8F, 0xCB, 
	0xD1, 0x3F, 0xAE, 0x5B, 0x66, 0xB4, 0x6B, 0xE0, 
	0x27, 0x74, 0x93, 0xCC, 0x76, 0x33, 0xE6, 0x27, 
	0x75, 0x93, 0x61, 0xED, 0x1C, 0xEF, 0x53, 0xB2, 
	0xB3, 0x4F, 0xE9, 0x96, 0xC3, 0xDB, 0xF5, 0xF6, 
	0xD3, 0xBA, 0xC9, 0x08, 0x5F, 0x13, 0x4F, 0xDB, 
	0x9D, 0x7D, 0x46, 0x99, 0x7B, 0xFE, 0x9F, 0x95, 
	0x7D, 0x7E, 0x46, 0x77, 0x18, 0xD9, 0xAE, 0x81, 
	0x9F, 0xD5, 0x4D, 0x46, 0xB5, 0x63, 0xE0, 0x7F, 
	0xC8, 0xCE, 0xFE, 0x43, 0xB7, 0x1C, 0xDD, 0xAE, 
	0x20, 0x9F, 0xD3, 0x4D, 0xFA, 0xB7, 0xDB, 0xE4, 
	0xF3, 0xBA, 0xC9, 0x80, 0x76, 0x9B, 0x7C, 0x41, 
	0x37, 0x89, 0x6F, 0xD7, 0xEA, 0x2F, 0xEA, 0x26, 
	0x09, 0xED, 0x58, 0xFD, 0x25, 0xD9, 0xD9, 0x97, 
	0x74, 0xCB, 0xC4, 0x2B, 0xED, 0xCC, 0x0C, 0xF6, 
	0x2F, 0x07, 0x5F, 0x9E, 0x2F, 0xF7, 0x5F, 0x9E, 
	0xEB, 0xF5, 0xC4, 0x57, 0x94, 0xB9, 0x21, 0xF5, 
	0x2D, 0x09, 0xC7, 0x57, 0x82, 0xF7, 0x5B, 0xD1, 
	0xB6, 0xDF, 0x57, 0xA5, 0xC3, 0x57, 0x83, 0x77, 
	0x58, 0x19, 0xD0, 0xC1, 0xB9, 0x28, 0xFC, 0x9A, 
	0x74, 0xF8, 0x5A, 0xF0, 0x0E, 0xAB, 0x02, 0x3A, 
	0x38, 0x26, 0x7D, 0x5D, 0x3A, 0x7C, 0x3D, 0x78, 
	0x87, 0xFC, 0x80, 0x0E, 0x53, 0x54, 0xEE, 0x37, 
	0xA4, 0xC3, 0x37, 0x82, 0x77, 0x28, 0x08, 0xE8, 
	0xE0, 0xAC, 0x7B, 0xBE, 0x29, 0xCA, 0x7F, 0x53, 
	0x77, 0x18, 0x73, 0x59, 0x87, 0xC0, 0x6B, 0x19, 
	0xB3, 0xEB, 0x6F, 0x85, 0xB8, 0xEB, 0x6F, 0x4B, 
	0x87, 0x6F, 0x87, 0x28, 0xCF, 0x77, 0xC4, 0x96, 
	0xEF, 0xE8, 0x0E, 0x63, 0x43, 0xB1, 0xE5, 0xBB, 
	0xC1, 0x77, 0x5D, 0x18, 0xB0, 0x6B, 0x67, 0x75, 
	0xF8, 0x3D, 0xE9, 0xF0, 0xBD, 0xE0, 0x1D, 0x6E, 
	0x0B, 0xE8, 0x90, 0xAC, 0x72, 0xBF, 0x2F, 0x1D, 
	0xBE, 0x1F, 0xBC, 0xC3, 0xEA, 0x80, 0x0E, 0x89, 
	0x2A, 0xF7, 0x07, 0xD2, 0xE1, 0x07, 0xC1, 0x3B, 
	0x14, 0x05, 0x74, 0x58, 0xA3, 0x72, 0x7F, 0x28, 
	0xDE, 0xFE, 0x50, 0x77, 0x18, 0x77, 0x15, 0x6F, 
	0xCD, 0xCA, 0xE3, 0x47, 0xC1, 0x77, 0x7D, 0x7B, 
	0x5B, 0x5B, 0xFE, 0x53, 0x99, 0xBB, 0x3F, 0x3F, 
	0xB5, 0xB2, 0xFE, 0x5C, 0x2C, 0xFB, 0xCF, 0xE0, 
	0xDD, 0xEF, 0x08, 0xE8, 0xEE, 0xAC, 0xBD, 0x7F, 
	0x2C, 0x1D, 0x7E, 0x1C, 0xA2, 0x58, 0x3F, 0x11, 
	0x57, 0x7E, 0xA2, 0x3B, 0x8C, 0x0F, 0x25, 0x70, 
	0x3F, 0x0D, 0x51, 0xD6, 0x9F, 0x49, 0x87, 0x9F, 
	0x85, 0x18, 0xE9, 0xFF, 0x12, 0x5B, 0xFE, 0x4B, 
	0x77, 0x98, 0x10, 0x8A, 0x2D, 0x3F, 0x0F, 0x71, 
	0x72, 0xFD, 0x42, 0x12, 0xCB, 0x2F, 0x82, 0x77, 
	0x58, 0xDB, 0x56, 0xC8, 0x5F, 0xDA, 0x89, 0xF0, 
	0x6B, 0x39, 0xD0, 0x2F, 0x43, 0x9C, 0x39, 0xBF, 
	0x12, 0x1F, 0x7E, 0xA5, 0x3B, 0xDC, 0x1A, 0x8A, 
	0x0F, 0xBF, 0x0E, 0xBE, 0xEB, 0x75, 0x01, 0xBB, 
	0x76, 0xAE, 0x88, 0x7E, 0x23, 0x1D, 0x7E, 0x13, 
	0xA2, 0xD3, 0xBF, 0x95, 0x0E, 0xBF, 0x0D, 0x31, 
	0x67, 0xFD, 0x4E, 0x3A, 0xFC, 0x2E, 0xC4, 0xD1, 
	0xF3, 0x7B, 0xF1, 0xF6, 0xF7, 0xBA, 0xC3, 0xA4, 
	0xAB, 0x78, 0x6B, 0x02, 0xF0, 0x87, 0xE0, 0xBB, 
	0x5E, 0xDF, 0x76, 0xD7, 0x7F, 0xB4, 0x33, 0xE0, 
	0x7F, 0xC4, 0xA4, 0x3F, 0x06, 0xEF, 0x57, 0x1C, 
	0xD0, 0x2F, 0x45, 0xE5, 0xFE, 0x49, 0x3A, 0xFC, 
	0x29, 0xC4, 0x61, 0xFA, 0x67, 0xE9, 0xF0, 0xE7, 
	0x10, 0x55, 0xFA, 0x8B, 0x74, 0xF8, 0x4B, 0xF0, 
	0x0E, 0x1B, 0x02, 0x3A, 0x8C, 0x56, 0xB9, 0x7F, 
	0x95, 0x0E, 0x7F, 0x0D, 0x71, 0x10, 0xFD, 0xB7, 
	0xC8, 0xFA, 0xDF, 0xBA, 0xC3, 0x94, 0x50, 0x06, 
	0xD1, 0xFF, 0xE8, 0x96, 0x53, 0xAF, 0x6E, 0xFC, 
	0xFF, 0x4A, 0x87, 0xFF, 0x0D, 0x6E, 0xCB, 0x9D, 
	0x01, 0x1D, 0x06, 0xAA, 0xDC, 0xBF, 0x49, 0x87, 
	0xBF, 0x85, 0xE8, 0xED, 0xDF, 0xA5, 0xC3, 0xDF, 
	0x43, 0x1C, 0x44, 0xFF, 0x10, 0x6F, 0xFF, 0xA1, 
	0x3B, 0x4C, 0xBB, 0x8A, 0xB7, 0x26, 0x9B, 0xFE, 
	0x33, 0xF8, 0xAE, 0x4B, 0xDA, 0xDA, 0xF2, 0x7F, 
	0x76, 0x22, 0xB8, 0x5C, 0xE6, 0x3A, 0xAE, 0xB3, 
	0xCB, 0x6B, 0xD9, 0xFF, 0x85, 0x98, 0x4D, 0xFF, 
	0x25, 0xAE, 0xFC, 0x2B, 0x44, 0x57, 0x94, 0xCB, 
	0xEB, 0x8A, 0x72, 0x39, 0x1D, 0xA6, 0x87, 0x12, 
	0x38, 0x97, 0x2B, 0xE8, 0xAE, 0xEF, 0x0A, 0xD8, 
	0xF5, 0x20, 0x95, 0xDB, 0x49, 0x76, 0xDD, 0x49, 
	0x77, 0x98, 0x11, 0xCA, 0xAE, 0x3B, 0x07, 0xDF, 
	0xF5, 0x65, 0xC3, 0xAD, 0x8B, 0xE8, 0xD2, 0x25, 
	0x78, 0x87, 0xCB, 0xDC, 0xEC, 0x2A, 0x1D, 0xBA, 
	0x06, 0xEF, 0x70, 0x59, 0x66, 0xEF, 0x26, 0x1D, 
	0xBA, 0x05, 0xEF, 0x70, 0x59, 0xEA, 0xEA, 0x2E, 
	0xDE, 0x76, 0xD7, 0x1D, 0x66, 0x86, 0x92, 0x58, 
	0x7A, 0x04, 0xDF, 0xF5, 0xDD, 0x6D, 0x97, 0x2A, 
	0x61, 0x2E, 0x33, 0x11, 0x22, 0xC4, 0xA4, 0xB0, 
	0x10, 0x7D, 0x08, 0x17, 0x93, 0xC2, 0x75, 0x87, 
	0xD9, 0xA1, 0x04, 0x20, 0x22, 0x44, 0x6F, 0x7B, 
	0x8A, 0x2D, 0x3D, 0x83, 0x77, 0xB8, 0x6C, 0xF9, 
	0x1A, 0x29, 0x1D, 0x22, 0x43, 0x0C, 0x71, 0x2F, 
	0xE9, 0xD0, 0x2B, 0x78, 0x87, 0xCB, 0x4E, 0x36, 
	0x51, 0xD2, 0x21, 0x2A, 0x78, 0x87, 0xCB, 0x56, 
	0x80, 0xBD, 0xA5, 0x43, 0xEF, 0x10, 0x9D, 0xEE, 
	0x23, 0x7A, 0xF6, 0xF1, 0xEB, 0x10, 0xED, 0x6A, 
	0xEF, 0x56, 0x7C, 0xB4, 0xCB, 0xF7, 0x58, 0x43, 
	0x5F, 0x17, 0xF7, 0x1C, 0x6D, 0x3F, 0xEF, 0xF3, 
	0x2F, 0x2E, 0xDF, 0xCD, 0xC6, 0x7E, 0x52, 0xD9, 
	0xCF, 0xE5, 0xBB, 0xD9, 0x18, 0x23, 0x95, 0x31, 
	0x2E, 0xDF, 0xCD, 0xC6, 0x58, 0xA9, 0x8C, 0x75, 
	0xF9, 0x6E, 0x36, 0xDE, 0x22, 0x95, 0xB7, 0xB8, 
	0x7C, 0x37, 0x1B, 0xE3, 0xA4, 0x32, 0xCE, 0xE5, 
	0xBB, 0x3F, 0xD8, 0xDF, 0x25, 0x0F, 0xB0, 0x04, 
	0x56, 0xEA, 0xFB, 0x8A, 0x03, 0x64, 0xDB, 0x00, 
	0x97, 0xEF, 0x66, 0xA3, 0x53, 0xA9, 0x9B, 0xC4, 
	0xCB, 0xCE, 0xE2, 0xB5, 0x04, 0xFA, 0x03, 0x5F, 
	0x6F, 0xA5, 0x19, 0xD0, 0x09, 0xC1, 0x85, 0x2C, 
	0x6D, 0x9B, 0xE4, 0x12, 0x5D, 0x26, 0x00, 0x29, 
	0x12, 0x80, 0xC4, 0x10, 0x23, 0x36, 0x50, 0x3A, 
	0x0C, 0x0C, 0xDE, 0xE1, 0xB2, 0x53, 0x41, 0x92, 
	0x74, 0x48, 0x0A, 0xDE, 0xE1, 0xB2, 0x53, 0xEB, 
	0x20, 0xE9, 0x30, 0x28, 0x78, 0x87, 0xCB, 0xCE, 
	0x1D, 0xC9, 0x32, 0x26, 0x92, 0x75, 0x87, 0x39, 
	0xA1, 0xCC, 0xB1, 0x94, 0x10, 0x67, 0x40, 0xAA, 
	0xD8, 0x92, 0x1A, 0xA2, 0x3C, 0x69, 0x62, 0x4B, 
	0x9A, 0xEE, 0x30, 0x37, 0x94, 0x14, 0x94, 0x1E, 
	0x7C, 0xD7, 0xF7, 0xB4, 0x5D, 0xA3, 0x0C, 0x76, 
	0x99, 0x19, 0x30, 0x44, 0x8E, 0x30, 0x58, 0xF7, 
	0x9B, 0x17, 0x8A, 0xB7, 0x43, 0x42, 0xF4, 0x76, 
	0xA8, 0xEC, 0x7A, 0xA8, 0xEE, 0x90, 0x13, 0xCA, 
	0xAE, 0x33, 0x42, 0x4C, 0xFE, 0x99, 0x22, 0x64, 
	0x66, 0x88, 0xB6, 0x0C, 0x93, 0x0E, 0xC3, 0x82, 
	0x77, 0xB8, 0x6C, 0x8D, 0x92, 0x25, 0x1D, 0xB2, 
	0x42, 0x4C, 0xCD, 0xC3, 0xA5, 0xC3, 0xF0, 0x10, 
	0x73, 0xCF, 0x08, 0x91, 0x67, 0x84, 0xEE, 0xB0, 
	0xF4, 0x2A, 0xF2, 0x98, 0x25, 0xC7, 0xC8, 0xE0, 
	0xBB, 0xBE, 0xB7, 0x6D, 0xE2, 0x1C, 0x65, 0x9F, 
	0xB9, 0x1C, 0x6F, 0x9F, 0xB9, 0x9C, 0x2C, 0x96, 
	0x8D, 0x0A, 0xDE, 0xFD, 0xBE, 0x80, 0xEE, 0xF7, 
	0xAB, 0xDC, 0xD1, 0xD2, 0x61, 0x74, 0x88, 0xE1, 
	0x18, 0x23, 0x1D, 0xC6, 0x84, 0x38, 0xAE, 0xC7, 
	0x4A, 0x87, 0xB1, 0xC1, 0x3B, 0x5C, 0xB6, 0xA2, 
	0x1E, 0x27, 0x62, 0x8D, 0xD3, 0x1D, 0x96, 0x85, 
	0x32, 0x96, 0xC6, 0x87, 0x18, 0xB8, 0x09, 0x62, 
	0xCB, 0x84, 0x10, 0x4F, 0x4B, 0x13, 0xA5, 0xC3, 
	0xC4, 0x10, 0x23, 0x7D, 0xAB, 0x74, 0xB8, 0x35, 
	0x78, 0x87, 0x8D, 0x01, 0x1D, 0x52, 0x55, 0xEE, 
	0x24, 0xF1, 0x76, 0x92, 0xEE, 0xE0, 0x09, 0xC5, 
	0xDB, 0xC9, 0x21, 0x1A, 0x3F, 0x45, 0x6C, 0x99, 
	0x12, 0xE2, 0xCC, 0x99, 0x2A, 0x1D, 0xA6, 0x86, 
	0xB8, 0x2E, 0x98, 0x26, 0x1D, 0xA6, 0x05, 0xEF, 
	0xB0, 0x29, 0xA0, 0xC3, 0x0C, 0x95, 0x3B, 0x5D, 
	0xBC, 0x9D, 0xAE, 0x3B, 0xAC, 0x08, 0xC5, 0xDB, 
	0x19, 0x21, 0x0E, 0xCC, 0x99, 0x62, 0xCB, 0xCC, 
	0xE0, 0x1D, 0x1E, 0x08, 0xE8, 0xE0, 0x9C, 0xCA, 
	0x67, 0x49, 0x87, 0x59, 0xC1, 0x3B, 0x94, 0x05, 
	0x74, 0x70, 0x4E, 0xD0, 0xB3, 0xC5, 0xF8, 0xD9, 
	0xBA, 0xC3, 0xCA, 0x50, 0x8C, 0x9F, 0x13, 0xA2, 
	0x2E, 0x73, 0xC5, 0x96, 0xB9, 0x21, 0xC6, 0xD6, 
	0x2D, 0x1D, 0xDC, 0x21, 0x9E, 0xEA, 0xB2, 0xA5, 
	0x43, 0x76, 0x88, 0x7A, 0xCE, 0x13, 0x6F, 0xE7, 
	0xE9, 0x0E, 0xAB, 0x42, 0xF1, 0x36, 0x47, 0xB7, 
	0x4C, 0xF2, 0xB5, 0x2C, 0x6F, 0x7B, 0x4B, 0x36, 
	0xD7, 0x3E, 0x12, 0x3E, 0xDF, 0xE5, 0x5D, 0x60, 
	0xE5, 0xEA, 0x0E, 0xC9, 0xBE, 0x0E, 0x41, 0xEE, 
	0x04, 0xCF, 0xD7, 0x4D, 0x06, 0xB5, 0xDB, 0x64, 
	0x81, 0x6E, 0x92, 0x7A, 0xA5, 0x26, 0xDB, 0xD4, 
	0xBA, 0x85, 0xB9, 0x4A, 0x99, 0x15, 0x85, 0xCB, 
	0x3E, 0xAD, 0x3F, 0xD6, 0x90, 0x7E, 0x06, 0x7D, 
	0x9A, 0x21, 0xFD, 0xCC, 0x7E, 0xB6, 0x21, 0xFD, 
	0xD8, 0x7E, 0x8E, 0x21, 0xFD, 0xE4, 0x7E, 0xAE, 
	0x21, 0xFD, 0xF1, 0xF4, 0x7C, 0x43, 0xFA, 0xC3, 
	0xD3, 0x05, 0x86, 0xF4, 0x03, 0xDA, 0x0B, 0x0D, 
	0xE9, 0x07, 0x44, 0xF2, 0x0C, 0xE9, 0x67, 0x36, 
	0x16, 0x19, 0xD2, 0x8F, 0x66, 0x2C, 0x36, 0xA4, 
	0x9F, 0xB9, 0x58, 0x62, 0xC8, 0x7B, 0xB3, 0xDE, 
	0x65, 0x97, 0x90, 0xCB, 0x0D, 0x45, 0xD9, 0x1C, 
	0xD5, 0xD9, 0x3C, 0x8E, 0xAD, 0x63, 0xDC, 0xD9, 
	0x3C, 0x83, 0xAD, 0x6F, 0x4E, 0x74, 0x36, 0x0F, 
	0x5E, 0xEB, 0xCB, 0xB2, 0xCE, 0xE6, 0x69, 0x6B, 
	0x9D, 0xAB, 0x3B, 0x9B, 0x47, 0xAC, 0x75, 0x0A, 
	0xE9, 0x6C, 0x1F, 0xA1, 0x7E, 0xD0, 0x90, 0xFE, 
	0xAC, 0xE5, 0x21, 0x43, 0xFA, 0xB3, 0x94, 0x87, 
	0x0D, 0xE9, 0x8F, 0x4C, 0x1E, 0x31, 0xA4, 0x6F, 
	0xC5, 0x3F, 0x6A, 0x48, 0xDF, 0x71, 0x7F, 0xCC, 
	0x90, 0xBE, 0xB1, 0xFE, 0xB8, 0x21, 0xAD, 0x53, 
	0x85, 0x21, 0x1D, 0xA1, 0x4A, 0x43, 0x03, 0x95, 
	0x79, 0x97, 0xB5, 0xB3, 0x7D, 0xC8, 0x78, 0xBF, 
	0x21, 0x1D, 0x80, 0x03, 0x86, 0x74, 0xB4, 0x5E, 
	0x37, 0x94, 0xA2, 0xCC, 0x33, 0xFC, 0x9D, 0xEC, 
	0x63, 0xFC, 0x43, 0x5C, 0x8E, 0xCC, 0x5A, 0xDC, 
	0x6E, 0xC6, 0x35, 0x1D, 0x8E, 0xEE, 0x86, 0xF4, 
	0x43, 0x05, 0x3D, 0x0C, 0xE9, 0xA7, 0x05, 0x7A, 
	0x19, 0x1A, 0x1C, 0x10, 0x8E, 0x54, 0x43, 0x43, 
	0xEC, 0xC0, 0x76, 0x99, 0x47, 0x80, 0x75, 0xB2, 
	0x76, 0xD9, 0x47, 0x7C, 0xC7, 0x18, 0xCA, 0x0C, 
	0x08, 0xDB, 0x38, 0x43, 0xFA, 0x33, 0x95, 0x09, 
	0x86, 0xF4, 0x47, 0xD6, 0x13, 0x0D, 0xE9, 0x4F, 
	0x4F, 0x26, 0x19, 0xD2, 0x1F, 0x92, 0x4C, 0x36, 
	0xA4, 0x3F, 0xFD, 0x98, 0x6A, 0x68, 0x54, 0x40, 
	0xC8, 0x67, 0x18, 0x1A, 0x6D, 0x87, 0xB4, 0xCB, 
	0x3E, 0x7E, 0x3B, 0xCB, 0x90, 0xBE, 0xA1, 0x3C, 
	0xDB, 0x90, 0xBE, 0xD9, 0x3A, 0xC7, 0x90, 0xBE, 
	0x57, 0x39, 0xD7, 0x90, 0xBE, 0x53, 0xE8, 0x36, 
	0x34, 0x91, 0x81, 0xA3, 0xEF, 0xBC, 0xCD, 0x33, 
	0x34, 0x29, 0x60, 0x08, 0x2D, 0x35, 0xA4, 0x3F, 
	0x46, 0x5B, 0x66, 0x68, 0x4A, 0x90, 0x61, 0xA0, 
	0x6F, 0xA3, 0xAC, 0x30, 0xA4, 0x6F, 0x46, 0xAC, 
	0x34, 0xA4, 0xAF, 0xE5, 0x57, 0x19, 0xD2, 0x97, 
	0xDE, 0xF9, 0x46, 0xF0, 0x99, 0x0C, 0x17, 0xFD, 
	0xA1, 0xE0, 0x1A, 0x43, 0xFA, 0xBA, 0xF0, 0x4E, 
	0x43, 0x7A, 0xF5, 0x5A, 0x62, 0x48, 0xAF, 0x1D, 
	0xEF, 0x36, 0xA4, 0x3F, 0xE8, 0x2B, 0x35, 0xA4, 
	0x27, 0xFC, 0xBD, 0x86, 0xF4, 0xBA, 0xEF, 0x3E, 
	0x43, 0x39, 0x36, 0x13, 0x75, 0xB6, 0xCF, 0x85, 
	0x96, 0x1B, 0xD2, 0x17, 0x05, 0x4F, 0x18, 0xD2, 
	0x4F, 0xB4, 0x3F, 0x69, 0x48, 0x3F, 0xE8, 0xF9, 
	0x94, 0xA1, 0x3C, 0x65, 0xDE, 0x32, 0xEB, 0x6C, 
	0x9E, 0xE5, 0xD4, 0xEF, 0xAD, 0x75, 0xB6, 0xCF, 
	0xEF, 0x3E, 0x6B, 0x48, 0x3F, 0x65, 0xF8, 0x9C, 
	0x21, 0xBD, 0xC2, 0x79, 0xDE, 0x90, 0x3E, 0x7D, 
	0xBF, 0x60, 0x48, 0x9F, 0xDA, 0x5E, 0x34, 0xA4, 
	0x1F, 0xC1, 0x7C, 0xC9, 0x90, 0x3E, 0x01, 0xBC, 
	0x6C, 0x48, 0x67, 0xD3, 0x57, 0x0C, 0xE9, 0x4C, 
	0xF3, 0xAA, 0x21, 0xFD, 0x04, 0xE5, 0x7B, 0x0C, 
	0xE9, 0x57, 0x89, 0x37, 0x1B, 0xD2, 0x0F, 0x49, 
	0x6E, 0x31, 0xA4, 0xDF, 0x86, 0xDC, 0x6A, 0x68, 
	0xB5, 0xD2, 0x2F, 0x96, 0x6A, 0x2A, 0x52, 0xFA, 
	0x15, 0x20, 0x4D, 0x6B, 0x18, 0xC4, 0xFA, 0xFD, 
	0xD0, 0x43, 0x86, 0xF4, 0x93, 0x8E, 0x87, 0x0D, 
	0xE9, 0xD7, 0xCA, 0x8F, 0x28, 0xF9, 0x0A, 0x88, 
	0x2A, 0x43, 0xFA, 0x9B, 0x23, 0x5E, 0x33, 0xA4, 
	0x5F, 0xAC, 0x4F, 0x31, 0x03, 0x5B, 0xDB, 0x12, 
	0x67, 0x48, 0x3F, 0xC7, 0x97, 0xA4, 0x33, 0x89, 
	0x1E, 0x7E, 0x51, 0xA6, 0x6A, 0xB9, 0x1D, 0x9C, 
	0x5E, 0x9A, 0x00, 0xCD, 0x84, 0xE6, 0x40, 0xD9, 
	0xD0, 0x4A, 0x21, 0xBB, 0xBB, 0xCE, 0xEC, 0x6E, 
	0x19, 0xBB, 0x5B, 0xC6, 0xEE, 0x96, 0xB1, 0xBB, 
	0x65, 0xEC, 0x6E, 0x19, 0xBB, 0x5B, 0xC6, 0xEE, 
	0xF4, 0xA3, 0xB1, 0xDD, 0xF5, 0xEE, 0xBA, 0x30, 
	0x20, 0x37, 0xC8, 0x11, 0xBA, 0x72, 0x04, 0x0F, 
	0x47, 0xF0, 0x70, 0x04, 0x0F, 0x47, 0xF0, 0x70, 
	0x04, 0x0F, 0x47, 0xF0, 0x70, 0x04, 0xFD, 0x9C, 
	0xED, 0x1C, 0xBD, 0xBB, 0x6E, 0xCC, 0xFA, 0xFE, 
	0x76, 0x12, 0x7B, 0x69, 0x2C, 0x34, 0x0D, 0xCA, 
	0x86, 0x72, 0xA0, 0x5C, 0x68, 0x3E, 0xB4, 0x00, 
	0x5A, 0x08, 0xE5, 0x41, 0x8B, 0xA0, 0xC5, 0xD0, 
	0x12, 0xC8, 0x03, 0x2D, 0x17, 0xD2, 0xD7, 0xBF, 
	0x0B, 0x4D, 0xB2, 0xF6, 0xE5, 0x18, 0x3B, 0x6F, 
	0xEE, 0x14, 0x2F, 0x7A, 0xE0, 0x45, 0x0C, 0x5E, 
	0xC4, 0xE0, 0x45, 0x0C, 0x5E, 0xC4, 0xE0, 0x45, 
	0x0C, 0x5E, 0xC4, 0xE0, 0x45, 0x0C, 0x5E, 0xC4, 
	0xE0, 0x45, 0x0C, 0x5E, 0xC4, 0xE0, 0x45, 0x0C, 
	0x5E, 0xC4, 0xE0, 0x45, 0x0C, 0x5E, 0xC4, 0xE0, 
	0x45, 0x0C, 0x5E, 0xC4, 0x88, 0x17, 0x61, 0x41, 
	0xBC, 0x28, 0x11, 0x2F, 0xC2, 0xF1, 0x22, 0x01, 
	0x2F, 0x12, 0xF0, 0x22, 0x01, 0x2F, 0x12, 0xF0, 
	0x22, 0x01, 0x2F, 0x12, 0xF0, 0x22, 0x01, 0x2F, 
	0x12, 0xF0, 0x22, 0x01, 0x2F, 0x12, 0xF0, 0x22, 
	0x01, 0x2F, 0x12, 0xF0, 0x22, 0x01, 0x2F, 0x12, 
	0xF0, 0x22, 0x01, 0x2F, 0x12, 0xC4, 0x8B, 0x88, 
	0x20, 0x5E, 0xDC, 0x25, 0x5E, 0xF4, 0xC4, 0x8B, 
	0x01, 0x78, 0x31, 0x00, 0x2F, 0x06, 0xE0, 0xC5, 
	0x00, 0xBC, 0x18, 0x80, 0x17, 0x03, 0xF0, 0x62, 
	0x00, 0x5E, 0x0C, 0xC0, 0x8B, 0x01, 0x78, 0x31, 
	0x00, 0x2F, 0x06, 0xE0, 0xC5, 0x00, 0xBC, 0x18, 
	0x80, 0x17, 0x03, 0xF0, 0x62, 0x00, 0x5E, 0x0C, 
	0x10, 0x43, 0x23, 0x31, 0x34, 0x1E, 0x43, 0xE3, 
	0x31, 0x34, 0x1E, 0x43, 0xE3, 0x31, 0x34, 0x1E, 
	0x43, 0xE3, 0x31, 0x34, 0x1E, 0x43, 0xE3, 0x31, 
	0x34, 0x1E, 0x43, 0xE3, 0x31, 0x34, 0x1E, 0x43, 
	0xE3, 0x31, 0x34, 0x1E, 0x43, 0xE3, 0x31, 0x34, 
	0x1E, 0x43, 0xE3, 0x65, 0xCA, 0xF7, 0x62, 0xCA, 
	0x2F, 0x65, 0xCA, 0x2F, 0x65, 0xCA, 0x2F, 0x65, 
	0xCA, 0x2F, 0x65, 0xCA, 0x2F, 0xC5, 0xE4, 0xA5, 
	0x4C, 0xF9, 0xA5, 0x92, 0x54, 0xF4, 0x32, 0x25, 
	0xDA, 0x44, 0xEF, 0x6E, 0x91, 0xA2, 0x37, 0x52, 
	0xF4, 0x46, 0x8A, 0xDE, 0x48, 0xD1, 0x1B, 0x29, 
	0x7A, 0xB3, 0xDF, 0xDE, 0x48, 0xD1, 0x1B, 0x29, 
	0x7A, 0x23, 0x45, 0x6F, 0xA4, 0xE8, 0x8D, 0x14, 
	0xBD, 0x91, 0xA2, 0x37, 0x52, 0xF4, 0x46, 0x8A, 
	0xDE, 0x48, 0xD1, 0x1B, 0x29, 0x7A, 0x23, 0x45, 
	0x6F, 0x59, 0xF8, 0xF5, 0x51, 0x1D, 0x6F, 0xE1, 
	0xA7, 0xBF, 0xC4, 0xA7, 0xE3, 0x2C, 0xFC, 0xCC, 
	0x10, 0x89, 0xB6, 0x55, 0x5D, 0xF4, 0x77, 0x31, 
	0x79, 0x87, 0x48, 0x5F, 0x5A, 0x75, 0x62, 0x88, 
	0x74, 0x62, 0x88, 0x74, 0x62, 0x88, 0x74, 0x62, 
	0x88, 0x74, 0x62, 0x88, 0x74, 0x62, 0x88, 0x74, 
	0x62, 0x88, 0x74, 0x62, 0x88, 0x74, 0x62, 0x88, 
	0x74, 0x62, 0x88, 0x74, 0x62, 0x88, 0x74, 0x62, 
	0x88, 0x74, 0x62, 0x88, 0x74, 0x62, 0x88, 0x74, 
	0x62, 0x88, 0x74, 0x12, 0xDB, 0xFB, 0x31, 0xBC, 
	0xEF, 0x11, 0xDB, 0x63, 0xB0, 0x3D, 0x12, 0xDB, 
	0x23, 0xB1, 0x3D, 0x12, 0xDB, 0x23, 0xB1, 0x3D, 
	0x12, 0xDB, 0x23, 0xB1, 0x3D, 0x12, 0xDB, 0x23, 
	0xB1, 0x3D, 0x12, 0xDB, 0x23, 0xB1, 0x3D, 0x12, 
	0xDB, 0x23, 0xB1, 0x3D, 0x12, 0xDB, 0x23, 0xB1, 
	0x3D, 0x12, 0xDB, 0x23, 0xC5, 0xD0, 0x58, 0x0C, 
	0xED, 0x89, 0xA1, 0x3D, 0x31, 0xB4, 0x27, 0x86, 
	0xF6, 0xC4, 0xD0, 0x9E, 0x18, 0xDA, 0x13, 0x43, 
	0x7B, 0x62, 0x68, 0x4F, 0x0C, 0xED, 0x89, 0xA1, 
	0x3D, 0x31, 0xB4, 0x27, 0x86, 0xF6, 0xC4, 0xD0, 
	0x9E, 0x18, 0xDA, 0x13, 0x43, 0x7B, 0x62, 0x68, 
	0x4F, 0x31, 0xF4, 0x16, 0x0C, 0xED, 0x81, 0xA1, 
	0x3D, 0x30, 0xB4, 0x07, 0x86, 0xF6, 0xC0, 0xD0, 
	0x1E, 0x18, 0xDA, 0x03, 0x43, 0x7B, 0x60, 0x68, 
	0x0F, 0x0C, 0xED, 0x81, 0xA1, 0x3D, 0x30, 0xB4, 
	0x07, 0x86, 0xF6, 0xC0, 0xD0, 0x1E, 0x18, 0xDA, 
	0x03, 0x43, 0x7B, 0x60, 0x68, 0x0F, 0x31, 0x34, 
	0x0E, 0x43, 0xBB, 0x62, 0x68, 0x57, 0x0C, 0xED, 
	0x8A, 0xA1, 0x5D, 0x31, 0xB4, 0x2B, 0x86, 0x76, 
	0xC5, 0xD0, 0xAE, 0x18, 0xDA, 0x15, 0x43, 0xBB, 
	0x62, 0x68, 0x57, 0x0C, 0xED, 0x8A, 0xA1, 0x5D, 
	0x31, 0xB4, 0x2B, 0x86, 0x76, 0xC5, 0xD0, 0xAE, 
	0x18, 0xDA, 0x55, 0x0C, 0xED, 0x8F, 0xA1, 0xDD, 
	0x30, 0xB4, 0x1B, 0x86, 0x76, 0xC3, 0xD0, 0x6E, 
	0x18, 0xDA, 0x0D, 0x43, 0xBB, 0x61, 0x68, 0x37, 
	0x0C, 0xED, 0x86, 0xA1, 0xDD, 0x30, 0xB4, 0x1B, 
	0x86, 0x76, 0xC3, 0xD0, 0x6E, 0x18, 0xDA, 0x0D, 
	0x43, 0xBB, 0x61, 0x68, 0x37, 0x0C, 0xED, 0x26, 
	0x86, 0x0E, 0xC0, 0xD0, 0x30, 0x0C, 0x0D, 0xC3, 
	0xD0, 0x30, 0x0C, 0x0D, 0xC3, 0xD0, 0x30, 0x0C, 
	0x0D, 0xC3, 0xD0, 0x30, 0x0C, 0x0D, 0xC3, 0xD0, 
	0x30, 0x0C, 0x0D, 0xC3, 0xD0, 0x30, 0x0C, 0x0D, 
	0xC3, 0xD0, 0x30, 0x0C, 0x0D, 0xC3, 0xD0, 0x30, 
	0x0C, 0x0D, 0x13, 0x43, 0xE3, 0x31, 0xB4, 0x3B, 
	0x86, 0x76, 0xC7, 0xD0, 0xEE, 0x18, 0xDA, 0x1D, 
	0x43, 0xBB, 0x63, 0x68, 0x77, 0x0C, 0xED, 0x8E, 
	0xA1, 0xDD, 0x31, 0xB4, 0x3B, 0x86, 0x76, 0xC7, 
	0xD0, 0xEE, 0x18, 0xDA, 0x1D, 0x43, 0xBB, 0x63, 
	0x68, 0x77, 0x0C, 0xED, 0x8E, 0xA1, 0xDD, 0xC5, 
	0xD0, 0x04, 0x0C, 0xED, 0x82, 0xA1, 0x5D, 0x30, 
	0xB4, 0x0B, 0x86, 0x76, 0xC1, 0xD0, 0x2E, 0x18, 
	0xDA, 0x05, 0x43, 0xBB, 0x60, 0x68, 0x17, 0x0C, 
	0xED, 0x82, 0xA1, 0x5D, 0x30, 0xB4, 0x0B, 0x86, 
	0x76, 0xC1, 0xD0, 0x2E, 0x18, 0xDA, 0x05, 0x43, 
	0xBB, 0x60, 0x68, 0x17, 0x31, 0x34, 0x11, 0x43, 
	0xC3, 0x31, 0x34, 0x1C, 0x43, 0xC3, 0x31, 0x34, 
	0x1C, 0x43, 0xC3, 0x31, 0x34, 0x1C, 0x43, 0xC3, 
	0x31, 0x34, 0x1C, 0x43, 0xC3, 0x31, 0x34, 0x1C, 
	0x43, 0xC3, 0x31, 0x34, 0x1C, 0x43, 0xC3, 0x31, 
	0x34, 0x1C, 0x43, 0xC3, 0x31, 0x34, 0x5C, 0x0C, 
	0x1D, 0x88, 0xA1, 0x11, 0x18, 0x1A, 0x81, 0xA1, 
	0x11, 0x18, 0x1A, 0x81, 0xA1, 0x11, 0x18, 0x1A, 
	0x81, 0xA1, 0x11, 0x18, 0x1A, 0x81, 0xA1, 0x11, 
	0x18, 0x1A, 0x81, 0xA1, 0x11, 0x18, 0x1A, 0x81, 
	0xA1, 0x11, 0x18, 0x1A, 0x81, 0xA1, 0x11, 0x18, 
	0x1A, 0x21, 0x27, 0xAB, 0x24, 0x25, 0x2B, 0x96, 
	0x7B, 0xC5, 0xF6, 0x41, 0xD8, 0xDE, 0x19, 0xDB, 
	0x3B, 0x63, 0x7B, 0x67, 0x6C, 0xEF, 0x8C, 0xED, 
	0x9D, 0xB1, 0xBD, 0x33, 0xB6, 0x77, 0xC6, 0xF6, 
	0xCE, 0xD8, 0xDE, 0x19, 0xDB, 0x3B, 0x63, 0x7B, 
	0x67, 0x6C, 0xEF, 0x8C, 0xED, 0x9D, 0xB1, 0xBD, 
	0x33, 0xB6, 0x77, 0xC6, 0xF6, 0xCE, 0x62, 0x68, 
	0x32, 0x86, 0xF6, 0xC2, 0xD0, 0x5E, 0x18, 0xDA, 
	0x0B, 0x43, 0x7B, 0x61, 0x68, 0x2F, 0x0C, 0xED, 
	0x85, 0xA1, 0xBD, 0x30, 0xB4, 0x17, 0x86, 0xF6, 
	0xC2, 0xD0, 0x5E, 0x18, 0xDA, 0x0B, 0x43, 0x7B, 
	0x61, 0x68, 0x2F, 0x0C, 0xED, 0x85, 0xA1, 0xBD, 
	0x30, 0xB4, 0x97, 0x18, 0xEA, 0x5B, 0xE0, 0x44, 
	0x61, 0x68, 0x14, 0x86, 0x46, 0x61, 0x68, 0x14, 
	0x86, 0x46, 0x61, 0x68, 0x14, 0x86, 0x46, 0x61, 
	0x68, 0x14, 0x86, 0x46, 0x61, 0x68, 0x14, 0x86, 
	0x46, 0x61, 0x68, 0x14, 0x86, 0x46, 0x61, 0x68, 
	0x14, 0x86, 0x46, 0x61, 0xA8, 0xFE, 0x46, 0x87, 
	0xDB, 0xB5, 0xA1, 0xFA, 0x2E, 0x5B, 0xA8, 0xF7, 
	0xDB, 0xDA, 0xBF, 0xCB, 0xE6, 0xBB, 0x7B, 0xE6, 
	0xBB, 0x67, 0xE6, 0xBB, 0x17, 0x16, 0xEC, 0x6E, 
	0x97, 0xEF, 0x7E, 0x96, 0xEF, 0x2E, 0x96, 0xBD, 
	0xD7, 0x74, 0x9F, 0xF2, 0xBF, 0x0F, 0xD4, 0xFE, 
	0x5D, 0x9D, 0xB6, 0xF7, 0x72, 0xF4, 0x17, 0x16, 
	0xFA, 0xEE, 0xE0, 0x70, 0x67, 0x26, 0xAF, 0xAF, 
	0x76, 0x37, 0x2D, 0xC0, 0x00, 0xDF, 0xC1, 0xEC, 
	0x21, 0x36, 0xFA, 0x77, 0xB5, 0xFA, 0xA4, 0xDF, 
	0x70, 0xFA, 0x6C, 0xBA, 0x82, 0x3E, 0xEF, 0xD3, 
	0xEE, 0x0E, 0x7E, 0xCB, 0xDC, 0xF5, 0x5D, 0x28, 
	0x05, 0x73, 0xDC, 0x77, 0xF1, 0xD4, 0xBE, 0x04, 
	0xBE, 0x0B, 0xAA, 0xF6, 0x6F, 0x7E, 0xDA, 0x1B, 
	0x98, 0x0F, 0x04, 0x08, 0xD4, 0x11, 0x6F, 0x42, 
	0xB6, 0xBD, 0xF5, 0x58, 0x16, 0x10, 0x22, 0x33, 
	0x22, 0x87, 0xDC, 0x70, 0x23, 0xB2, 0xFC, 0x0A, 
	0x23, 0xD2, 0xB8, 0x3B, 0xF4, 0x86, 0x73, 0xF7, 
	0xC1, 0xF6, 0x12, 0x54, 0x46, 0xBB, 0x09, 0xEA, 
	0xA1, 0x80, 0x04, 0x75, 0x8B, 0xEE, 0xE0, 0xFD, 
	0x58, 0xA3, 0x93, 0x1D, 0xB7, 0xD3, 0xA0, 0x6C, 
	0x28, 0x07, 0xF2, 0x08, 0xD9, 0x95, 0x80, 0xFE, 
	0xF4, 0x23, 0xCE, 0x1C, 0xEB, 0x61, 0xD9, 0x5B, 
	0x16, 0x7B, 0x5B, 0xCC, 0xDE, 0x16, 0xB3, 0xB7, 
	0xC5, 0xEC, 0x6D, 0x31, 0x7B, 0x5B, 0x2C, 0xF7, 
	0x49, 0x86, 0xDB, 0x40, 0x75, 0xB2, 0x5F, 0x21, 
	0x15, 0x06, 0x85, 0x43, 0x11, 0x50, 0x4F, 0x28, 
	0x12, 0x8A, 0x82, 0x7A, 0x43, 0x7D, 0xA0, 0x68, 
	0xA8, 0x1F, 0x14, 0x03, 0xC5, 0x42, 0x71, 0x50, 
	0x7F, 0x28, 0x1E, 0x4A, 0x80, 0x12, 0xA1, 0x24, 
	0x68, 0x10, 0x94, 0x0C, 0xA5, 0x40, 0x69, 0xD0, 
	0x60, 0x68, 0x08, 0x34, 0x14, 0xCA, 0x80, 0x32, 
	0xA1, 0x61, 0x50, 0x16, 0x34, 0x1C, 0x1A, 0x01, 
	0x8D, 0x84, 0x46, 0x41, 0xA3, 0x85, 0x6C, 0xD0, 
	0x46, 0x10, 0xB4, 0x47, 0x44, 0xF9, 0x91, 0x28, 
	0x7F, 0x09, 0xE5, 0x2F, 0xA1, 0xFC, 0x25, 0x94, 
	0xBF, 0x84, 0xF2, 0x97, 0x50, 0xFE, 0x12, 0xCA, 
	0x5F, 0x42, 0xF9, 0x4B, 0x28, 0x7F, 0x09, 0xE5, 
	0x2F, 0xA1, 0xFC, 0x25, 0x94, 0xBF, 0x84, 0xF2, 
	0x97, 0x50, 0xFE, 0x12, 0xCA, 0x5F, 0x42, 0xF9, 
	0x4B, 0x28, 0x7F, 0x09, 0xE5, 0x2F, 0xA1, 0xFC, 
	0x25, 0x94, 0xBF, 0x84, 0xF2, 0x97, 0x50, 0xFE, 
	0x12, 0xCA, 0x5F, 0x42, 0xF9, 0x4B, 0x28, 0x7F, 
	0x09, 0xE5, 0x2F, 0xA1, 0xFC, 0x25, 0x94, 0xBF, 
	0x84, 0xF2, 0x97, 0x50, 0xFE, 0x12, 0xCA, 0x5F, 
	0x42, 0xF9, 0x4B, 0x28, 0x7F, 0x09, 0xE5, 0x2F, 
	0xA1, 0xBC, 0x43, 0x79, 0x3F, 0xD6, 0x32, 0x8F, 
	0xBA, 0x86, 0x4C, 0x14, 0xEA, 0x47, 0x93, 0xBE, 
	0x8F, 0x21, 0x43, 0xFD, 0xF0, 0xD1, 0xF7, 0x91, 
	0xA3, 0x2F, 0x77, 0xCD, 0x36, 0xA4, 0x3F, 0x68, 
	0x0C, 0xF5, 0xE3, 0xC5, 0x60, 0x1F, 0x2A, 0x06, 
	0xFB, 0x28, 0xF1, 0xAD, 0xFC, 0x00, 0x51, 0x7F, 
	0x6F, 0x83, 0xEF, 0x63, 0x43, 0xFB, 0x61, 0xA1, 
	0xFE, 0xBE, 0x86, 0x8E, 0x78, 0x9E, 0x0E, 0xF6, 
	0x61, 0xA1, 0xEF, 0x43, 0x40, 0xDF, 0x07, 0x7E, 
	0x66, 0xCA, 0x8E, 0x66, 0xCA, 0x3E, 0x2E, 0x79, 
	0x56, 0x7F, 0x50, 0x6C, 0xF3, 0xAC, 0xF6, 0x71, 
	0x1A, 0x94, 0x0D, 0xE5, 0x40, 0x1E, 0x21, 0x3B, 
	0xDB, 0xC7, 0x32, 0xDB, 0x5B, 0x98, 0xED, 0x2D, 
	0xCC, 0xF6, 0x16, 0x66, 0x7B, 0x0B, 0xB3, 0xBD, 
	0x85, 0xD9, 0xDE, 0xC2, 0x6C, 0x6F, 0x61, 0xB6, 
	0xB7, 0x30, 0xDB, 0x5B, 0x98, 0xED, 0x2D, 0xCC, 
	0xF6, 0x16, 0x66, 0x7B, 0x0B, 0xB3, 0xBD, 0x05, 
	0x17, 0x5B, 0x98, 0xED, 0x2D, 0xCC, 0xF6, 0x16, 
	0x66, 0x7B, 0x0B, 0xB3, 0xBD, 0x85, 0xD9, 0xDE, 
	0xC2, 0x6C, 0x6F, 0x61, 0xB6, 0xB7, 0x30, 0xDB, 
	0x5B, 0x98, 0xED, 0x2D, 0xCC, 0xF6, 0x16, 0x66, 
	0x7B, 0x0B, 0xB3, 0xBD, 0x85, 0xD9, 0xDE, 0xC2, 
	0x6C, 0x6F, 0x61, 0xB6, 0xB7, 0x30, 0xDB, 0x5B, 
	0x98, 0xED, 0x2D, 0xCC, 0xF6, 0x16, 0x66, 0x7B, 
	0x0B, 0xB3, 0xBD, 0x85, 0xD9, 0xDE, 0x22, 0x41, 
	0x1B, 0xC7, 0x7C, 0xAE, 0x90, 0xA0, 0x8D, 0x27, 
	0x68, 0x0B, 0x09, 0xDA, 0x42, 0x82, 0xB6, 0x90, 
	0xA0, 0x2D, 0x24, 0x68, 0x0B, 0xE5, 0xE3, 0xAB, 
	0x09, 0xEA, 0xF2, 0xD3, 0x7A, 0xA5, 0x44, 0x74, 
	0x22, 0x11, 0xBD, 0x48, 0x44, 0x2F, 0x12, 0xD1, 
	0x8B, 0x44, 0xF4, 0x22, 0x11, 0xBD, 0x48, 0x44, 
	0x2F, 0x12, 0xD1, 0x8B, 0x44, 0xF4, 0x22, 0x11, 
	0xBD, 0x48, 0x44, 0x2F, 0x12, 0xD1, 0x8B, 0x44, 
	0xF4, 0x22, 0x11, 0xBD, 0x48, 0x44, 0x2F, 0x12, 
	0xD1, 0x8B, 0x44, 0xF4, 0x22, 0x11, 0xBD, 0x48, 
	0x44, 0x2F, 0x12, 0xD1, 0x8B, 0x44, 0xF4, 0x22, 
	0x11, 0xBD, 0x48, 0x44, 0x2F, 0x12, 0xD1, 0x8B, 
	0x44, 0xF4, 0x22, 0x11, 0xBD, 0x48, 0x44, 0x2F, 
	0x12, 0xD1, 0x8B, 0x44, 0xF4, 0x22, 0x11, 0xBD, 
	0x48, 0x44, 0x2F, 0x12, 0xD1, 0x8B, 0x44, 0xF4, 
	0x22, 0x11, 0xBD, 0x48, 0x44, 0x2F, 0x12, 0x51, 
	0x87, 0xF2, 0x3A, 0xEB, 0x47, 0x4B, 0xB4, 0xF2, 
	0xF6, 0x9A, 0xBC, 0x0F, 0x82, 0x6B, 0xEA, 0x0E, 
	0xF5, 0x80, 0xC2, 0xA0, 0x70, 0x28, 0x02, 0xEA, 
	0x09, 0x45, 0x42, 0xBD, 0xA0, 0x28, 0xA8, 0x37, 
	0xD4, 0x07, 0x8A, 0x86, 0xFA, 0x42, 0xFD, 0xA0, 
	0x18, 0x28, 0x16, 0xBA, 0x05, 0x8A, 0x83, 0xFA, 
	0x43, 0x03, 0xA0, 0x78, 0x28, 0x01, 0x4A, 0x84, 
	0x06, 0x42, 0x49, 0xD0, 0x20, 0x28, 0x19, 0x4A, 
	0x81, 0x52, 0xA1, 0x34, 0x28, 0x1D, 0x1A, 0x0C, 
	0x0D, 0x81, 0x86, 0x42, 0x19, 0x50, 0x26, 0x34, 
	0x0C, 0xCA, 0x82, 0x86, 0x43, 0x23, 0xA0, 0x91, 
	0xD0, 0x28, 0x68, 0x34, 0x34, 0x16, 0x9A, 0x08, 
	0x4D, 0x86, 0xA6, 0x41, 0xB3, 0x20, 0x37, 0x94, 
	0x0D, 0xE5, 0x40, 0xB9, 0xD0, 0x7C, 0x68, 0x01, 
	0xB4, 0x10, 0xCA, 0x83, 0x16, 0x41, 0x8B, 0xA1, 
	0x25, 0xD0, 0x32, 0xC8, 0x03, 0x2D, 0x17, 0xB2, 
	0xA9, 0x65, 0x12, 0xA9, 0xE5, 0x09, 0xA7, 0xEA, 
	0xA0, 0xAE, 0x9A, 0xAC, 0xAE, 0xAF, 0xAB, 0x9C, 
	0xDB, 0x4D, 0x86, 0xD2, 0xDF, 0x34, 0x6D, 0xCF, 
	0xEC, 0x4F, 0xA9, 0x1B, 0xE7, 0xCA, 0xBA, 0xED, 
	0x79, 0xFA, 0x5E, 0x89, 0xCB, 0x14, 0x64, 0x7E, 
	0x5A, 0x52, 0xF3, 0x54, 0x32, 0x45, 0x2B, 0x59, 
	0xA1, 0x95, 0xAC, 0xD0, 0x4A, 0x56, 0x68, 0x25, 
	0x2B, 0xB4, 0x92, 0x15, 0x5A, 0xC9, 0x05, 0xAD, 
	0xE4, 0x82, 0x56, 0x72, 0x41, 0x2B, 0xB9, 0xA0, 
	0x95, 0x0C, 0xD0, 0x4A, 0x06, 0x68, 0x25, 0x03, 
	0xB4, 0x62, 0x67, 0x2B, 0xF3, 0xBE, 0x95, 0xD9, 
	0xDE, 0xCA, 0x6C, 0x6F, 0x65, 0xB6, 0xB7, 0x32, 
	0xC7, 0x5B, 0x99, 0xE3, 0xAD, 0xCC, 0xF1, 0x56, 
	0xE6, 0x78, 0x2B, 0x33, 0xBB, 0x95, 0xF9, 0xDC, 
	0xCA, 0x7C, 0x6E, 0x65, 0x3E, 0xB7, 0x32, 0x9F, 
	0x5B, 0x99, 0xCF, 0xAD, 0xCC, 0xE7, 0x56, 0xE6, 
	0x73, 0x2B, 0xF3, 0xB9, 0x95, 0xF9, 0xDC, 0xCA, 
	0x7C, 0x6E, 0x65, 0x3E, 0xB7, 0x32, 0x9F, 0x5B, 
	0x45, 0xF9, 0x69, 0x28, 0xFF, 0x8C, 0x9C, 0x6C, 
	0xA7, 0x33, 0xD7, 0x17, 0x31, 0xAF, 0x17, 0x31, 
	0x87, 0x17, 0x31, 0x87, 0x17, 0x31, 0xD3, 0x16, 
	0xC9, 0xDE, 0x66, 0xB0, 0xB7, 0x67, 0xA5, 0x6A, 
	0xA6, 0x92, 0x25, 0xD8, 0x73, 0x4E, 0x55, 0x95, 
	0xAE, 0x9A, 0x45, 0x68, 0xD7, 0x29, 0x39, 0x09, 
	0xAC, 0x53, 0x72, 0x12, 0x58, 0xA7, 0x24, 0xA5, 
	0xAF, 0x23, 0x00, 0xEB, 0x48, 0xA3, 0xEB, 0x10, 
	0x71, 0x1D, 0x89, 0x72, 0x1D, 0x72, 0xAE, 0x23, 
	0x51, 0x6A, 0x1A, 0x03, 0x8D, 0x85, 0xC6, 0x41, 
	0xE3, 0xA1, 0x09, 0xD0, 0x44, 0x68, 0x12, 0x34, 
	0x19, 0x9A, 0x02, 0x4D, 0x85, 0xA6, 0x41, 0xD3, 
	0xA1, 0x19, 0xD0, 0x4C, 0x68, 0x16, 0x34, 0x1B, 
	0x9A, 0x03, 0xCD, 0x85, 0xDC, 0x50, 0x36, 0x34, 
	0x0F, 0xCA, 0x81, 0x96, 0x42, 0xCB, 0x20, 0x0F, 
	0xB4, 0x1C, 0x5A, 0x01, 0xAD, 0x84, 0x56, 0x09, 
	0xD9, 0x70, 0xCC, 0x26, 0x1C, 0x25, 0x84, 0xA3, 
	0x84, 0x70, 0x94, 0x10, 0x8E, 0x12, 0xC2, 0x51, 
	0x42, 0x38, 0x4A, 0x08, 0x47, 0x09, 0xE1, 0x28, 
	0x21, 0x1C, 0x25, 0x84, 0xA3, 0x84, 0x70, 0x94, 
	0x10, 0x8E, 0x12, 0xC2, 0x51, 0x42, 0x38, 0x4A, 
	0x08, 0x47, 0x09, 0xE1, 0x28, 0x21, 0x1C, 0x25, 
	0x84, 0xA3, 0x84, 0x70, 0x94, 0x10, 0x8E, 0x12, 
	0xC2, 0x51, 0x42, 0x38, 0x4A, 0x08, 0x47, 0x09, 
	0xE1, 0x28, 0x21, 0x1C, 0x25, 0x84, 0xA3, 0x84, 
	0x70, 0x94, 0x10, 0x8E, 0x12, 0xC2, 0x51, 0x42, 
	0x38, 0x4A, 0x08, 0x47, 0x09, 0xE1, 0x28, 0x21, 
	0x1C, 0x25, 0x84, 0xA3, 0x84, 0x70, 0x94, 0x10, 
	0x8E, 0x12, 0xC2, 0x51, 0x42, 0x38, 0x4A, 0x08, 
	0x87, 0x7E, 0x30, 0x2C, 0x4A, 0x87, 0x63, 0x8E, 
	0x92, 0x47, 0x1A, 0x9E, 0x27, 0x8D, 0x3D, 0x89, 
	0xF4, 0x4F, 0xCA, 0xBA, 0x76, 0x2E, 0x1B, 0xEF, 
	0x63, 0xE3, 0x7D, 0x12, 0x52, 0x37, 0x21, 0x2D, 
	0x26, 0xA4, 0xC5, 0x84, 0xB4, 0x98, 0x90, 0x16, 
	0xD3, 0xB5, 0x98, 0x90, 0xFA, 0x9E, 0xA0, 0x2C, 
	0x26, 0xA4, 0xC5, 0x84, 0xB4, 0x98, 0x90, 0x16, 
	0x13, 0xD2, 0x62, 0x42, 0x5A, 0x4C, 0x48, 0x8B, 
	0x09, 0x69, 0x31, 0x21, 0x2D, 0x26, 0xA4, 0xC5, 
	0x84, 0xB4, 0x98, 0x90, 0x16, 0x13, 0xD2, 0x62, 
	0x42, 0x5A, 0x4C, 0x48, 0x8B, 0x09, 0x69, 0x31, 
	0x21, 0x2D, 0x26, 0xA4, 0xC5, 0x84, 0xB4, 0x98, 
	0x90, 0x16, 0x13, 0xD2, 0x62, 0x42, 0x5A, 0x4C, 
	0x48, 0x8B, 0x09, 0x69, 0x31, 0x21, 0x2D, 0x26, 
	0xA4, 0xC5, 0x84, 0xB4, 0x98, 0x90, 0x16, 0x13, 
	0xD2, 0x62, 0x42, 0x5A, 0x4C, 0x48, 0x8B, 0x09, 
	0x69, 0x31, 0x21, 0xD5, 0x5F, 0xA1, 0x19, 0xAF, 
	0xD7, 0xBF, 0xD9, 0x4A, 0xD6, 0x18, 0x2F, 0xA8, 
	0xF6, 0xD6, 0x18, 0xFA, 0x8B, 0xF9, 0x62, 0x0D, 
	0xBD, 0x44, 0xD6, 0x7C, 0x59, 0xBD, 0x33, 0xEB, 
	0x8E, 0xDB, 0xCC, 0xB9, 0x59, 0x7F, 0x0B, 0xE0, 
	0x6A, 0x43, 0xFA, 0x1B, 0xF9, 0xEC, 0x0A, 0x44, 
	0x7F, 0x17, 0xE0, 0x8D, 0xB7, 0x02, 0xB1, 0x2B, 
	0x8A, 0x8F, 0x28, 0x59, 0x51, 0x68, 0x8A, 0x80, 
	0x7A, 0x42, 0x91, 0x50, 0x6F, 0xA8, 0x0F, 0x14, 
	0x0D, 0xF5, 0x85, 0xFA, 0x41, 0x31, 0x50, 0x7F, 
	0x68, 0x00, 0x94, 0x00, 0x25, 0x42, 0x49, 0xD0, 
	0x20, 0x28, 0x19, 0x1A, 0x0C, 0x0D, 0x81, 0x86, 
	0x42, 0x19, 0x50, 0x26, 0x34, 0x0C, 0xCA, 0x82, 
	0x86, 0x43, 0x23, 0xA0, 0x91, 0xD0, 0x28, 0x68, 
	0xB4, 0x90, 0x5D, 0x28, 0xCF, 0x23, 0xA7, 0x14, 
	0x90, 0x53, 0x0A, 0xC8, 0x29, 0x05, 0xE4, 0x94, 
	0x02, 0x72, 0x4A, 0x01, 0x39, 0xA5, 0x80, 0x9C, 
	0x52, 0x40, 0x4E, 0x29, 0x20, 0xA7, 0x14, 0x90, 
	0x53, 0x0A, 0xC8, 0x29, 0x05, 0xE4, 0x94, 0x02, 
	0x72, 0x4A, 0x01, 0x39, 0xA5, 0x80, 0x9C, 0x52, 
	0x40, 0x4E, 0x29, 0x20, 0xA7, 0x14, 0x90, 0x53, 
	0x0A, 0xC8, 0x29, 0x05, 0xE4, 0x94, 0x02, 0x72, 
	0x4A, 0x01, 0x99, 0xA4, 0x80, 0x4C, 0x52, 0x40, 
	0x26, 0x29, 0x20, 0x93, 0x14, 0x90, 0x49, 0x0A, 
	0xC8, 0x24, 0x05, 0x64, 0x92, 0x02, 0x32, 0x49, 
	0x01, 0x99, 0xA4, 0x80, 0x4C, 0x52, 0x40, 0x26, 
	0x29, 0x20, 0x93, 0x14, 0x90, 0x49, 0x0A, 0xC8, 
	0x24, 0x05, 0x64, 0x92, 0x02, 0x32, 0x49, 0x01, 
	0x99, 0xA4, 0x40, 0x12, 0x7B, 0x0E, 0x41, 0xD8, 
	0x40, 0x10, 0x36, 0x10, 0x84, 0x0D, 0x04, 0x61, 
	0x03, 0x41, 0xD8, 0x40, 0x10, 0x36, 0x10, 0x84, 
	0x0D, 0x04, 0x61, 0x03, 0x41, 0xD8, 0x40, 0x10, 
	0x36, 0x10, 0x84, 0x0D, 0x04, 0x61, 0x03, 0x41, 
	0xD8, 0x40, 0x10, 0x36, 0x10, 0x84, 0x0D, 0x04, 
	0x61, 0x03, 0x41, 0xD8, 0x40, 0x10, 0x36, 0x10, 
	0x84, 0x0D, 0x04, 0x61, 0x03, 0x41, 0xD0, 0x34, 
	0x1D, 0x9A, 0x01, 0xCD, 0x84, 0x66, 0x41, 0xB3, 
	0xA1, 0x39, 0xD0, 0x5C, 0xC8, 0x0D, 0x65, 0x43, 
	0xF3, 0xA0, 0x1C, 0x68, 0x29, 0xB4, 0x0C, 0xF2, 
	0x40, 0xCB, 0xA1, 0x15, 0xD0, 0x4A, 0x68, 0x95, 
	0x50, 0x5E, 0xBC, 0x0E, 0x47, 0xAE, 0x0A, 0xFE, 
	0x5C, 0xAA, 0xEF, 0xC3, 0x53, 0xDF, 0x47, 0xA6, 
	0xF6, 0x63, 0xC5, 0xCD, 0x98, 0x37, 0x5D, 0x26, 
	0xD6, 0x7C, 0x62, 0x5A, 0x48, 0x4C, 0x0B, 0x89, 
	0x69, 0x21, 0x31, 0x2D, 0x24, 0xA6, 0x85, 0xC4, 
	0xB4, 0x90, 0x98, 0x16, 0x12, 0xD3, 0x42, 0x62, 
	0x5A, 0x48, 0x4C, 0x0B, 0x89, 0x69, 0x21, 0x31, 
	0x2D, 0x24, 0xA6, 0x85, 0xC4, 0xB4, 0x90, 0x98, 
	0x16, 0x12, 0xD3, 0x42, 0x62, 0x5A, 0x48, 0x4C, 
	0x0B, 0x89, 0x69, 0x21, 0x31, 0x2D, 0x24, 0xA6, 
	0x85, 0x44, 0xB2, 0x90, 0x48, 0x16, 0x12, 0xC9, 
	0x42, 0x22, 0x59, 0x48, 0x24, 0x0B, 0x89, 0x64, 
	0x21, 0x91, 0x2C, 0x44, 0xAA, 0x42, 0x22, 0x59, 
	0x48, 0x24, 0x0B, 0x89, 0x64, 0x21, 0x91, 0x2C, 
	0x24, 0x92, 0x85, 0x44, 0xB2, 0x90, 0x48, 0x16, 
	0x12, 0xC9, 0x42, 0x22, 0xA9, 0xBF, 0xCC, 0xFB, 
	0x39, 0x1D, 0x84, 0x05, 0x4A, 0x4E, 0xD1, 0x5B, 
	0x94, 0x9C, 0x66, 0xF5, 0x8F, 0xF0, 0xD8, 0xD3, 
	0x84, 0xFE, 0x52, 0xCF, 0x08, 0xA8, 0x27, 0x14, 
	0x09, 0x45, 0x41, 0x7D, 0xA0, 0x68, 0x28, 0x06, 
	0x8A, 0x85, 0xE2, 0xA0, 0xFE, 0x50, 0x3C, 0x94, 
	0x00, 0x25, 0x42, 0x49, 0xD0, 0x20, 0x28, 0x19, 
	0x4A, 0x81, 0x06, 0x43, 0x43, 0xA0, 0xA1, 0x50, 
	0x06, 0x94, 0x09, 0x0D, 0x83, 0xB2, 0xA0, 0xE1, 
	0xD0, 0x08, 0x68, 0x24, 0x34, 0x0A, 0x1A, 0x2D, 
	0x94, 0xB7, 0x58, 0x0B, 0xB9, 0xD0, 0x0A, 0xE4, 
	0xB2, 0xBF, 0x8A, 0x63, 0x05, 0xDA, 0x8A, 0x40, 
	0x5B, 0x11, 0x68, 0x2B, 0x02, 0x6D, 0x45, 0xA0, 
	0xAD, 0x08, 0xB4, 0x15, 0x81, 0xB6, 0x22, 0xD0, 
	0x56, 0x04, 0xDA, 0x8A, 0x2C, 0x5B, 0x11, 0x63, 
	0x2B, 0x62, 0x6C, 0x45, 0x8C, 0xAD, 0x88, 0xB1, 
	0x15, 0xC7, 0xB7, 0xE2, 0xEE, 0x56, 0xDC, 0xDD, 
	0x8A, 0x1B, 0x5B, 0xE5, 0xD3, 0xE0, 0x3C, 0x4C, 
	0x7E, 0x0A, 0x43, 0x9F, 0xC2, 0xA8, 0xA7, 0x30, 
	0xC5, 0xA1, 0xBC, 0xDB, 0x74, 0x87, 0x45, 0x76, 
	0x88, 0xB8, 0xF8, 0x19, 0xA0, 0x4E, 0xF6, 0x27, 
	0x80, 0x22, 0xA1, 0x28, 0xA8, 0x0F, 0x14, 0x0D, 
	0xC5, 0x40, 0xB1, 0x50, 0x1C, 0xD4, 0x1F, 0x8A, 
	0x87, 0x12, 0xA0, 0x44, 0x28, 0x09, 0x1A, 0x04, 
	0x25, 0x43, 0x29, 0xD0, 0x60, 0x28, 0x03, 0x1A, 
	0x06, 0x65, 0x41, 0xA3, 0x85, 0xF2, 0x3C, 0xDA, 
	0xC9, 0xC5, 0xF6, 0x10, 0x2E, 0xFB, 0x23, 0x47, 
	0xD6, 0xC9, 0xED, 0x38, 0xB9, 0x1D, 0x27, 0xB7, 
	0xE3, 0xE4, 0x76, 0x9C, 0xDC, 0x8E, 0x93, 0xDB, 
	0x71, 0x72, 0x3B, 0x4E, 0x6E, 0xC7, 0xC9, 0xED, 
	0x38, 0xB9, 0x1D, 0xD7, 0xB6, 0xE3, 0xD0, 0x76, 
	0x1C, 0xDA, 0x8E, 0x43, 0xDB, 0x71, 0x68, 0x3B, 
	0x0E, 0x6D, 0xC7, 0xA1, 0xED, 0x38, 0xB4, 0x1D, 
	0x87, 0x1C, 0xCA, 0x5B, 0xA5, 0x1D, 0x5A, 0x62, 
	0x75, 0x74, 0xD9, 0xAF, 0x66, 0xB6, 0x0E, 0xED, 
	0xC4, 0xA1, 0x9D, 0x38, 0xB4, 0x13, 0x87, 0x76, 
	0xE2, 0xD0, 0x4E, 0x1C, 0xDA, 0x89, 0x43, 0x3B, 
	0x71, 0x68, 0x27, 0x0E, 0xED, 0xC4, 0xA1, 0x9D, 
	0x38, 0xB4, 0x93, 0x58, 0xED, 0xC4, 0xB5, 0x9D, 
	0xB8, 0xB6, 0x13, 0xD7, 0x76, 0xE2, 0xDA, 0x4E, 
	0x5C, 0xDB, 0x89, 0x6B, 0x3B, 0x71, 0x6D, 0x27, 
	0xAE, 0xED, 0x94, 0x1B, 0x68, 0x4B, 0x95, 0x9C, 
	0x56, 0xDE, 0x4F, 0x1E, 0xD3, 0x14, 0x0E, 0x45, 
	0x40, 0x3D, 0xA1, 0x48, 0x28, 0x0A, 0xEA, 0x0D, 
	0xF5, 0x81, 0xA2, 0xA1, 0x7E, 0x50, 0x0C, 0x14, 
	0x0B, 0xC5, 0x41, 0xFD, 0xA1, 0x78, 0x28, 0x01, 
	0x4A, 0x84, 0x92, 0xA0, 0x41, 0x50, 0x32, 0x94, 
	0x02, 0xA5, 0x41, 0x83, 0xA1, 0x21, 0xD0, 0x50, 
	0x28, 0x03, 0xCA, 0x84, 0x86, 0x41, 0x59, 0xD0, 
	0x70, 0x68, 0x04, 0x34, 0x12, 0x1A, 0x05, 0x8D, 
	0x16, 0xCA, 0x2B, 0xD7, 0x32, 0x2F, 0xB3, 0x87, 
	0x75, 0xD9, 0xDF, 0xD6, 0xCD, 0x34, 0xF4, 0x5E, 
	0xBB, 0x13, 0x97, 0xFD, 0x02, 0xEE, 0x91, 0x86, 
	0xF6, 0x10, 0x84, 0xFD, 0x48, 0xBF, 0x1F, 0xE9, 
	0xF7, 0x23, 0xFD, 0x7E, 0xA4, 0xDF, 0x8F, 0xE0, 
	0xFB, 0x11, 0x7C, 0x3F, 0x32, 0xEF, 0x47, 0xE6, 
	0xFD, 0xC8, 0xBC, 0x1F, 0x99, 0xF7, 0x23, 0xF3, 
	0x7E, 0x64, 0xDE, 0x8F, 0xCC, 0xFB, 0x91, 0x79, 
	0x3F, 0x32, 0xEF, 0x47, 0xE6, 0xFD, 0xC8, 0xBC, 
	0x1F, 0x71, 0xF7, 0x23, 0xE4, 0x7E, 0xE4, 0xDB, 
	0x8F, 0x7C, 0xFB, 0x91, 0x6F, 0x3F, 0x02, 0x39, 
	0x94, 0xB7, 0x5E, 0x0B, 0xE4, 0xB1, 0x8E, 0xBB, 
	0xEC, 0x4F, 0xA1, 0x0D, 0x37, 0xB4, 0x0F, 0x09, 
	0xF6, 0x20, 0xC1, 0x1E, 0x24, 0xD8, 0x83, 0x04, 
	0x7B, 0x90, 0x60, 0x0F, 0x12, 0xEC, 0x41, 0x82, 
	0x3D, 0x48, 0xB0, 0x07, 0x09, 0xF6, 0x20, 0xC1, 
	0x1E, 0x24, 0xD8, 0x83, 0x04, 0x7B, 0x90, 0x60, 
	0x0F, 0x12, 0xEC, 0x41, 0x82, 0x3D, 0x48, 0xB0, 
	0x07, 0x09, 0xF6, 0x20, 0xC1, 0x1E, 0x24, 0xD8, 
	0x83, 0x04, 0x7B, 0x90, 0x60, 0x0F, 0x8E, 0xEB, 
	0x6F, 0x59, 0x9F, 0xA2, 0x1D, 0x5F, 0x6E, 0x1D, 
	0x72, 0x11, 0x49, 0x97, 0xFD, 0x69, 0xE9, 0x18, 
	0x43, 0x07, 0xAD, 0x29, 0x2E, 0xFB, 0xDB, 0xB3, 
	0xC9, 0x86, 0x0E, 0xDB, 0x83, 0xB9, 0xEC, 0x4F, 
	0x0E, 0x67, 0x18, 0xAA, 0xB2, 0x07, 0x73, 0xD9, 
	0x6F, 0x1D, 0xCF, 0x32, 0xE4, 0x3D, 0xED, 0xBA, 
	0xEC, 0xD7, 0x8C, 0x5B, 0xA9, 0x5E, 0x45, 0xA0, 
	0x57, 0x11, 0xE3, 0x55, 0x24, 0x78, 0x55, 0xB2, 
	0xC2, 0x0A, 0x9B, 0x01, 0x5C, 0xF6, 0x0B, 0xC7, 
	0x7B, 0x1B, 0x3A, 0x6E, 0x67, 0xB1, 0xCB, 0x7E, 
	0x63, 0xBB, 0xCD, 0x19, 0xC7, 0x19, 0xAE, 0xC7, 
	0x89, 0xD5, 0x71, 0x62, 0x75, 0x9C, 0x58, 0x1D, 
	0xC7, 0x80, 0xE3, 0xC4, 0xEA, 0x38, 0xA6, 0x1C, 
	0x27, 0x56, 0xC7, 0x89, 0xD5, 0x71, 0xCC, 0x3B, 
	0x4E, 0xAC, 0x8E, 0x63, 0xE8, 0x71, 0x62, 0x75, 
	0x9C, 0x58, 0x1D, 0x27, 0x56, 0xC7, 0x89, 0xD5, 
	0x71, 0x62, 0x75, 0x9C, 0x58, 0x1D, 0x27, 0x2B, 
	0x1C, 0x27, 0x6A, 0xC7, 0xC9, 0x0A, 0xC7, 0xC9, 
	0x0A, 0xC7, 0x89, 0xE4, 0x71, 0xB2, 0xC2, 0x71, 
	0x62, 0x7A, 0x9C, 0x98, 0x1E, 0x67, 0x58, 0x1F, 
	0x27, 0x2B, 0x1C, 0x27, 0x2B, 0x1C, 0x27, 0x2B, 
	0x1C, 0x27, 0xF6, 0xFA, 0xDB, 0xDB, 0x17, 0x68, 
	0x99, 0x57, 0x5A, 0xD7, 0x5C, 0xE6, 0xDB, 0xEF, 
	0xB5, 0xC9, 0x2E, 0xFB, 0x13, 0x80, 0x56, 0xB4, 
	0xCD, 0x88, 0xB6, 0x19, 0xD1, 0x36, 0x23, 0xDA, 
	0x66, 0x44, 0xDB, 0x8C, 0x68, 0x9B, 0x11, 0x6D, 
	0x33, 0x52, 0x6D, 0x46, 0xA0, 0xCD, 0x88, 0xB1, 
	0x19, 0x31, 0x36, 0x23, 0xC1, 0x66, 0xDC, 0xDD, 
	0x8C, 0x93, 0x9B, 0x71, 0x72, 0x33, 0xC6, 0x6F, 
	0x96, 0x8B, 0x4C, 0x7D, 0x93, 0xC5, 0xDE, 0xA4, 
	0xD2, 0xDF, 0xF2, 0xDE, 0xD7, 0x50, 0xAD, 0x32, 
	0xB7, 0x2E, 0x5C, 0xF6, 0xFB, 0xDC, 0xED, 0xCD, 
	0xA7, 0x93, 0x8C, 0x96, 0x73, 0x8C, 0x96, 0x73, 
	0x4A, 0xCE, 0x30, 0xE7, 0x18, 0x37, 0xE7, 0x18, 
	0x37, 0xE7, 0x90, 0xE0, 0x1C, 0x12, 0x9C, 0x53, 
	0x72, 0x86, 0x39, 0x87, 0x18, 0xE7, 0x10, 0xE3, 
	0x9C, 0x92, 0x33, 0xCC, 0x39, 0x64, 0x39, 0x87, 
	0x2C, 0xE7, 0x90, 0xE5, 0x1C, 0x63, 0xE9, 0x1C, 
	0x02, 0x9D, 0x63, 0x2C, 0x9D, 0x43, 0xAA, 0x73, 
	0x8C, 0xA5, 0x73, 0x8C, 0xA5, 0x73, 0xC8, 0x77, 
	0x0E, 0xF9, 0xCE, 0x31, 0x96, 0xCE, 0x21, 0xE4, 
	0x39, 0xC6, 0xD2, 0x39, 0xC6, 0xD2, 0x39, 0xC4, 
	0x3D, 0xC7, 0x58, 0x3A, 0x87, 0xCC, 0xE7, 0x90, 
	0xF9, 0x1C, 0x63, 0xE9, 0x1C, 0x63, 0xE9, 0x1C, 
	0x63, 0xE9, 0x1C, 0x63, 0xE9, 0x1C, 0xE1, 0x38, 
	0x27, 0x53, 0x36, 0x1F, 0x99, 0x4F, 0x23, 0xF3, 
	0x69, 0x64, 0x3E, 0x8D, 0xCC, 0xA7, 0x91, 0xF9, 
	0x34, 0x32, 0x9F, 0x46, 0xE6, 0xD3, 0xC8, 0x7C, 
	0x1A, 0x99, 0x4F, 0x23, 0xF3, 0x69, 0x64, 0x3E, 
	0x8D, 0xCC, 0xA7, 0x91, 0xF9, 0x34, 0x32, 0x9F, 
	0x46, 0xE6, 0xD3, 0xC8, 0x7C, 0x1A, 0x99, 0x4F, 
	0x23, 0xF3, 0x69, 0x64, 0x3E, 0x8D, 0xCC, 0xA7, 
	0x91, 0xF9, 0x34, 0x32, 0x9F, 0x46, 0xE6, 0xD3, 
	0xC8, 0x7C, 0x1A, 0x99, 0x4F, 0x23, 0xF3, 0x69, 
	0x64, 0x3E, 0x8D, 0xCC, 0xA7, 0x91, 0xF9, 0x34, 
	0x32, 0x9F, 0x46, 0xE6, 0xD3, 0xC8, 0x7C, 0x1A, 
	0x99, 0x4F, 0x23, 0xF3, 0x69, 0x64, 0x3E, 0x2D, 
	0x32, 0x17, 0x20, 0xF3, 0x19, 0x64, 0x3E, 0x83, 
	0xCC, 0x67, 0x90, 0xF9, 0x0C, 0x32, 0x9F, 0x41, 
	0xE6, 0x33, 0xC8, 0x7C, 0x06, 0x99, 0xCF, 0x20, 
	0xF3, 0x19, 0x64, 0x3E, 0x83, 0xCC, 0x67, 0x90, 
	0xF9, 0x0C, 0x32, 0x9F, 0x41, 0xE6, 0x33, 0xC8, 
	0x7C, 0x06, 0x99, 0xCF, 0x20, 0xF3, 0x19, 0x64, 
	0x3E, 0x83, 0xCC, 0x67, 0x90, 0xF9, 0x0C, 0x32, 
	0x9F, 0x41, 0xE6, 0x33, 0xC8, 0x7C, 0x06, 0x99, 
	0xCF, 0x20, 0xF3, 0x19, 0x64, 0x3E, 0x83, 0xCC, 
	0x67, 0x90, 0xF9, 0x0C, 0x32, 0x9F, 0x41, 0xE6, 
	0x33, 0xC8, 0x7C, 0x06, 0x99, 0xCF, 0x20, 0xF3, 
	0x19, 0x64, 0x3E, 0x83, 0xCC, 0x0E, 0xE5, 0x55, 
	0x68, 0x99, 0x0B, 0xED, 0xC1, 0x5C, 0xF6, 0xB7, 
	0x50, 0x47, 0x19, 0xF2, 0x8D, 0xEB, 0x23, 0xC8, 
	0x7C, 0x04, 0x99, 0x8F, 0x20, 0xF3, 0x11, 0x64, 
	0x3E, 0x82, 0xB8, 0x47, 0x10, 0xF7, 0x08, 0x92, 
	0x1E, 0x41, 0xD2, 0x23, 0x48, 0x7A, 0x04, 0x49, 
	0x8F, 0x20, 0xE9, 0x11, 0x24, 0x3D, 0x82, 0xA4, 
	0x47, 0x90, 0xF4, 0x08, 0x92, 0x1E, 0x41, 0xD2, 
	0x23, 0x48, 0x7A, 0x04, 0x21, 0x8F, 0x20, 0xE4, 
	0x11, 0xE4, 0x3B, 0x82, 0x7C, 0x47, 0x90, 0xEF, 
	0x08, 0xF2, 0x1D, 0x41, 0xBE, 0x23, 0xC8, 0x77, 
	0x04, 0xF9, 0x8E, 0x20, 0xDA, 0x11, 0x19, 0x9B, 
	0xB7, 0x31, 0x36, 0xCF, 0x22, 0xD5, 0x59, 0xC6, 
	0xE6, 0x59, 0x44, 0x3B, 0x8B, 0x68, 0x67, 0x11, 
	0xED, 0x2C, 0xA2, 0x9D, 0x65, 0x6C, 0x9E, 0x45, 
	0xBE, 0xB3, 0xC8, 0x77, 0x96, 0xB1, 0x79, 0x16, 
	0x21, 0xCF, 0x22, 0xE4, 0x59, 0x84, 0x3C, 0x8B, 
	0x90, 0x67, 0x11, 0xF2, 0x2C, 0x42, 0x9E, 0x45, 
	0xC8, 0xB3, 0x08, 0x79, 0x16, 0x21, 0xCF, 0x22, 
	0xE4, 0x59, 0x84, 0x3C, 0xCB, 0xD8, 0x3C, 0x8B, 
	0xA4, 0x67, 0x91, 0xF4, 0x2C, 0x63, 0xF3, 0x2C, 
	0xE2, 0x9E, 0x45, 0xDC, 0xB3, 0x88, 0x7B, 0x16, 
	0x71, 0xCF, 0x22, 0xEE, 0x59, 0xC4, 0x3D, 0x8B, 
	0xB8, 0x67, 0x19, 0x9B, 0x67, 0x91, 0xF9, 0xAC, 
	0xC8, 0xBC, 0x1A, 0x99, 0x6B, 0x90, 0xB9, 0x06, 
	0x99, 0x6B, 0x90, 0xB9, 0x06, 0x99, 0x6B, 0x90, 
	0xB9, 0x06, 0x99, 0x6B, 0x90, 0xB9, 0x06, 0x99, 
	0x6B, 0x90, 0xB9, 0x06, 0x99, 0x6B, 0x90, 0xB9, 
	0x06, 0x99, 0x6B, 0x90, 0xB9, 0x06, 0x99, 0x6B, 
	0x90, 0xB9, 0x06, 0x99, 0x6B, 0x90, 0xB9, 0x06, 
	0x99, 0x6B, 0x90, 0xB9, 0x06, 0x99, 0x6B, 0x90, 
	0xB9, 0x06, 0x99, 0x6B, 0x90, 0xB9, 0x06, 0x99, 
	0x6B, 0x90, 0xB9, 0x06, 0x99, 0x6B, 0x90, 0xB9, 
	0x06, 0x99, 0x6B, 0x90, 0xB9, 0x06, 0x99, 0x6B, 
	0x90, 0xB9, 0x06, 0x99, 0x6B, 0x90, 0xB9, 0x06, 
	0x99, 0x6B, 0x64, 0x7D, 0x51, 0x84, 0xCC, 0xFA, 
	0xE7, 0xE1, 0xBA, 0x43, 0x3D, 0xA0, 0x5E, 0x50, 
	0x1C, 0x34, 0x10, 0x4A, 0x81, 0x52, 0xA1, 0x34, 
	0x28, 0x1D, 0x1A, 0x03, 0x8D, 0x85, 0xC6, 0x41, 
	0xE3, 0xA1, 0x09, 0xD0, 0x44, 0x68, 0x12, 0x34, 
	0x19, 0x9A, 0x02, 0x4D, 0x85, 0xA6, 0x41, 0xD3, 
	0xA1, 0x19, 0xD0, 0x4C, 0x68, 0x16, 0x34, 0x1B, 
	0x9A, 0x03, 0xCD, 0x85, 0xDC, 0x50, 0x36, 0x34, 
	0x0F, 0xCA, 0x81, 0x96, 0x42, 0xCB, 0x20, 0x0F, 
	0xB4, 0x1C, 0x5A, 0x01, 0xAD, 0x84, 0x56, 0x09, 
	0xD9, 0x70, 0xAC, 0x21, 0x1C, 0x6F, 0x10, 0x8E, 
	0x37, 0x18, 0xFF, 0x6F, 0x30, 0xFE, 0xDF, 0x60, 
	0xFC, 0xBF, 0xC1, 0xF8, 0x7F, 0x83, 0xF1, 0xFF, 
	0x06, 0xE3, 0xFF, 0x0D, 0xC6, 0xFF, 0x1B, 0x8C, 
	0xFF, 0x37, 0x18, 0xFF, 0x9A, 0xFA, 0x42, 0xFD, 
	0xA0, 0x18, 0x28, 0x16, 0x8A, 0x83, 0xFA, 0x43, 
	0x03, 0xA0, 0x78, 0x28, 0x01, 0x4A, 0x84, 0x92, 
	0xA0, 0x41, 0x50, 0x32, 0x94, 0x02, 0xA5, 0x41, 
	0xE9, 0xD0, 0x60, 0x68, 0x08, 0x34, 0x14, 0xCA, 
	0x80, 0x32, 0xA1, 0x61, 0x50, 0x16, 0x34, 0x1C, 
	0x1A, 0x01, 0x8D, 0x84, 0x46, 0x41, 0xA3, 0x85, 
	0xEC, 0x17, 0x80, 0xDC, 0xAE, 0xFC, 0xBF, 0x37, 
	0xCB, 0xF7, 0x1D, 0x59, 0xBE, 0xEF, 0xB9, 0x9A, 
	0x63, 0x68, 0xBC, 0xF2, 0xFF, 0xBE, 0x29, 0xFB, 
	0x5D, 0x50, 0x67, 0x18, 0x37, 0xD3, 0x9C, 0xDD, 
	0x8D, 0xD4, 0x9F, 0x3D, 0xDF, 0xA1, 0x6E, 0x7E, 
	0xAD, 0xD7, 0xCD, 0xAF, 0xF5, 0xBA, 0x5E, 0x9E, 
	0xD4, 0xBF, 0xF2, 0xD7, 0x7A, 0xE9, 0x5B, 0x6B, 
	0xA1, 0x7E, 0xAD, 0xD7, 0x78, 0x68, 0x0A, 0xD4, 
	0xE6, 0xC9, 0xFF, 0xB5, 0xB6, 0x83, 0xCB, 0x9E, 
	0xDD, 0xCD, 0x2D, 0xFD, 0x75, 0xEA, 0xF2, 0x27, 
	0xC1, 0xF5, 0xE5, 0xD6, 0x51, 0x43, 0xFA, 0xD7, 
	0xB5, 0x8E, 0x19, 0xBA, 0x20, 0xCB, 0x81, 0xF5, 
	0x24, 0xC6, 0xF3, 0xA4, 0xC3, 0xF3, 0xA4, 0xC3, 
	0xF3, 0xA4, 0xC3, 0xF3, 0xA4, 0xC3, 0xF3, 0xA4, 
	0xC3, 0xF3, 0xA4, 0xC3, 0xF3, 0xA4, 0xC3, 0xF3, 
	0xA4, 0xC3, 0xF3, 0xA4, 0xC3, 0xF3, 0x24, 0xC1, 
	0xF3, 0x24, 0xC1, 0xF3, 0x24, 0xC1, 0xF3, 0x38, 
	0x76, 0x9E, 0x24, 0x78, 0x9E, 0xD4, 0x77, 0x9E, 
	0xD4, 0x77, 0x9E, 0xD4, 0x77, 0x9E, 0xD4, 0x77, 
	0x9E, 0xD4, 0x77, 0x9E, 0xD4, 0x77, 0x1E, 0x19, 
	0xCF, 0x93, 0xFA, 0xCE, 0x93, 0xF0, 0xCE, 0x93, 
	0xF0, 0xCE, 0x93, 0xF0, 0xCE, 0x93, 0xF0, 0xCE, 
	0x93, 0xF0, 0xCE, 0x93, 0xF0, 0xCE, 0x93, 0xF0, 
	0xCE, 0x93, 0xF0, 0xCE, 0x93, 0xF0, 0xCE, 0x93, 
	0xF0, 0xCE, 0x93, 0xF0, 0xCE, 0x93, 0xF0, 0xCE, 
	0xCB, 0xE7, 0x9F, 0xC5, 0xC8, 0x9C, 0xAF, 0xE4, 
	0xFC, 0x93, 0xAF, 0x64, 0x39, 0x90, 0xAF, 0x64, 
	0x39, 0x90, 0x8F, 0x18, 0xF9, 0x4A, 0x96, 0x03, 
	0xF9, 0x38, 0x94, 0xAF, 0x64, 0x39, 0x90, 0x8F, 
	0x6B, 0xF9, 0x4A, 0xB2, 0x7A, 0xBE, 0x92, 0xE5, 
	0x40, 0xBE, 0x92, 0xE5, 0x40, 0xBE, 0x92, 0xE5, 
	0x40, 0x3E, 0x63, 0x2A, 0x5F, 0xC9, 0x72, 0x20, 
	0x5F, 0xC9, 0x72, 0x20, 0x5F, 0xC9, 0x72, 0x20, 
	0x5F, 0xC9, 0x72, 0x20, 0x9F, 0xB1, 0x97, 0xAF, 
	0x64, 0x39, 0x90, 0xAF, 0x64, 0x39, 0x90, 0xAF, 
	0x64, 0x11, 0x90, 0xAF, 0x64, 0x11, 0x90, 0xAF, 
	0x64, 0x11, 0x90, 0xAF, 0x64, 0x11, 0x90, 0xAF, 
	0x64, 0x11, 0x90, 0xAF, 0x64, 0x11, 0x90, 0xAF, 
	0x64, 0x11, 0x90, 0xAF, 0x24, 0x99, 0xE7, 0x2B, 
	0x59, 0x04, 0xE4, 0x2B, 0x59, 0x04, 0xE4, 0x2B, 
	0x59, 0x04, 0xE4, 0x2B, 0x59, 0x04, 0xE4, 0x2B, 
	0x59, 0x04, 0xE4, 0x2B, 0x59, 0x04, 0xE4, 0x2B, 
	0x59, 0x04, 0xE4, 0x2B, 0x59, 0x04, 0xE4, 0x2B, 
	0x59, 0x04, 0xE4, 0xCB, 0xE3, 0x64, 0xDE, 0xC7, 
	0x04, 0xBC, 0xE9, 0xDF, 0xA6, 0xB4, 0x0F, 0xC8, 
	0x3B, 0xF5, 0x7A, 0xD1, 0x60, 0x9F, 0xDF, 0xBF, 
	0x05, 0xE5, 0x6F, 0x41, 0xC7, 0x5B, 0xF0, 0xFB, 
	0x16, 0x2C, 0xBE, 0x05, 0x3B, 0x35, 0xE5, 0x42, 
	0xF3, 0xA1, 0x05, 0xD0, 0x42, 0x28, 0x0F, 0x5A, 
	0x04, 0x2D, 0x86, 0x96, 0x40, 0x1E, 0x68, 0xB9, 
	0x90, 0x35, 0xB4, 0x04, 0x43, 0x63, 0x31, 0x34, 
	0x16, 0x43, 0x63, 0x31, 0x34, 0x16, 0x43, 0x63, 
	0x31, 0x34, 0x16, 0x43, 0x63, 0x31, 0x34, 0x16, 
	0x43, 0x63, 0x31, 0x34, 0x16, 0x43, 0x63, 0x31, 
	0x34, 0x16, 0x43, 0x63, 0x31, 0x34, 0x16, 0x43, 
	0x63, 0x31, 0x34, 0x56, 0x0C, 0xBD, 0x0B, 0x43, 
	0xE3, 0x30, 0x34, 0x0E, 0x43, 0xE3, 0x30, 0x34, 
	0x0E, 0x43, 0xE3, 0x30, 0x34, 0x0E, 0x43, 0xE3, 
	0x30, 0x34, 0x0E, 0x43, 0xE3, 0x30, 0x34, 0x0E, 
	0x43, 0xE3, 0x30, 0x34, 0x0E, 0x43, 0xE3, 0x30, 
	0x34, 0x0E, 0x43, 0xE3, 0x30, 0x34, 0x4E, 0xF2, 
	0xE8, 0xDD, 0x4A, 0x4E, 0xD9, 0xF5, 0x52, 0x55, 
	0x8A, 0xED, 0x4A, 0x9E, 0x59, 0xBC, 0x87, 0x56, 
	0x0D, 0xCA, 0x7C, 0x2B, 0x74, 0x67, 0xFB, 0xFB, 
	0x7F, 0x3B, 0x0D, 0x35, 0x4A, 0xCF, 0x7B, 0x95, 
	0xAC, 0x36, 0x3E, 0xE4, 0x54, 0xBD, 0xAE, 0xAB, 
	0xEE, 0xA3, 0xEA, 0xC3, 0xA4, 0x81, 0x8F, 0x90, 
	0x06, 0x34, 0x5D, 0xFB, 0x83, 0x5A, 0x51, 0xD0, 
	0xBF, 0xF3, 0xC8, 0x56, 0x2C, 0x14, 0x07, 0x05, 
	0x7B, 0x8C, 0x2B, 0x1E, 0xBA, 0xF6, 0x07, 0xBA, 
	0x52, 0xA0, 0x34, 0x28, 0x1D, 0x7A, 0xB7, 0x1E, 
	0xF7, 0x32, 0x27, 0xBF, 0xFB, 0x09, 0xC7, 0x49, 
	0x82, 0x70, 0x92, 0x20, 0x9C, 0x24, 0x08, 0x27, 
	0x09, 0xC2, 0x49, 0x82, 0x70, 0x92, 0x20, 0x9C, 
	0x24, 0x08, 0x27, 0x09, 0xC2, 0x49, 0x82, 0x70, 
	0x12, 0xE9, 0x4F, 0x22, 0xFD, 0x49, 0xA4, 0x3F, 
	0x89, 0xF4, 0x27, 0x91, 0xFE, 0x24, 0x82, 0x9F, 
	0x44, 0xF0, 0x93, 0x08, 0x7E, 0x12, 0xC1, 0x4F, 
	0x22, 0xF8, 0x49, 0x04, 0x3F, 0x89, 0xE0, 0x27, 
	0x11, 0xFC, 0x24, 0x32, 0x9F, 0x44, 0xE6, 0x93, 
	0xC8, 0x7C, 0x12, 0x99, 0x4F, 0x22, 0xF3, 0x49, 
	0x64, 0x3E, 0x89, 0xCC, 0x27, 0x91, 0xF9, 0x24, 
	0x32, 0x9F, 0x44, 0xE6, 0x93, 0xC8, 0x7C, 0x12, 
	0x99, 0xF5, 0x4F, 0x96, 0xEE, 0xD5, 0x32, 0x6F, 
	0x54, 0xC1, 0xEF, 0xB0, 0x5B, 0xE9, 0x1B, 0x90, 
	0xBE, 0x01, 0xE9, 0x1B, 0x90, 0xBE, 0x01, 0xE9, 
	0x1B, 0x90, 0xBE, 0x01, 0xE9, 0x1B, 0x90, 0xBE, 
	0x01, 0xE9, 0x1B, 0x90, 0xBE, 0x01, 0xE9, 0x1B, 
	0x90, 0xBE, 0x01, 0xE9, 0x1B, 0x90, 0xBE, 0x01, 
	0xE9, 0x1B, 0x90, 0xBE, 0x01, 0xE9, 0x1B, 0x90, 
	0xBE, 0x01, 0xE9, 0x1B, 0x90, 0xBE, 0x01, 0xE9, 
	0x1B, 0x90, 0xBE, 0x01, 0xE9, 0x1B, 0x90, 0xBE, 
	0x01, 0xE9, 0x1B, 0x90, 0xBE, 0x01, 0xE9, 0x1B, 
	0x90, 0xBE, 0x01, 0xE9, 0x1B, 0x90, 0xBE, 0x01, 
	0xE9, 0x1B, 0x90, 0xBE, 0x01, 0xE9, 0x1B, 0x90, 
	0xBE, 0x01, 0xE9, 0x1B, 0x64, 0x84, 0x6F, 0x42, 
	0xE6, 0x5A, 0x64, 0xAE, 0x45, 0xE6, 0x5A, 0x64, 
	0xAE, 0x45, 0xE6, 0x5A, 0x64, 0xAE, 0x45, 0xE6, 
	0x5A, 0x64, 0xAE, 0x45, 0xE6, 0x5A, 0x64, 0xAE, 
	0x45, 0xE6, 0x5A, 0x64, 0xAE, 0x45, 0xE6, 0x5A, 
	0x64, 0xAE, 0x45, 0xE6, 0x5A, 0x64, 0xAE, 0x45, 
	0xE6, 0x5A, 0x64, 0xAE, 0x45, 0xE6, 0x5A, 0x64, 
	0xAE, 0x45, 0xE6, 0x5A, 0x64, 0xAE, 0x45, 0xE6, 
	0x5A, 0x64, 0xAE, 0x45, 0xE6, 0x5A, 0x64, 0xAE, 
	0x45, 0xE6, 0x5A, 0x64, 0xAE, 0x45, 0xE6, 0x5A, 
	0x64, 0xAE, 0x45, 0xE6, 0x5A, 0x64, 0xAE, 0x45, 
	0xE6, 0x5A, 0x64, 0xAE, 0x45, 0xE6, 0x5A, 0x49, 
	0xFA, 0x0F, 0x58, 0xA9, 0x5C, 0xE6, 0x47, 0x55, 
	0x6D, 0x55, 0x19, 0x55, 0xCD, 0x12, 0x8C, 0x72, 
	0x82, 0x51, 0x47, 0x30, 0xEA, 0x08, 0x46, 0x1D, 
	0xC1, 0xA8, 0x23, 0x18, 0x75, 0x04, 0xA3, 0x8E, 
	0x60, 0xD4, 0x11, 0x8C, 0x3A, 0x82, 0x51, 0x47, 
	0x30, 0xEA, 0x08, 0x46, 0x1D, 0xC1, 0xA8, 0x23, 
	0x18, 0x75, 0x04, 0xA3, 0x8E, 0x60, 0xD4, 0x11, 
	0x8C, 0x3A, 0x82, 0x51, 0x47, 0x30, 0xEA, 0x08, 
	0x46, 0x1D, 0xC1, 0xA8, 0x23, 0x18, 0x75, 0x04, 
	0xA3, 0x8E, 0x60, 0xD4, 0x11, 0x8C, 0x3A, 0x82, 
	0x51, 0x47, 0x30, 0xEA, 0x08, 0x46, 0x1D, 0xC1, 
	0xA8, 0x23, 0x18, 0x75, 0x04, 0xA3, 0x8E, 0x60, 
	0xD4, 0x11, 0x8C, 0x3A, 0x82, 0x51, 0x47, 0x30, 
	0xEA, 0x08, 0x46, 0x9D, 0xC8, 0xFC, 0x20, 0x32, 
	0x9F, 0x42, 0xE6, 0x53, 0xC8, 0x7C, 0x0A, 0x99, 
	0x4F, 0x21, 0xF3, 0x29, 0x64, 0x3E, 0x85, 0xCC, 
	0xA7, 0x90, 0xF9, 0x14, 0x32, 0x9F, 0x42, 0xE6, 
	0x53, 0xC8, 0x7C, 0x0A, 0x99, 0x4F, 0x21, 0xF3, 
	0x29, 0x64, 0x3E, 0x85, 0xCC, 0xA7, 0x90, 0xF9, 
	0x14, 0x32, 0x9F, 0x42, 0xE6, 0x53, 0xC8, 0x7C, 
	0x0A, 0x99, 0x4F, 0x21, 0xF3, 0x29, 0x64, 0x3E, 
	0x85, 0xCC, 0xA7, 0x90, 0xF9, 0x14, 0x32, 0x9F, 
	0x42, 0xE6, 0x53, 0xC8, 0x7C, 0x0A, 0x99, 0x4F, 
	0x21, 0xF3, 0x29, 0x64, 0x3E, 0x85, 0xCC, 0xA7, 
	0x90, 0xF9, 0x14, 0x32, 0x9F, 0x42, 0xE6, 0x53, 
	0xC8, 0x7C, 0x4A, 0xB2, 0xBA, 0xFE, 0xB6, 0x90, 
	0x2B, 0x67, 0xF5, 0x7A, 0xA4, 0xAF, 0x47, 0xFA, 
	0x7A, 0xA4, 0xAF, 0x47, 0xFA, 0x7A, 0xA4, 0xAF, 
	0x47, 0xFA, 0x7A, 0xA4, 0xAF, 0x47, 0xFA, 0x7A, 
	0xA4, 0xAF, 0x47, 0xFA, 0x7A, 0xA4, 0xAF, 0x47, 
	0xFA, 0x7A, 0xA4, 0xAF, 0x47, 0xFA, 0x7A, 0xA4, 
	0xAF, 0x47, 0xFA, 0x7A, 0xA4, 0xAF, 0x47, 0xFA, 
	0x7A, 0xA4, 0xAF, 0x47, 0xFA, 0x7A, 0xA4, 0xAF, 
	0x47, 0xFA, 0x7A, 0xA4, 0xAF, 0x47, 0xFA, 0x7A, 
	0xA4, 0xAF, 0x47, 0xFA, 0x7A, 0xA4, 0xAF, 0x47, 
	0xFA, 0x7A, 0xA4, 0xAF, 0x47, 0xFA, 0x7A, 0xA4, 
	0xAF, 0x47, 0xFA, 0x7A, 0xA4, 0xAF, 0x47, 0xFA, 
	0x7A, 0xB9, 0x9B, 0xF9, 0x30, 0x32, 0xEB, 0xA5, 
	0x6B, 0x77, 0xA8, 0x07, 0xD4, 0x0B, 0x8A, 0x83, 
	0x06, 0x42, 0x29, 0x50, 0x2A, 0x94, 0x06, 0xA5, 
	0x43, 0x63, 0xA0, 0xB1, 0xD0, 0x38, 0x68, 0x3C, 
	0x34, 0x01, 0x9A, 0x08, 0x4D, 0x82, 0x26, 0x43, 
	0x53, 0xA0, 0xA9, 0xD0, 0x34, 0x68, 0x3A, 0x34, 
	0x03, 0x9A, 0x09, 0xCD, 0x82, 0x66, 0x43, 0x73, 
	0xA0, 0xB9, 0x90, 0x1B, 0xCA, 0x86, 0xE6, 0x41, 
	0x39, 0xD0, 0x52, 0x68, 0x19, 0xE4, 0x81, 0x96, 
	0x43, 0x2B, 0xA0, 0x95, 0xD0, 0x2A, 0x21, 0x1B, 
	0x8E, 0x47, 0x08, 0x47, 0x29, 0xE1, 0x28, 0x25, 
	0x1C, 0xA5, 0x84, 0xA3, 0x94, 0x70, 0x94, 0x12, 
	0x8E, 0x52, 0xC2, 0x51, 0x4A, 0x38, 0x4A, 0x09, 
	0x47, 0x29, 0xE1, 0x28, 0x25, 0x1C, 0xA5, 0x84, 
	0xA3, 0x94, 0x70, 0x94, 0x12, 0x8E, 0x52, 0xC2, 
	0x51, 0x4A, 0x38, 0x4A, 0x09, 0x47, 0x29, 0xE1, 
	0x28, 0x25, 0x1C, 0xA5, 0x84, 0xA3, 0x94, 0x70, 
	0x94, 0x12, 0x8E, 0x52, 0xC2, 0x51, 0x4A, 0x38, 
	0x4A, 0x09, 0x47, 0x29, 0xE1, 0x28, 0x25, 0x1C, 
	0xA5, 0x84, 0xA3, 0x94, 0x70, 0x94, 0x12, 0x8E, 
	0x52, 0xC2, 0x51, 0x4A, 0x38, 0x4A, 0x09, 0x47, 
	0x29, 0xE1, 0x28, 0x25, 0x1C, 0xA5, 0x84, 0xA3, 
	0x94, 0x70, 0x94, 0x12, 0x8E, 0x52, 0xC2, 0x51, 
	0xAA, 0xDF, 0xED, 0xD4, 0x77, 0x83, 0x1F, 0x55, 
	0xA1, 0xBF, 0x89, 0x74, 0xF3, 0xFD, 0xA3, 0x9B, 
	0xEF, 0x1F, 0x5D, 0x1F, 0xEF, 0x1F, 0x99, 0x45, 
	0xE3, 0x63, 0x4A, 0x6E, 0xBF, 0x7F, 0x44, 0x92, 
	0xCB, 0xE3, 0x24, 0x97, 0x4A, 0x92, 0x4B, 0x25, 
	0xC9, 0xA5, 0x92, 0xE4, 0x52, 0x49, 0x72, 0xA9, 
	0x24, 0xB9, 0x54, 0x92, 0x5C, 0x2A, 0x49, 0x2E, 
	0x95, 0x24, 0x97, 0x4A, 0x92, 0x4B, 0x25, 0xC9, 
	0xA5, 0x92, 0xE4, 0x52, 0x49, 0x72, 0xA9, 0x24, 
	0xB9, 0x54, 0x92, 0x5C, 0x2A, 0x49, 0x2E, 0x95, 
	0x24, 0x97, 0x4A, 0x92, 0x4B, 0x25, 0xC9, 0xA5, 
	0x92, 0xE4, 0x52, 0x49, 0x72, 0xA9, 0x24, 0xB9, 
	0x54, 0x92, 0x5C, 0x2A, 0x49, 0x2E, 0x95, 0x24, 
	0x97, 0x4A, 0x92, 0x4B, 0x25, 0xC9, 0xA5, 0x92, 
	0xE4, 0x52, 0x49, 0x72, 0xA9, 0x24, 0xB9, 0x54, 
	0x92, 0x5C, 0x2A, 0x49, 0x2E, 0x95, 0x24, 0x97, 
	0x4A, 0x92, 0x4B, 0x25, 0xC9, 0xA5, 0x92, 0xE4, 
	0x52, 0x49, 0x72, 0xA9, 0x24, 0xB9, 0x54, 0x92, 
	0x5C, 0x2A, 0x25, 0x1C, 0x15, 0x2A, 0xF4, 0x8F, 
	0x9A, 0xDE, 0x89, 0x94, 0x62, 0x3F, 0xA2, 0x79, 
	0x43, 0x05, 0xFF, 0x38, 0xE6, 0xC6, 0x4B, 0x29, 
	0x6D, 0x3E, 0x02, 0xF1, 0x8E, 0x7A, 0x97, 0xFD, 
	0x22, 0x96, 0x5D, 0xBA, 0xEA, 0x89, 0xEB, 0x2C, 
	0x42, 0x36, 0x2E, 0x97, 0x6E, 0xC4, 0x68, 0xD8, 
	0x18, 0x3C, 0x49, 0x0C, 0x5A, 0xE4, 0x4E, 0xBB, 
	0xEF, 0x2D, 0x12, 0x7D, 0xD7, 0x34, 0x5E, 0xC8, 
	0x7E, 0xF8, 0xFB, 0xB4, 0x6A, 0xEF, 0x87, 0x0E, 
	0x02, 0xBF, 0x97, 0xD3, 0xF7, 0x99, 0xA5, 0x15, 
	0x4F, 0x7F, 0x65, 0x9D, 0xFD, 0x7C, 0xAD, 0x55, 
	0xE2, 0xFD, 0xCC, 0x75, 0x19, 0xEF, 0x8F, 0xDD, 
	0x90, 0xF1, 0x36, 0x82, 0x3F, 0x7B, 0x5D, 0x0A, 
	0xFE, 0xF1, 0x1B, 0x52, 0x70, 0x73, 0xCE, 0x79, 
	0x4E, 0xC9, 0x12, 0x60, 0xBD, 0x92, 0x25, 0xC0, 
	0x7A, 0x25, 0x4B, 0x80, 0xF5, 0x4A, 0x96, 0x00, 
	0xBE, 0xFC, 0xA8, 0x69, 0x20, 0x94, 0x02, 0xA5, 
	0x42, 0x69, 0x50, 0x3A, 0x34, 0x06, 0x1A, 0x0B, 
	0x8D, 0x83, 0xC6, 0x43, 0x13, 0xA0, 0x89, 0xD0, 
	0x24, 0x68, 0x32, 0x34, 0x05, 0x9A, 0x0A, 0x4D, 
	0x83, 0xA6, 0x43, 0x33, 0xA0, 0x99, 0xD0, 0x2C, 
	0x68, 0x36, 0x34, 0x07, 0x9A, 0x0B, 0xB9, 0xA1, 
	0x6C, 0x68, 0x1E, 0x94, 0x03, 0x2D, 0x85, 0x96, 
	0x41, 0x1E, 0x68, 0x39, 0xB4, 0x02, 0x5A, 0x09, 
	0xAD, 0x12, 0xB2, 0x37, 0x3E, 0x9E, 0xBF, 0x2E, 
	0xC7, 0xBF, 0xEF, 0xC4, 0xFF, 0x89, 0x1B, 0x72, 
	0x26, 0xDC, 0xA3, 0xA5, 0x7F, 0xE1, 0x3A, 0x93, 
	0xFE, 0x6D, 0xFB, 0x3E, 0x71, 0xEF, 0x9D, 0x30, 
	0x7D, 0x3D, 0x10, 0x0D, 0xC5, 0x09, 0xE5, 0x7D, 
	0x50, 0x8B, 0xF1, 0xA2, 0x0A, 0xED, 0x3A, 0xF7, 
	0x7A, 0xFB, 0x36, 0xED, 0xB6, 0x57, 0xC1, 0x9F, 
	0x74, 0xA8, 0xC8, 0xD0, 0xA7, 0x18, 0xCD, 0x9F, 
	0xBE, 0x81, 0xC6, 0x70, 0x90, 0xEF, 0xDA, 0xF6, 
	0x86, 0xF7, 0x21, 0x79, 0x3C, 0xE4, 0x25, 0x25, 
	0x19, 0xFE, 0x36, 0x25, 0x19, 0xFE, 0x36, 0x25, 
	0x19, 0xFE, 0x36, 0x25, 0x19, 0xFE, 0x36, 0x46, 
	0x81, 0xA6, 0x81, 0x50, 0x0A, 0x94, 0x0A, 0xA5, 
	0x41, 0xE9, 0xD0, 0x18, 0x68, 0x2C, 0x34, 0x0E, 
	0x1A, 0x0F, 0x4D, 0x80, 0x26, 0x42, 0x93, 0xA0, 
	0xC9, 0xD0, 0x14, 0x68, 0x2A, 0x34, 0x0D, 0x9A, 
	0x01, 0xCD, 0x84, 0x66, 0x41, 0xB3, 0xA1, 0x39, 
	0xD0, 0x5C, 0xC8, 0x0D, 0x65, 0x43, 0xF3, 0xA0, 
	0x1C, 0x68, 0x29, 0xB4, 0x0C, 0xF2, 0x40, 0xCB, 
	0xA1, 0x15, 0xD0, 0x4A, 0x68, 0x95, 0x90, 0x3D, 
	0xCD, 0xBE, 0x4C, 0x10, 0xCA, 0x09, 0x42, 0x39, 
	0x41, 0x28, 0x27, 0x08, 0xE5, 0x04, 0xA1, 0x9C, 
	0x20, 0x94, 0x13, 0x84, 0x72, 0x82, 0x50, 0x4E, 
	0x10, 0xCA, 0x09, 0x42, 0x39, 0x41, 0x28, 0x27, 
	0x08, 0xE5, 0x04, 0xA1, 0x9C, 0x20, 0x94, 0x13, 
	0x84, 0x72, 0x82, 0x50, 0x4E, 0x10, 0xCA, 0x09, 
	0x42, 0x39, 0x41, 0x28, 0x27, 0x08, 0xE5, 0x04, 
	0x41, 0xD3, 0x74, 0x68, 0x06, 0x34, 0x13, 0x9A, 
	0x05, 0xCD, 0x86, 0xE6, 0x40, 0x73, 0x21, 0x37, 
	0x94, 0x0D, 0xCD, 0x83, 0x72, 0xA0, 0xA5, 0xD0, 
	0x32, 0xC8, 0x03, 0x2D, 0x87, 0x56, 0x40, 0x2B, 
	0xA1, 0x55, 0x42, 0xF6, 0x79, 0x8B, 0x57, 0x94, 
	0x7C, 0x47, 0xD4, 0x67, 0x98, 0x30, 0x8F, 0x20, 
	0xFD, 0x23, 0x72, 0xF5, 0xE1, 0x7D, 0x13, 0xD0, 
	0x69, 0xF6, 0x59, 0xE9, 0xF9, 0x1E, 0xDA, 0x3F, 
	0xAA, 0x24, 0x7F, 0x3E, 0x4A, 0xCF, 0x47, 0xA5, 
	0xA7, 0xEF, 0x6B, 0x2A, 0xA6, 0xC8, 0x7B, 0x9C, 
	0x5B, 0xD4, 0xF5, 0x7F, 0x7E, 0xB1, 0x89, 0xEA, 
	0x3F, 0xAE, 0x9A, 0x9E, 0x42, 0x3D, 0xB1, 0x1A, 
	0xC7, 0xB7, 0x76, 0x18, 0xC7, 0x3F, 0xF7, 0x96, 
	0x39, 0xFE, 0x94, 0x76, 0x7C, 0xDB, 0x75, 0xEB, 
	0xB8, 0xEF, 0xA4, 0xD7, 0xF6, 0x04, 0xF7, 0x79, 
	0x15, 0xFA, 0x09, 0xCE, 0x77, 0x5A, 0x7B, 0xAB, 
	0x17, 0x64, 0xE6, 0xCD, 0xF0, 0xED, 0x1D, 0x40, 
	0xBE, 0x2B, 0x0B, 0xF4, 0x85, 0xB7, 0x55, 0x20, 
	0xF3, 0x2A, 0xD8, 0x8E, 0x0E, 0x20, 0x90, 0x6F, 
	0x7C, 0xD9, 0x51, 0xF5, 0xC5, 0x77, 0x71, 0x54, 
	0x3D, 0xA2, 0x45, 0xDB, 0xD9, 0x61, 0x44, 0xFB, 
	0xD2, 0xBB, 0x28, 0x95, 0xB9, 0x22, 0xDA, 0xD5, 
	0x01, 0xA4, 0x6A, 0x9B, 0xC2, 0x43, 0x15, 0xE3, 
	0xCB, 0xD7, 0x2A, 0xC6, 0x7B, 0x6F, 0x60, 0x31, 
	0xBE, 0x72, 0xAD, 0x62, 0xEC, 0xBE, 0x81, 0xC5, 
	0xF8, 0xEA, 0xB5, 0x8A, 0xB1, 0xE7, 0x06, 0x16, 
	0xE3, 0x6B, 0xD7, 0x20, 0xC6, 0x46, 0x2D, 0xC6, 
	0xDE, 0x0E, 0x25, 0x86, 0x4D, 0xAA, 0x5F, 0xBF, 
	0x66, 0x59, 0xAE, 0x25, 0x95, 0x1A, 0x59, 0xF6, 
	0x75, 0x40, 0x59, 0xBE, 0xF1, 0xB6, 0xCA, 0x62, 
	0x1E, 0xA7, 0xDB, 0xDF, 0x01, 0x64, 0x69, 0x7B, 
	0x5B, 0xE8, 0x9B, 0xEA, 0xFA, 0xBF, 0x2D, 0xD4, 
	0x46, 0xE6, 0x03, 0x1D, 0x50, 0xE6, 0x6F, 0x75, 
	0x3C, 0x99, 0x0F, 0x76, 0x40, 0x99, 0xBF, 0xDD, 
	0xF1, 0x64, 0x3E, 0xD4, 0x01, 0x65, 0xFE, 0x4E, 
	0xC7, 0x93, 0xF9, 0x70, 0x07, 0x94, 0xF9, 0xBB, 
	0x1D, 0x4F, 0xE6, 0x23, 0x1D, 0x50, 0xE6, 0xEF, 
	0x75, 0x3C, 0x99, 0xAB, 0x3A, 0xA0, 0xCC, 0xDF, 
	0xEF, 0x78, 0x32, 0x1F, 0xED, 0x80, 0x32, 0xFF, 
	0xA0, 0xE3, 0xC9, 0xFC, 0x5A, 0x07, 0x94, 0xF9, 
	0x87, 0x1D, 0x4F, 0xE6, 0x63, 0x1D, 0x50, 0xE6, 
	0x1F, 0x75, 0x28, 0x99, 0xCD, 0x0F, 0x25, 0xBF, 
	0x7E, 0xDD, 0xCA, 0xEC, 0x93, 0xEA, 0xDA, 0x3E, 
	0x16, 0xFA, 0xCF, 0xF6, 0xDC, 0x3D, 0x7E, 0xC3, 
	0xB9, 0xFB, 0xE3, 0xF6, 0xDC, 0x3D, 0x71, 0xC3, 
	0xB9, 0xFB, 0x93, 0x2B, 0xB8, 0xFB, 0x1E, 0xED, 
	0x6E, 0xF5, 0x75, 0xEB, 0x6E, 0xB0, 0x9C, 0xF1, 
	0xEF, 0x67, 0x8A, 0x9F, 0xBE, 0x43, 0x99, 0xC2, 
	0xFC, 0xCA, 0xC0, 0xFB, 0x3A, 0x8C, 0xB8, 0x3F, 
	0xFB, 0x37, 0xC5, 0x7D, 0x9B, 0x6F, 0xBC, 0xD5, 
	0x28, 0x79, 0x1E, 0xE5, 0x03, 0x4A, 0xDE, 0xA5, 
	0xD1, 0x14, 0x0E, 0x45, 0x40, 0x3D, 0xA1, 0x48, 
	0x28, 0x0A, 0xEA, 0x0D, 0xF5, 0x81, 0xA2, 0xA1, 
	0x7E, 0x50, 0x0C, 0x14, 0x0B, 0xC5, 0x41, 0xFD, 
	0xA1, 0x78, 0x28, 0x01, 0x4A, 0x84, 0x92, 0xA0, 
	0x41, 0x50, 0x32, 0x94, 0x02, 0xA5, 0x41, 0x83, 
	0xA1, 0x21, 0xD0, 0x50, 0x28, 0x03, 0xCA, 0x84, 
	0x86, 0x41, 0x59, 0xD0, 0x70, 0x68, 0x04, 0x34, 
	0x12, 0x1A, 0x05, 0x8D, 0x16, 0xB2, 0x4F, 0x8B, 
	0xD4, 0x06, 0x8C, 0x20, 0x3B, 0x5A, 0xFE, 0x8B, 
	0xB8, 0xFC, 0x5C, 0x9E, 0x7A, 0xAE, 0xBB, 0xCE, 
	0x86, 0xB5, 0x7D, 0x4E, 0xEE, 0x17, 0x57, 0xCD, 
	0x1E, 0x1D, 0xE7, 0x39, 0xB9, 0x36, 0xC3, 0xDF, 
	0xF7, 0xCD, 0xCB, 0x17, 0x18, 0xFE, 0x17, 0x18, 
	0xFE, 0x17, 0x18, 0xFE, 0x17, 0x18, 0xFE, 0x17, 
	0x18, 0xFE, 0x17, 0x18, 0xFE, 0x17, 0x18, 0xFE, 
	0x17, 0x18, 0xFE, 0x17, 0x18, 0xFE, 0x17, 0x18, 
	0xFE, 0x17, 0x18, 0xFE, 0x17, 0x18, 0xFE, 0x17, 
	0x18, 0xFE, 0x17, 0x18, 0xFE, 0x17, 0x18, 0xFE, 
	0x17, 0x18, 0xFE, 0x17, 0x18, 0xFE, 0x17, 0x18, 
	0xFE, 0x17, 0x18, 0xFE, 0x17, 0x18, 0xFE, 0x17, 
	0x18, 0xFE, 0x17, 0x18, 0xFE, 0x17, 0x18, 0xFE, 
	0x17, 0x18, 0xFE, 0x17, 0x18, 0xFE, 0x17, 0x18, 
	0xFE, 0x17, 0x18, 0xFE, 0x17, 0x18, 0xFE, 0x17, 
	0x18, 0xFE, 0x17, 0x18, 0xFE, 0x17, 0x18, 0xFE, 
	0x17, 0x18, 0xFE, 0x17, 0x18, 0xFE, 0x17, 0x18, 
	0xFE, 0x0E, 0xE5, 0x95, 0x68, 0x99, 0x4F, 0x5D, 
	0x67, 0xE3, 0xBA, 0xED, 0x68, 0xFE, 0xA5, 0x7A, 
	0x33, 0x9F, 0x8C, 0x85, 0x3A, 0xD2, 0x8C, 0x04, 
	0xA7, 0xAF, 0x73, 0x09, 0x7E, 0xF5, 0xB6, 0x4A, 
	0x60, 0x9E, 0x85, 0xF3, 0x7D, 0xA9, 0xE2, 0x54, 
	0xC9, 0x8B, 0xBE, 0x5F, 0xA2, 0xD0, 0x53, 0x7C, 
	0x3C, 0x34, 0x45, 0x28, 0xAF, 0x55, 0x37, 0xD3, 
	0x5F, 0x31, 0x6B, 0xBF, 0x29, 0x69, 0x05, 0x13, 
	0x76, 0x85, 0x92, 0xE7, 0x27, 0x57, 0x28, 0x79, 
	0x7E, 0x72, 0x85, 0x92, 0xE7, 0x27, 0x57, 0x30, 
	0xAD, 0x34, 0x0D, 0x84, 0x52, 0xA0, 0x54, 0x28, 
	0x0D, 0x4A, 0x87, 0xC6, 0x40, 0x63, 0xA1, 0x71, 
	0xD0, 0x78, 0x68, 0x02, 0x34, 0x11, 0x9A, 0x04, 
	0x4D, 0x86, 0xA6, 0x40, 0x53, 0xA1, 0x69, 0xD0, 
	0x74, 0x68, 0x06, 0x34, 0x13, 0x9A, 0x05, 0xCD, 
	0x86, 0xE6, 0x40, 0x73, 0x21, 0x37, 0x94, 0x0D, 
	0xCD, 0x83, 0x72, 0xA0, 0x5C, 0x68, 0x3E, 0xB4, 
	0x00, 0x5A, 0x08, 0xE5, 0x41, 0x8B, 0xA0, 0xC5, 
	0xD0, 0x12, 0x68, 0x29, 0xB4, 0x0C, 0xF2, 0x40, 
	0xCB, 0xA1, 0x15, 0xD0, 0x4A, 0x68, 0x95, 0x90, 
	0xFD, 0xC9, 0x5C, 0xFD, 0x35, 0x82, 0xF6, 0x5B, 
	0x1E, 0x7E, 0xAD, 0xE4, 0xE7, 0x1A, 0x7E, 0xE3, 
	0x50, 0x81, 0x19, 0x49, 0xBF, 0x55, 0x92, 0x53, 
	0xE7, 0x10, 0xDE, 0x39, 0xF2, 0x3A, 0x98, 0xF7, 
	0xAB, 0x00, 0x9D, 0x0E, 0xBF, 0x63, 0xE3, 0x4C, 
	0x19, 0x7A, 0xDE, 0x2C, 0xEB, 0x6C, 0xFC, 0xBD, 
	0x7C, 0x73, 0xD8, 0x07, 0x18, 0x53, 0xD1, 0x8C, 
	0x90, 0x68, 0xE2, 0x1D, 0x4D, 0x7C, 0xA2, 0xD1, 
	0x33, 0x1A, 0x15, 0xA3, 0x51, 0x31, 0x1A, 0x15, 
	0xA3, 0x51, 0x31, 0x1A, 0x15, 0xA3, 0x51, 0x31, 
	0x1A, 0x15, 0xA3, 0x51, 0x31, 0x1A, 0x15, 0xA3, 
	0x51, 0x2C, 0x1A, 0xC5, 0xA2, 0xC5, 0xF6, 0x7A, 
	0x1C, 0xFB, 0x83, 0xF8, 0xDA, 0x40, 0xD5, 0x1F, 
	0xB1, 0x6E, 0xB0, 0xB4, 0xFF, 0x20, 0x73, 0xFF, 
	0x4F, 0x52, 0xD5, 0x48, 0xD5, 0x9F, 0xF5, 0xD7, 
	0x99, 0xEA, 0xAA, 0x0F, 0x39, 0x55, 0xB7, 0x9A, 
	0xAA, 0xBF, 0x38, 0xB4, 0xD6, 0xE8, 0xFB, 0x57, 
	0x87, 0xB6, 0x19, 0xFA, 0x6F, 0x87, 0xB6, 0x1B, 
	0xFA, 0x1F, 0x87, 0x76, 0x18, 0xFA, 0x5F, 0x25, 
	0xE7, 0xBB, 0x11, 0xC8, 0x34, 0x16, 0x99, 0xC6, 
	0x62, 0xC8, 0x58, 0x64, 0x1A, 0x8B, 0x5B, 0x63, 
	0xE5, 0x6B, 0xCA, 0x3E, 0x4C, 0x1A, 0xFC, 0x77, 
	0xDF, 0x27, 0x78, 0x7B, 0xDE, 0x96, 0x0F, 0xF6, 
	0x9E, 0xC0, 0x8D, 0xF9, 0xDE, 0xBC, 0xEF, 0xED, 
	0x00, 0xB3, 0x12, 0x6A, 0x22, 0xB1, 0xEA, 0xB7, 
	0x0A, 0xC3, 0xA0, 0x70, 0x28, 0x02, 0xEA, 0x09, 
	0x45, 0x42, 0x51, 0x50, 0x6F, 0xA8, 0x0F, 0x14, 
	0x0D, 0xF5, 0x83, 0x62, 0xA0, 0x58, 0x28, 0x0E, 
	0xEA, 0x0F, 0xC5, 0x43, 0x09, 0x50, 0x22, 0x94, 
	0x04, 0x0D, 0x82, 0x92, 0xA1, 0x14, 0x28, 0x0D, 
	0x1A, 0x0C, 0x0D, 0x81, 0x86, 0x42, 0x19, 0x50, 
	0x26, 0x34, 0x0C, 0xCA, 0x82, 0x86, 0x43, 0x23, 
	0xA0, 0x91, 0xD0, 0x28, 0x68, 0xB4, 0x90, 0xBD, 
	0x09, 0xD2, 0xAC, 0xAE, 0xD7, 0x65, 0x80, 0x6F, 
	0x6C, 0x5E, 0xDB, 0x29, 0xFF, 0x6F, 0xC1, 0xC7, 
	0x97, 0x4D, 0x3C, 0x1F, 0xC1, 0xA1, 0xBF, 0x4B, 
	0x95, 0xF7, 0xFB, 0xA8, 0x9D, 0xAA, 0x7F, 0xC8, 
	0x4B, 0x11, 0x17, 0x19, 0x7B, 0x77, 0x29, 0x39, 
	0xA9, 0xDF, 0xA5, 0xE4, 0xA4, 0x7E, 0x97, 0x92, 
	0x93, 0xFA, 0x5D, 0x8C, 0x10, 0x4D, 0x03, 0xA1, 
	0x14, 0x28, 0x15, 0x4A, 0x83, 0xD2, 0xA1, 0x31, 
	0xD0, 0x58, 0x68, 0x1C, 0x34, 0x1E, 0x9A, 0x00, 
	0x4D, 0x84, 0x26, 0x41, 0x93, 0xA1, 0x29, 0xD0, 
	0x54, 0x68, 0x1A, 0x34, 0x1D, 0x9A, 0x01, 0xCD, 
	0x84, 0x66, 0x41, 0xB3, 0xA1, 0x39, 0xD0, 0x5C, 
	0xC8, 0x0D, 0x65, 0x43, 0xF3, 0xA0, 0x1C, 0x68, 
	0x29, 0xB4, 0x0C, 0xF2, 0x40, 0xCB, 0xA1, 0x15, 
	0xD0, 0x4A, 0x68, 0x95, 0x90, 0x8D, 0xD0, 0x25, 
	0x25, 0xDF, 0x2A, 0xF6, 0x4F, 0x89, 0x50, 0x0B, 
	0x11, 0xAA, 0x20, 0x42, 0x15, 0x44, 0xA8, 0x82, 
	0x08, 0x55, 0x10, 0xA1, 0x0A, 0x22, 0x54, 0x41, 
	0x84, 0x2A, 0x88, 0x50, 0x05, 0x11, 0xAA, 0x20, 
	0x42, 0x15, 0x44, 0xA8, 0x82, 0x08, 0x55, 0x10, 
	0xA1, 0x0A, 0x22, 0x54, 0x41, 0x84, 0x2A, 0x88, 
	0x50, 0x05, 0x11, 0xAA, 0x20, 0x42, 0x15, 0x44, 
	0xA8, 0x82, 0x08, 0x55, 0x10, 0xA1, 0x0A, 0x22, 
	0x54, 0x41, 0x84, 0x2A, 0x88, 0x50, 0x05, 0x11, 
	0xAA, 0x20, 0x42, 0x15, 0x44, 0xA8, 0x82, 0x08, 
	0x55, 0x10, 0xA1, 0x0A, 0x22, 0x54, 0x41, 0x84, 
	0x2A, 0x88, 0x50, 0x05, 0x11, 0xAA, 0x20, 0x42, 
	0x15, 0x44, 0xA8, 0x82, 0x08, 0x55, 0x10, 0xA1, 
	0x0A, 0x22, 0x54, 0x41, 0x84, 0x2A, 0x24, 0x42, 
	0x1F, 0x25, 0x42, 0xFF, 0x27, 0x55, 0xAD, 0x54, 
	0xFD, 0x4B, 0xAA, 0x3E, 0x46, 0x95, 0x72, 0x79, 
	0xAB, 0x3E, 0x4E, 0x95, 0xCB, 0xE5, 0x5D, 0x4B, 
	0x7C, 0x42, 0x49, 0xF2, 0x7E, 0x82, 0xE0, 0x3D, 
	0x21, 0xBB, 0xF8, 0x24, 0x1B, 0x1F, 0x94, 0xAA, 
	0x4F, 0xB1, 0x8B, 0x4E, 0xB2, 0x8B, 0x4F, 0x53, 
	0xA5, 0xCF, 0x22, 0xBC, 0x0B, 0x63, 0x5F, 0x3B, 
	0xFB, 0x8C, 0xBA, 0xBE, 0xCF, 0xF8, 0x9D, 0x5D, 
	0x37, 0xF4, 0x79, 0xDE, 0xCE, 0xDF, 0xCF, 0x32, 
	0x7F, 0xCB, 0x98, 0xBF, 0x65, 0xCC, 0xDF, 0x32, 
	0xE6, 0x6F, 0x19, 0x43, 0xA0, 0x8C, 0xF9, 0x5B, 
	0xC6, 0xFC, 0x2D, 0x63, 0xFE, 0x96, 0x31, 0x7F, 
	0xCB, 0x98, 0xBF, 0x65, 0xCC, 0xDF, 0x32, 0xE6, 
	0x6F, 0x19, 0xF3, 0xB7, 0x8C, 0xF9, 0x5B, 0xC6, 
	0xFC, 0x2D, 0x63, 0xFE, 0x96, 0x31, 0x7F, 0xCB, 
	0x98, 0xBF, 0x65, 0xCC, 0xDF, 0x32, 0xE6, 0x6F, 
	0x19, 0xF3, 0xB7, 0x8C, 0xF9, 0x5B, 0xC6, 0xFC, 
	0x2D, 0x63, 0xFE, 0x96, 0x31, 0x7F, 0xCB, 0x98, 
	0xBF, 0x65, 0xCC, 0xDF, 0x32, 0xE6, 0x6F, 0x19, 
	0xF3, 0xB7, 0x8C, 0xF9, 0x5B, 0xC6, 0xFC, 0x2D, 
	0x63, 0xFE, 0x96, 0x31, 0x7F, 0xCB, 0x98, 0xBF, 
	0x65, 0xCC, 0xDF, 0x32, 0xE6, 0x6F, 0x19, 0xF3, 
	0xB7, 0x8C, 0xF9, 0x5B, 0xC6, 0xFC, 0x2D, 0x93, 
	0xC5, 0x96, 0x7E, 0xB1, 0x2A, 0xDC, 0x8C, 0x48, 
	0xFD, 0x91, 0xD7, 0x95, 0x7F, 0x3C, 0x4E, 0x6F, 
	0x0D, 0x83, 0x22, 0xA0, 0x9E, 0x50, 0x24, 0x14, 
	0x05, 0xF5, 0x81, 0xA2, 0xA1, 0x18, 0x28, 0x16, 
	0x8A, 0x83, 0xFA, 0x43, 0xF1, 0x50, 0x02, 0x94, 
	0x08, 0x25, 0x41, 0x83, 0xA0, 0x64, 0x28, 0x05, 
	0x4A, 0x83, 0x06, 0x43, 0x43, 0xA0, 0xA1, 0x50, 
	0x06, 0x94, 0x09, 0x0D, 0x83, 0xB2, 0xA0, 0xE1, 
	0xD0, 0x08, 0x68, 0x24, 0x34, 0x0A, 0x1A, 0x2D, 
	0x64, 0x65, 0xFE, 0x5C, 0x88, 0x32, 0x1F, 0x43, 
	0xE6, 0x63, 0xC8, 0x7C, 0x0C, 0x99, 0x8F, 0x21, 
	0xB3, 0xEF, 0x47, 0x02, 0x8F, 0x21, 0xF3, 0x31, 
	0x64, 0x3E, 0x86, 0xCC, 0xC7, 0x90, 0xF9, 0x18, 
	0x32, 0x1F, 0x43, 0xE6, 0x63, 0xC8, 0x7C, 0x0C, 
	0x99, 0x8F, 0x21, 0xF3, 0x31, 0x64, 0x3E, 0x86, 
	0xCC, 0xC7, 0x90, 0xF9, 0x18, 0x32, 0x1F, 0x43, 
	0xE6, 0x63, 0xC8, 0x7C, 0x0C, 0x99, 0x8F, 0x21, 
	0xF3, 0x31, 0x64, 0x3E, 0x86, 0xCC, 0xC7, 0x90, 
	0xF9, 0x18, 0x32, 0x1F, 0x43, 0xE6, 0x63, 0xC8, 
	0x7C, 0x0C, 0x99, 0x8F, 0x21, 0xF3, 0x31, 0x64, 
	0x3E, 0x26, 0x3F, 0x66, 0xFB, 0x79, 0x75, 0xF9, 
	0x8F, 0xD9, 0xFA, 0x7E, 0xB3, 0x78, 0x1B, 0xA2, 
	0x6D, 0x43, 0xB4, 0x6D, 0x88, 0xB6, 0x0D, 0xD1, 
	0xB6, 0x21, 0xDA, 0x36, 0x44, 0xDB, 0x86, 0x68, 
	0xDB, 0x10, 0x6D, 0x1B, 0x52, 0x6D, 0x43, 0xA0, 
	0x6D, 0x08, 0xB4, 0x0D, 0x81, 0xB6, 0x21, 0xCB, 
	0x36, 0x24, 0xD8, 0x86, 0xE3, 0xDB, 0x70, 0x7C, 
	0x1B, 0x0E, 0x6D, 0x93, 0x17, 0x15, 0xBF, 0xA0, 
	0xDA, 0xFB, 0xA5, 0xCD, 0xDD, 0x38, 0xB9, 0x1B, 
	0x27, 0x77, 0xE3, 0xE4, 0x6E, 0x9C, 0xDC, 0x8D, 
	0x93, 0xBB, 0x71, 0x72, 0x37, 0x4E, 0xEE, 0xC6, 
	0xC9, 0xDD, 0x38, 0xB9, 0x1B, 0x27, 0x77, 0x33, 
	0x32, 0x76, 0xE3, 0xEE, 0x6E, 0x46, 0xC6, 0x6E, 
	0x1C, 0xDF, 0x8D, 0xE3, 0xBB, 0x71, 0x7C, 0x37, 
	0x8E, 0xEF, 0xC6, 0xF1, 0xDD, 0x38, 0xBE, 0x1B, 
	0xC7, 0x77, 0xE3, 0xF8, 0x6E, 0xF9, 0x15, 0xDF, 
	0x2F, 0xAA, 0xCB, 0x7F, 0xC5, 0x77, 0x07, 0x4E, 
	0xEE, 0xC0, 0xC9, 0x1D, 0x38, 0xB9, 0x03, 0x27, 
	0x77, 0xE0, 0xE4, 0x0E, 0x9C, 0xDC, 0x81, 0x93, 
	0x3B, 0x70, 0x72, 0x07, 0x4E, 0xEE, 0xC0, 0xB5, 
	0x1D, 0xB8, 0xB6, 0x03, 0xD7, 0x76, 0xE0, 0xDA, 
	0x0E, 0x5C, 0xDB, 0x81, 0x6B, 0x3B, 0x70, 0x6D, 
	0x07, 0xAE, 0xED, 0xC0, 0xB5, 0x1D, 0xB8, 0xB6, 
	0x43, 0x7E, 0x56, 0xFA, 0x4B, 0xEA, 0xF2, 0x9F, 
	0x95, 0xDE, 0x85, 0x6B, 0xBB, 0x70, 0x6D, 0x17, 
	0xAE, 0xED, 0xC2, 0xB5, 0x5D, 0xB8, 0xB6, 0x0B, 
	0xD7, 0x76, 0xE1, 0xDA, 0x2E, 0x5C, 0xDB, 0x85, 
	0x6B, 0xBB, 0x88, 0xDF, 0x2E, 0x9C, 0xDC, 0x85, 
	0x93, 0xBB, 0x70, 0x72, 0x17, 0x4E, 0xEE, 0xC2, 
	0xC9, 0x5D, 0x38, 0xB9, 0x0B, 0x27, 0x77, 0xE1, 
	0xE4, 0x2E, 0x9C, 0xDC, 0x85, 0x93, 0xBB, 0xE4, 
	0x45, 0xC0, 0x2F, 0xAB, 0xF6, 0x7E, 0x13, 0xEE, 
	0x10, 0x43, 0xF8, 0x10, 0x12, 0x1C, 0x42, 0x82, 
	0x43, 0x48, 0x70, 0x08, 0x09, 0x0E, 0x21, 0xC1, 
	0x21, 0x24, 0x38, 0x84, 0x04, 0x87, 0x90, 0xE0, 
	0x10, 0x12, 0x1C, 0x42, 0x82, 0x43, 0x48, 0x70, 
	0x08, 0x09, 0x0E, 0x21, 0xC1, 0x21, 0x24, 0x38, 
	0x84, 0x04, 0x87, 0x90, 0xE0, 0x10, 0x12, 0x1C, 
	0x22, 0xA5, 0x1D, 0x42, 0x8C, 0x43, 0x24, 0xB2, 
	0x43, 0xC8, 0x72, 0x08, 0x59, 0x0E, 0x91, 0xC8, 
	0x0E, 0x91, 0xC8, 0x0E, 0x91, 0xC8, 0x0E, 0x21, 
	0xDA, 0x21, 0x11, 0xED, 0x2B, 0xED, 0x8A, 0x76, 
	0x18, 0xD1, 0x0E, 0x23, 0xDA, 0x61, 0x44, 0x3B, 
	0x8C, 0x68, 0x87, 0x11, 0xED, 0x30, 0xA2, 0x1D, 
	0x46, 0xB4, 0xC3, 0x88, 0x76, 0x18, 0xD1, 0x0E, 
	0x23, 0xDA, 0x61, 0x44, 0x3B, 0x8C, 0x68, 0x87, 
	0x11, 0xED, 0x30, 0xA2, 0x1D, 0x46, 0xB4, 0xC3, 
	0x88, 0x76, 0x18, 0xD1, 0x0E, 0x23, 0xDA, 0x61, 
	0x44, 0x3B, 0x8C, 0x68, 0x87, 0x11, 0xED, 0x30, 
	0xA2, 0x1D, 0x46, 0xB4, 0xC3, 0x88, 0x76, 0x18, 
	0xD1, 0x0E, 0x23, 0xDA, 0x61, 0x44, 0x3B, 0x2C, 
	0xA2, 0x7D, 0xB5, 0x5D, 0xD1, 0x0E, 0x20, 0xDA, 
	0x01, 0x44, 0x3B, 0x80, 0x68, 0x07, 0x10, 0xED, 
	0x00, 0xA2, 0x1D, 0x40, 0xB4, 0x03, 0x88, 0x76, 
	0x00, 0xD1, 0x0E, 0x20, 0xDA, 0x01, 0x44, 0x3B, 
	0x80, 0x68, 0x07, 0x10, 0xED, 0x00, 0xA2, 0x1D, 
	0x40, 0xB4, 0x03, 0x88, 0x76, 0x00, 0xD1, 0x0E, 
	0x20, 0xDA, 0x01, 0x44, 0x3B, 0x80, 0x68, 0x07, 
	0x10, 0xED, 0x00, 0xA2, 0x1D, 0x40, 0xB4, 0x03, 
	0x88, 0x76, 0x00, 0xD1, 0x0E, 0x20, 0xDA, 0x01, 
	0x44, 0x3B, 0x80, 0x68, 0x07, 0x44, 0xB4, 0xAF, 
	0xB5, 0x2B, 0xDA, 0x41, 0x44, 0x3B, 0x88, 0x68, 
	0x07, 0x11, 0xED, 0x20, 0xA2, 0x1D, 0x44, 0xB4, 
	0x83, 0x88, 0x76, 0x10, 0xD1, 0x0E, 0x22, 0xDA, 
	0x41, 0x44, 0x3B, 0x88, 0x68, 0x07, 0x11, 0xED, 
	0x20, 0xA2, 0x1D, 0x44, 0xB4, 0x83, 0x88, 0x76, 
	0x10, 0xD1, 0x0E, 0x22, 0xDA, 0x41, 0x44, 0x3B, 
	0x88, 0x68, 0x07, 0x11, 0xED, 0x20, 0xA2, 0x1D, 
	0x44, 0xB4, 0x83, 0x88, 0x76, 0x10, 0xD1, 0x0E, 
	0x22, 0xDA, 0x41, 0x44, 0x3B, 0x88, 0x68, 0x07, 
	0x11, 0xED, 0xA0, 0xBC, 0xFD, 0xFD, 0x75, 0x75, 
	0xAD, 0xBF, 0x0B, 0xEE, 0x3B, 0x55, 0xEF, 0x43, 
	0xC8, 0x7D, 0x08, 0xB9, 0x0F, 0x21, 0xF7, 0x21, 
	0xE4, 0x3E, 0x84, 0xDC, 0x87, 0x90, 0xFB, 0x10, 
	0x72, 0x1F, 0x42, 0xEE, 0x43, 0xC8, 0x7D, 0x08, 
	0xB9, 0x0F, 0x21, 0xF7, 0x21, 0xE4, 0x3E, 0x84, 
	0xDC, 0x87, 0x90, 0xFB, 0x10, 0x72, 0x1F, 0x42, 
	0xEE, 0x43, 0xC8, 0x7D, 0xC8, 0xB7, 0x0F, 0xD1, 
	0xF6, 0x21, 0xDA, 0x3E, 0x44, 0xDB, 0x87, 0x40, 
	0xFB, 0x44, 0xA0, 0x6F, 0x5C, 0xB3, 0x40, 0x7B, 
	0x11, 0x68, 0x2F, 0x02, 0xED, 0x45, 0xA0, 0xBD, 
	0x08, 0xB4, 0x17, 0x81, 0xF6, 0x22, 0xD0, 0x5E, 
	0x04, 0xDA, 0x8B, 0x40, 0x7B, 0x11, 0x68, 0x2F, 
	0x02, 0xED, 0x45, 0xA0, 0xBD, 0x08, 0xB4, 0x17, 
	0x81, 0xF6, 0x22, 0xD0, 0x5E, 0x04, 0xDA, 0x8B, 
	0x40, 0x7B, 0x11, 0x68, 0x2F, 0x02, 0xED, 0x45, 
	0xA0, 0xBD, 0x08, 0xB4, 0x17, 0x81, 0xF6, 0x22, 
	0xD0, 0x5E, 0x04, 0xDA, 0x2B, 0xBF, 0x57, 0xF5, 
	0x4D, 0x1C, 0x7A, 0x11, 0x37, 0x5E, 0xC4, 0xE4, 
	0x17, 0x31, 0xF4, 0x45, 0xE9, 0xF0, 0x2D, 0x3A, 
	0x3C, 0x47, 0x87, 0xE7, 0xE8, 0xF0, 0x1C, 0x1D, 
	0x9E, 0x93, 0x0E, 0xDF, 0xA6, 0xC3, 0xF3, 0x74, 
	0x78, 0x9E, 0x0E, 0xCF, 0xD3, 0xE1, 0x79, 0xE9, 
	0xF0, 0x1D, 0x3A, 0xBC, 0x40, 0x87, 0x17, 0xE8, 
	0xF0, 0x02, 0x1D, 0x5E, 0x90, 0x0E, 0xDF, 0xA5, 
	0xC3, 0x4B, 0x74, 0x78, 0x89, 0x0E, 0x2F, 0xD1, 
	0xE1, 0x25, 0xE9, 0xF0, 0x3D, 0x3A, 0x3C, 0x43, 
	0x87, 0x67, 0xE8, 0xF0, 0x0C, 0x1D, 0x9E, 0x91, 
	0x0E, 0xDF, 0xA7, 0xC3, 0x2B, 0x74, 0x78, 0x85, 
	0x0E, 0xAF, 0xD0, 0xE1, 0x15, 0xE9, 0xF0, 0x03, 
	0x3A, 0x3C, 0x4D, 0x87, 0xA7, 0xE9, 0xF0, 0x34, 
	0x1D, 0x9E, 0x96, 0x0E, 0x3F, 0xA4, 0xC3, 0xB3, 
	0x74, 0x78, 0x96, 0x0E, 0xCF, 0xD2, 0xE1, 0x59, 
	0xE9, 0xF0, 0x23, 0x3A, 0xBC, 0x4C, 0x87, 0x97, 
	0xE9, 0xF0, 0x32, 0x1D, 0x5E, 0x96, 0x0B, 0x3E, 
	0xFD, 0xB8, 0xA5, 0xBD, 0xA4, 0x7B, 0x1F, 0x83, 
	0x5D, 0x53, 0x38, 0x14, 0x01, 0xF5, 0x84, 0x22, 
	0xA1, 0x28, 0xA8, 0x37, 0xD4, 0x07, 0x8A, 0x86, 
	0xFA, 0x41, 0x31, 0x50, 0x2C, 0x14, 0x07, 0xF5, 
	0x87, 0xE2, 0xA1, 0x04, 0x28, 0x11, 0x4A, 0x82, 
	0x06, 0x41, 0xC9, 0x50, 0x0A, 0x94, 0x06, 0x0D, 
	0x86, 0x86, 0x40, 0x43, 0xA1, 0x0C, 0x28, 0x13, 
	0x1A, 0x06, 0x65, 0x41, 0xC3, 0xA1, 0x11, 0xD0, 
	0x48, 0x68, 0x14, 0x34, 0x5A, 0xC8, 0xCA, 0xFC, 
	0x63, 0x64, 0x3E, 0x81, 0xCC, 0x27, 0x90, 0xF9, 
	0x04, 0x32, 0x9F, 0x40, 0xE6, 0x13, 0xC8, 0x7C, 
	0x02, 0x99, 0x4F, 0x20, 0xF3, 0x09, 0x64, 0x3E, 
	0x81, 0xCC, 0x27, 0x90, 0xF9, 0x04, 0x32, 0x9F, 
	0x40, 0xE6, 0x13, 0xC8, 0x7C, 0x02, 0x99, 0x4F, 
	0x20, 0xF3, 0x09, 0x64, 0x3E, 0x81, 0xCC, 0x27, 
	0x90, 0xF9, 0x04, 0x32, 0x9F, 0x40, 0xE6, 0x13, 
	0xC8, 0x7C, 0x02, 0x99, 0x4F, 0x20, 0xF3, 0x09, 
	0x64, 0x3E, 0x81, 0xCC, 0x27, 0x90, 0xF9, 0x04, 
	0x32, 0x9F, 0x40, 0xE6, 0x13, 0xC8, 0x7C, 0x02, 
	0x99, 0x4F, 0x20, 0xF3, 0x09, 0x64, 0x3E, 0x81, 
	0xCC, 0x27, 0x90, 0xF9, 0x84, 0xC8, 0xFC, 0x13, 
	0x64, 0xAE, 0x46, 0xE6, 0x6A, 0x64, 0xAE, 0x46, 
	0xE6, 0x6A, 0x64, 0xAE, 0x46, 0xE6, 0x6A, 0x64, 
	0xAE, 0x46, 0xE6, 0x6A, 0x64, 0xAE, 0x46, 0xE6, 
	0x6A, 0x64, 0xAE, 0x46, 0xE6, 0x6A, 0x64, 0xAE, 
	0x46, 0xE6, 0x6A, 0x64, 0xAE, 0x46, 0xE6, 0x6A, 
	0x64, 0xAE, 0x46, 0xE6, 0x6A, 0x64, 0xAE, 0x46, 
	0xE6, 0x6A, 0x64, 0xAE, 0x46, 0xE6, 0x6A, 0x64, 
	0xAE, 0x46, 0xE6, 0x6A, 0x64, 0xAE, 0x46, 0xE6, 
	0x6A, 0x64, 0xAE, 0x46, 0xE6, 0x6A, 0x64, 0xAE, 
	0x46, 0xE6, 0x6A, 0x64, 0xAE, 0x46, 0xE6, 0x6A, 
	0x64, 0xAE, 0x46, 0xE6, 0x6A, 0x64, 0xAE, 0x96, 
	0x1B, 0xDA, 0x3F, 0xB5, 0xEE, 0x3A, 0x67, 0xC8, 
	0x2E, 0x2E, 0x77, 0xDE, 0x62, 0x5D, 0xF5, 0x33, 
	0xAB, 0xA8, 0xCB, 0xFF, 0x3E, 0xC6, 0x16, 0x14, 
	0xDD, 0x82, 0x8E, 0x5B, 0xD0, 0x71, 0x0B, 0xEA, 
	0x6D, 0x41, 0xBD, 0x2D, 0xA8, 0xB7, 0x05, 0xF5, 
	0xB6, 0xA0, 0xDE, 0x16, 0x34, 0xDB, 0x82, 0x52, 
	0x5B, 0x50, 0x6A, 0x0B, 0x4A, 0x6D, 0x41, 0x9F, 
	0x2D, 0x68, 0xB1, 0x05, 0x05, 0xB6, 0xA0, 0xC0, 
	0x16, 0x3C, 0xDB, 0x22, 0x1F, 0xB6, 0xEB, 0x27, 
	0x0C, 0xDB, 0xFE, 0x26, 0x98, 0xA6, 0xEE, 0x50, 
	0x18, 0x14, 0x0E, 0x45, 0x40, 0x3D, 0xA1, 0x48, 
	0x28, 0x0A, 0xEA, 0x0D, 0xF5, 0x81, 0xA2, 0xA1, 
	0xBE, 0x50, 0x3F, 0x28, 0x06, 0x8A, 0x85, 0xE2, 
	0xA0, 0xFE, 0xD0, 0x00, 0x28, 0x1E, 0x4A, 0x80, 
	0x12, 0xA1, 0x24, 0x68, 0x10, 0x94, 0x0C, 0xA5, 
	0x40, 0x69, 0x50, 0x3A, 0x34, 0x18, 0x1A, 0x02, 
	0x0D, 0x85, 0x32, 0xA0, 0x4C, 0x68, 0x18, 0x94, 
	0x05, 0x0D, 0x87, 0x46, 0x40, 0x23, 0xA1, 0x51, 
	0xD0, 0x68, 0x21, 0x7B, 0x3B, 0xFE, 0xE7, 0x84, 
	0xA3, 0x89, 0x70, 0x34, 0x11, 0x8E, 0x26, 0xC2, 
	0xD1, 0x44, 0x38, 0x9A, 0x08, 0x47, 0x13, 0xE1, 
	0x68, 0x22, 0x1C, 0x4D, 0x84, 0xA3, 0x89, 0x70, 
	0xF8, 0x3E, 0x8A, 0x69, 0x22, 0x1C, 0x4D, 0x84, 
	0xA3, 0x89, 0x70, 0x34, 0x11, 0x8E, 0x26, 0xC2, 
	0xD1, 0x44, 0x38, 0x9A, 0x08, 0x47, 0x13, 0xE1, 
	0x68, 0x22, 0x1C, 0x4D, 0x84, 0xA3, 0x89, 0x70, 
	0x34, 0x11, 0x8E, 0x26, 0xC2, 0xD1, 0x44, 0x38, 
	0x9A, 0x08, 0x47, 0x13, 0xE1, 0x68, 0x22, 0x1C, 
	0x4D, 0x84, 0xA3, 0x89, 0x70, 0x34, 0x11, 0x8E, 
	0x26, 0xC2, 0xD1, 0x44, 0x38, 0x9A, 0x08, 0x47, 
	0x13, 0xE1, 0x68, 0x22, 0x1C, 0x4D, 0x84, 0xA3, 
	0x89, 0x70, 0x34, 0x11, 0x8E, 0x26, 0xC9, 0x00, 
	0xBF, 0xB0, 0xAE, 0x39, 0xF3, 0xA4, 0xAB, 0xCB, 
	0xFB, 0x80, 0xF9, 0x2F, 0x95, 0x7C, 0x6A, 0xB5, 
	0x45, 0xC9, 0xA7, 0x51, 0x5B, 0x89, 0x50, 0x15, 
	0x71, 0xA9, 0x22, 0x2E, 0x55, 0xC4, 0xA5, 0x8A, 
	0xB8, 0x54, 0x11, 0x8D, 0x2A, 0xA2, 0x51, 0x85, 
	0xF2, 0x55, 0x28, 0x5F, 0x85, 0xF2, 0x55, 0x28, 
	0x5F, 0x85, 0xDE, 0x55, 0xE8, 0x5D, 0x85, 0xDE, 
	0x55, 0xE8, 0x5D, 0x85, 0xDE, 0x55, 0xE8, 0x5D, 
	0x85, 0xDE, 0x55, 0x68, 0x5B, 0x85, 0xB6, 0x55, 
	0x68, 0x5B, 0x85, 0xB6, 0x55, 0x68, 0x5B, 0x85, 
	0xB6, 0x55, 0x68, 0x5B, 0x85, 0xB6, 0x55, 0x68, 
	0x5B, 0x85, 0xB6, 0x55, 0x68, 0x5B, 0x85, 0xB6, 
	0x55, 0xF2, 0xA4, 0xFE, 0xAF, 0xDA, 0x15, 0xF2, 
	0x28, 0x42, 0x1E, 0x45, 0xC8, 0xA3, 0x08, 0x79, 
	0x14, 0x21, 0x8F, 0x22, 0xE4, 0x51, 0x84, 0x3C, 
	0x8A, 0x90, 0x47, 0x11, 0xF2, 0x28, 0x42, 0x1E, 
	0x45, 0xC8, 0xA3, 0x08, 0x79, 0x14, 0x21, 0x8F, 
	0x22, 0xE4, 0x51, 0x84, 0x3C, 0x8A, 0x90, 0x47, 
	0x11, 0xF2, 0x28, 0x42, 0x1E, 0x45, 0xC8, 0xA3, 
	0x08, 0x79, 0x14, 0x21, 0x8F, 0x22, 0xE4, 0x51, 
	0x84, 0x3C, 0x8A, 0x90, 0x47, 0x11, 0xF2, 0x28, 
	0x42, 0x1E, 0x45, 0xC8, 0xA3, 0x08, 0x79, 0x14, 
	0x21, 0x8F, 0x22, 0xE4, 0x51, 0xF9, 0x1C, 0xF5, 
	0xD7, 0xEA, 0xFA, 0x7A, 0x72, 0xE4, 0x76, 0xF3, 
	0x09, 0x63, 0x37, 0x3E, 0x3D, 0xD5, 0x5F, 0xC7, 
	0x7E, 0xC3, 0x7D, 0x7A, 0xEA, 0x1D, 0x38, 0xF7, 
	0xCA, 0x4B, 0x3D, 0xBF, 0xB9, 0xCE, 0x82, 0xF0, 
	0x76, 0xBF, 0xD4, 0xD3, 0xDD, 0xF5, 0xCE, 0x7C, 
	0x48, 0x6D, 0x1E, 0x06, 0xFE, 0xAD, 0x92, 0x47, 
	0x3E, 0x7B, 0xB8, 0x64, 0x92, 0xCF, 0x62, 0x42, 
	0xCF, 0x92, 0xAB, 0xC2, 0xDF, 0xA9, 0xCB, 0xDF, 
	0xA5, 0x08, 0xF6, 0xF3, 0xD3, 0x61, 0x2E, 0xEF, 
	0xCC, 0xF9, 0xBD, 0x92, 0xB3, 0xED, 0x64, 0x25, 
	0x67, 0xDB, 0xC9, 0x4A, 0x3E, 0xFC, 0x9E, 0xAC, 
	0xE4, 0xC3, 0xEF, 0xC9, 0x1C, 0x4B, 0xD3, 0x40, 
	0x28, 0x05, 0x4A, 0x85, 0xD2, 0xA0, 0x74, 0x68, 
	0x0C, 0x34, 0x16, 0x1A, 0x07, 0x8D, 0x87, 0x26, 
	0x40, 0x13, 0xA1, 0x49, 0xD0, 0x64, 0x68, 0x0A, 
	0x34, 0x15, 0x9A, 0x06, 0xCD, 0x80, 0x66, 0x42, 
	0xB3, 0xA0, 0xD9, 0xD0, 0x1C, 0x68, 0x2E, 0xE4, 
	0x86, 0xB2, 0xA1, 0x79, 0x50, 0x0E, 0xB4, 0x14, 
	0x5A, 0x06, 0x79, 0xA0, 0xE5, 0xD0, 0x0A, 0x68, 
	0x25, 0xB4, 0x4A, 0xC8, 0x9E, 0x63, 0xFF, 0xC0, 
	0x48, 0x0F, 0x97, 0x87, 0x51, 0xFE, 0x48, 0x55, 
	0x84, 0x3C, 0x49, 0xF2, 0x27, 0x46, 0x77, 0x4F, 
	0x67, 0x08, 0x94, 0x99, 0x38, 0x46, 0xCA, 0xC6, 
	0x3F, 0x07, 0xD9, 0xD8, 0xCB, 0xE5, 0x7D, 0x72, 
	0xF8, 0x2F, 0xC8, 0x3E, 0x06, 0x99, 0xC6, 0xE0, 
	0xE0, 0x18, 0xDC, 0x1A, 0x83, 0x0B, 0x63, 0xE4, 
	0xB7, 0x22, 0xFE, 0xAA, 0x82, 0xFF, 0x56, 0x44, 
	0xB0, 0x5F, 0x88, 0xB0, 0xDF, 0xB3, 0x1C, 0xE5, 
	0x1C, 0x7F, 0x9F, 0xA1, 0xDE, 0x2E, 0x39, 0xC4, 
	0x78, 0x79, 0x38, 0x57, 0x3F, 0x3B, 0x6B, 0x1F, 
	0xCE, 0xED, 0xE3, 0x92, 0xF3, 0xD7, 0x28, 0x91, 
	0x41, 0x3F, 0x4E, 0x6B, 0xAB, 0x86, 0x4B, 0x95, 
	0xF7, 0xB9, 0x5A, 0xA7, 0x7D, 0xB4, 0xCB, 0x7B, 
	0xE5, 0xF7, 0x37, 0x46, 0xAC, 0x7E, 0x98, 0x37, 
	0x0C, 0x0A, 0x87, 0x22, 0xA0, 0x9E, 0x50, 0x24, 
	0x14, 0x05, 0xF5, 0x86, 0xFA, 0x40, 0xD1, 0x50, 
	0x3F, 0x28, 0x06, 0x8A, 0x85, 0xE2, 0xA0, 0xFE, 
	0x50, 0x3C, 0x94, 0x00, 0x25, 0x42, 0x49, 0xD0, 
	0x20, 0x28, 0x19, 0x4A, 0x81, 0xD2, 0xA0, 0xC1, 
	0xD0, 0x10, 0x68, 0x28, 0x94, 0x01, 0x65, 0x42, 
	0xC3, 0xA0, 0x2C, 0x68, 0x38, 0x34, 0x02, 0x1A, 
	0x09, 0x8D, 0x82, 0x46, 0x0B, 0xD9, 0xD7, 0xAD, 
	0xFE, 0xAE, 0xAE, 0xAF, 0x6C, 0x6E, 0x4F, 0xA4, 
	0x7D, 0x5D, 0x37, 0xE0, 0x89, 0xD4, 0x66, 0xE2, 
	0x7F, 0x5C, 0x67, 0x82, 0xDB, 0x35, 0x4C, 0xBF, 
	0x1B, 0x7C, 0x0D, 0x13, 0xC7, 0x1A, 0xE6, 0xC7, 
	0x3A, 0x08, 0xFF, 0xBC, 0x86, 0x20, 0xF8, 0x7E, 
	0xC9, 0xBE, 0xFD, 0x70, 0x8C, 0x33, 0x34, 0x2C, 
	0x20, 0x30, 0x93, 0x0C, 0x8D, 0x08, 0x08, 0xD1, 
	0x54, 0x43, 0x4E, 0x36, 0xD4, 0xA7, 0x2F, 0x87, 
	0x46, 0x07, 0x84, 0x6D, 0xB6, 0xA1, 0x71, 0xCA, 
	0x9C, 0xAA, 0x1C, 0x9A, 0x70, 0x85, 0x50, 0xCE, 
	0x33, 0x34, 0x49, 0x99, 0x13, 0x94, 0x8B, 0x13, 
	0xD4, 0x65, 0xE1, 0x5D, 0x61, 0x68, 0x9A, 0x92, 
	0xDF, 0x3B, 0x9B, 0xA1, 0xE4, 0xB7, 0xAC, 0x66, 
	0x3A, 0x54, 0x68, 0x48, 0x2F, 0x30, 0xD6, 0x18, 
	0x9A, 0xAD, 0x82, 0xFF, 0xBE, 0xD5, 0xDD, 0x86, 
	0xDC, 0x0C, 0x0D, 0xFD, 0x2D, 0xDF, 0xF7, 0x19, 
	0xCA, 0x71, 0xA8, 0xDC, 0x50, 0x8C, 0xAB, 0x63, 
	0x0E, 0x97, 0xDD, 0x86, 0x8A, 0xDA, 0x1D, 0x38, 
	0xF7, 0xCB, 0xFD, 0xC8, 0xFF, 0x53, 0x72, 0x56, 
	0xD2, 0x2F, 0x8F, 0x84, 0x41, 0xE1, 0x50, 0x04, 
	0xD4, 0x13, 0x8A, 0x84, 0xA2, 0xA0, 0xDE, 0x50, 
	0x1F, 0x28, 0x1A, 0xEA, 0x07, 0xC5, 0x40, 0xB1, 
	0x50, 0x1C, 0xD4, 0x1F, 0x8A, 0x87, 0x12, 0xA0, 
	0x44, 0x28, 0x09, 0x1A, 0x04, 0x25, 0x43, 0x29, 
	0x50, 0x1A, 0x34, 0x18, 0x1A, 0x02, 0x0D, 0x85, 
	0x32, 0xA0, 0x4C, 0x68, 0x18, 0x94, 0x05, 0x0D, 
	0x87, 0x46, 0x40, 0x23, 0xA1, 0x51, 0xD0, 0x68, 
	0x21, 0x2B, 0xF3, 0xBF, 0x90, 0xB9, 0x11, 0x99, 
	0x1B, 0x91, 0xB9, 0x11, 0x99, 0x1B, 0x91, 0xB9, 
	0x11, 0x99, 0x1B, 0x91, 0xB9, 0x11, 0x99, 0x1B, 
	0x91, 0xB9, 0x11, 0x99, 0x1B, 0x91, 0xB9, 0x11, 
	0x99, 0x1B, 0x91, 0xB9, 0x11, 0x99, 0x1B, 0x91, 
	0xB9, 0x11, 0x99, 0x1B, 0x91, 0xB9, 0x11, 0x99, 
	0x1B, 0x91, 0xB9, 0x11, 0x99, 0x1B, 0x91, 0xB9, 
	0x11, 0x99, 0x1B, 0x91, 0xB9, 0x11, 0x99, 0x1B, 
	0x91, 0xB9, 0x11, 0x99, 0x1B, 0x91, 0xB9, 0x11, 
	0x99, 0x1B, 0x91, 0xB9, 0x11, 0x99, 0x1B, 0x91, 
	0xB9, 0x11, 0x99, 0x1B, 0x91, 0xB9, 0x11, 0x99, 
	0x1B, 0x91, 0xB9, 0x51, 0x96, 0x5D, 0xCA, 0x25, 
	0xE9, 0x2D, 0xD6, 0xE5, 0xCD, 0x8C, 0x2E, 0xD7, 
	0xCD, 0xCC, 0xF8, 0x56, 0x67, 0xC6, 0x5B, 0x6E, 
	0xF0, 0xCC, 0x68, 0xEE, 0xE7, 0x76, 0x72, 0xC9, 
	0x94, 0x7D, 0x5C, 0xC9, 0x15, 0xE6, 0xE3, 0x4C, 
	0xDE, 0xC7, 0x99, 0xBC, 0x8F, 0x33, 0x79, 0x1F, 
	0x67, 0xF2, 0x3E, 0xCE, 0xE4, 0x7D, 0x9C, 0xC9, 
	0xFB, 0x38, 0x93, 0xF7, 0x71, 0x26, 0xEF, 0xE3, 
	0x4C, 0x5E, 0x4D, 0x7D, 0xA1, 0x7E, 0x50, 0x0C, 
	0x14, 0x0B, 0xC5, 0x41, 0xFD, 0xA1, 0x01, 0x50, 
	0x3C, 0x94, 0x00, 0x25, 0x42, 0x49, 0xD0, 0x20, 
	0x28, 0x19, 0x4A, 0x81, 0xD2, 0xA0, 0x74, 0x68, 
	0x30, 0x34, 0x04, 0x1A, 0x0A, 0x65, 0x40, 0x99, 
	0xD0, 0x30, 0x28, 0x0B, 0x1A, 0x0E, 0x8D, 0x80, 
	0x46, 0x42, 0xA3, 0xA0, 0xD1, 0x42, 0xF6, 0x0A, 
	0xAC, 0x33, 0xD7, 0x5D, 0x0F, 0x23, 0xC1, 0xC3, 
	0x72, 0x0B, 0xA7, 0xCB, 0x35, 0x4C, 0xF2, 0x77, 
	0x62, 0x0D, 0xFA, 0x76, 0xDF, 0xC2, 0x89, 0x7B, 
	0x87, 0x6E, 0xE1, 0x98, 0x89, 0xD0, 0x95, 0x89, 
	0xD0, 0xCC, 0x44, 0x68, 0x66, 0x22, 0x34, 0x33, 
	0x11, 0x9A, 0x99, 0x08, 0xCD, 0x4C, 0x84, 0x66, 
	0x26, 0x42, 0x33, 0x13, 0xA1, 0x99, 0x89, 0xD0, 
	0xCC, 0x44, 0x68, 0x66, 0x22, 0x34, 0x33, 0x11, 
	0x9A, 0x99, 0x08, 0xCD, 0x4C, 0x84, 0x66, 0x26, 
	0x42, 0x33, 0xA3, 0xA0, 0x99, 0x89, 0xD0, 0xCC, 
	0x44, 0x68, 0x66, 0x22, 0x34, 0x33, 0x11, 0x9A, 
	0x99, 0x08, 0xCD, 0x4C, 0x84, 0x66, 0x26, 0x42, 
	0x33, 0x13, 0xA1, 0x99, 0x89, 0xD0, 0xCC, 0x44, 
	0x68, 0x66, 0x22, 0x34, 0x33, 0x11, 0x9A, 0x99, 
	0x08, 0xCD, 0x4C, 0x84, 0x66, 0x26, 0x42, 0x33, 
	0x13, 0xA1, 0x99, 0x89, 0xD0, 0xCC, 0x44, 0x68, 
	0x66, 0x22, 0x34, 0x33, 0x11, 0x9A, 0x99, 0x08, 
	0xCD, 0x4C, 0x84, 0x66, 0x26, 0x42, 0xB3, 0x9C, 
	0xE3, 0xF4, 0xDD, 0x59, 0xFB, 0xC1, 0x46, 0x7F, 
	0xB9, 0x89, 0xD2, 0x9D, 0x5B, 0x6B, 0x73, 0x51, 
	0x65, 0xAE, 0x4C, 0x9C, 0x1E, 0x9C, 0x13, 0x07, 
	0x38, 0xF4, 0x80, 0x89, 0x6D, 0xBC, 0xDC, 0xAE, 
	0x09, 0x73, 0x49, 0x7B, 0xE7, 0x6C, 0x91, 0x37, 
	0x4F, 0x57, 0x85, 0xBB, 0xE4, 0x1D, 0xEA, 0xA1, 
	0x04, 0x45, 0xD3, 0x40, 0x68, 0x2C, 0x34, 0x0D, 
	0xCA, 0x86, 0x72, 0xA0, 0x5C, 0x68, 0x3E, 0xB4, 
	0x00, 0x5A, 0x08, 0xE5, 0x41, 0x8B, 0xA0, 0xC5, 
	0xD0, 0x12, 0xC8, 0x03, 0x2D, 0x17, 0xB2, 0x5E, 
	0x44, 0x70, 0xC3, 0x66, 0x88, 0xDC, 0x77, 0xD4, 
	0x77, 0x93, 0x6E, 0x31, 0x5E, 0x27, 0x30, 0x7C, 
	0x6F, 0x55, 0x72, 0x27, 0xEE, 0x56, 0x69, 0x16, 
	0x49, 0xE2, 0x48, 0x74, 0xC9, 0x94, 0x1F, 0xE8, 
	0xD0, 0x41, 0x23, 0x53, 0x92, 0xCB, 0xDB, 0xAC, 
	0x57, 0xBB, 0xCD, 0x06, 0x89, 0x9A, 0x51, 0xD8, 
	0x31, 0x4E, 0xD4, 0xF7, 0xDE, 0x4B, 0x0A, 0xB8, 
	0xB1, 0x99, 0xEC, 0xB4, 0x1F, 0xA2, 0x37, 0xEA, 
	0x7B, 0x49, 0xA1, 0xBC, 0xAF, 0x9D, 0xE2, 0x7A, 
	0x33, 0xEF, 0x66, 0x1B, 0xCB, 0xA3, 0x5D, 0xF2, 
	0x66, 0x66, 0xAA, 0xCB, 0x7F, 0x81, 0x63, 0x97, 
	0x03, 0x69, 0x62, 0x79, 0x5F, 0x97, 0xDC, 0xAF, 
	0x4A, 0x97, 0xAA, 0x7E, 0xF4, 0x1C, 0xEC, 0xF2, 
	0x66, 0x02, 0x7D, 0x45, 0x34, 0xDD, 0xA6, 0x4F, 
	0x44, 0x5D, 0x4D, 0x4E, 0x58, 0xAD, 0xE4, 0xF6, 
	0xEB, 0x6A, 0x25, 0xB7, 0x5F, 0x57, 0x33, 0x1E, 
	0x57, 0x33, 0x84, 0x56, 0x33, 0xBF, 0x56, 0x2B, 
	0xB9, 0xFD, 0xBA, 0x9A, 0x99, 0xB6, 0x9A, 0x99, 
	0xA6, 0x69, 0x0C, 0x34, 0x16, 0x1A, 0x07, 0x8D, 
	0x87, 0x26, 0x40, 0x13, 0xA1, 0x49, 0xD0, 0x64, 
	0x68, 0x0A, 0x34, 0x15, 0x9A, 0x06, 0xCD, 0x80, 
	0x66, 0x42, 0xB3, 0xA0, 0xD9, 0xD0, 0x1C, 0x68, 
	0x2E, 0xE4, 0x86, 0xB2, 0xA1, 0x79, 0x50, 0x0E, 
	0xB4, 0x14, 0x5A, 0x06, 0x79, 0xA0, 0xE5, 0xD0, 
	0x0A, 0x68, 0x25, 0xB4, 0x4A, 0xC8, 0xDE, 0x34, 
	0x77, 0xD6, 0xB8, 0x5A, 0x02, 0x7D, 0x0E, 0x73, 
	0x19, 0xD7, 0xF4, 0x39, 0xCC, 0xA1, 0x3B, 0x4C, 
	0x6C, 0x33, 0x5D, 0x22, 0xF3, 0x03, 0x92, 0xC9, 
	0x6F, 0x21, 0x6A, 0x6B, 0x88, 0xDA, 0x1A, 0xA2, 
	0xB6, 0x86, 0xA8, 0xAD, 0x21, 0x6A, 0x6B, 0x88, 
	0xDA, 0x1A, 0xA2, 0xB6, 0x86, 0xA8, 0xAD, 0x21, 
	0x6A, 0x6B, 0x88, 0xDA, 0x1A, 0xA2, 0xB6, 0x86, 
	0xA8, 0xAD, 0x21, 0x6A, 0x6B, 0x88, 0xDA, 0x1A, 
	0xA2, 0xB6, 0x86, 0xA8, 0xAD, 0x21, 0x6A, 0x6B, 
	0x88, 0xDA, 0x1A, 0xA2, 0xB6, 0x86, 0xA8, 0xAD, 
	0x21, 0x6A, 0x9A, 0xA6, 0x43, 0x33, 0xA0, 0x99, 
	0xD0, 0x2C, 0x68, 0x36, 0x34, 0x07, 0x9A, 0x0B, 
	0xB9, 0xA1, 0x6C, 0x68, 0x1E, 0x94, 0x03, 0x2D, 
	0x85, 0x96, 0x41, 0x1E, 0x68, 0x39, 0xB4, 0x02, 
	0x5A, 0x09, 0xAD, 0x12, 0xB2, 0xDF, 0x56, 0xA1, 
	0xCF, 0xE2, 0xF6, 0xE4, 0xE8, 0xFB, 0xE1, 0x31, 
	0x4D, 0x7D, 0xA0, 0x68, 0x28, 0x06, 0x8A, 0x85, 
	0xE2, 0xA0, 0x78, 0x28, 0x11, 0x4A, 0x86, 0x52, 
	0xA0, 0xC1, 0x50, 0x06, 0x34, 0x0C, 0xCA, 0x82, 
	0x46, 0x0B, 0xD9, 0xFB, 0xF0, 0xCE, 0x89, 0xC6, 
	0xEF, 0x1B, 0x3C, 0xEC, 0xF7, 0x76, 0x0C, 0xE3, 
	0x9C, 0x33, 0x1F, 0x53, 0xE6, 0xB3, 0x3B, 0x87, 
	0xEC, 0x6F, 0x9E, 0x0E, 0xB8, 0xE6, 0xCB, 0x2F, 
	0xDD, 0xE3, 0x9D, 0x5D, 0xA3, 0xDD, 0x63, 0x28, 
	0x8B, 0xB3, 0xE3, 0xF0, 0x2B, 0x5C, 0xDE, 0xFC, 
	0xFB, 0xEB, 0xB6, 0x11, 0xEF, 0xD0, 0xBA, 0xCD, 
	0x9C, 0x7A, 0xE2, 0x89, 0xD0, 0x6C, 0x22, 0x34, 
	0x5B, 0x36, 0x26, 0x04, 0x39, 0x2F, 0x8D, 0x94, 
	0xD4, 0xEF, 0x3B, 0xC9, 0x8D, 0x92, 0xAA, 0x81, 
	0x2E, 0xF9, 0x00, 0x64, 0xB4, 0x9C, 0xBD, 0x92, 
	0x08, 0xED, 0x98, 0x80, 0x53, 0x8B, 0xED, 0x39, 
	0x36, 0xE0, 0x00, 0xF6, 0x74, 0x33, 0xCE, 0xA9, 
	0xDB, 0x60, 0x68, 0x3C, 0xF7, 0xC3, 0x27, 0x38, 
	0xB4, 0xCB, 0xD0, 0x44, 0x87, 0xDE, 0x6B, 0xE8, 
	0x56, 0x39, 0xEA, 0x20, 0x0C, 0x99, 0x24, 0x6B, 
	0x9D, 0x64, 0xAE, 0x03, 0x46, 0x33, 0x41, 0x46, 
	0xCB, 0x42, 0x20, 0x85, 0x8D, 0x23, 0x65, 0x92, 
	0xA5, 0xB2, 0x9C, 0xE9, 0x4B, 0x2E, 0xEB, 0x4B, 
	0x66, 0xEA, 0x4B, 0x26, 0xE9, 0xCB, 0xCC, 0xEF, 
	0xCB, 0x7C, 0xD7, 0x94, 0x0B, 0xCD, 0x87, 0x16, 
	0x40, 0x0B, 0xA1, 0x3C, 0x68, 0x11, 0xB4, 0x18, 
	0x5A, 0x02, 0x79, 0xA0, 0xE5, 0x42, 0xD6, 0xD0, 
	0x34, 0x0C, 0xED, 0x87, 0xA1, 0xFD, 0x30, 0xB4, 
	0x1F, 0x86, 0xF6, 0xC3, 0xD0, 0x7E, 0x18, 0xDA, 
	0x0F, 0x43, 0xFB, 0x61, 0x68, 0x3F, 0x0C, 0xED, 
	0x87, 0xA1, 0xFD, 0x30, 0xB4, 0x1F, 0x86, 0xF6, 
	0xC3, 0xD0, 0x7E, 0x18, 0xDA, 0x0F, 0x43, 0xFB, 
	0x61, 0x68, 0x3F, 0x11, 0x39, 0x9D, 0x85, 0xC1, 
	0x64, 0x59, 0x18, 0x0C, 0xBE, 0xCE, 0xAE, 0xBF, 
	0xEC, 0x6D, 0x8F, 0x29, 0xAE, 0xE0, 0xB7, 0x38, 
	0x6E, 0xBC, 0x4F, 0x03, 0xEC, 0x98, 0xBF, 0x5F, 
	0x3E, 0x0D, 0x18, 0x72, 0xF3, 0x9E, 0xD7, 0x5B, 
	0x7E, 0xCF, 0x6B, 0xEA, 0x0D, 0x7E, 0xCF, 0xCB, 
	0x7C, 0x6A, 0xAE, 0xD7, 0x91, 0x76, 0x68, 0x4C, 
	0x73, 0x85, 0x3E, 0x17, 0x7D, 0xE1, 0xB0, 0x3B, 
	0x9E, 0x2E, 0xE9, 0x5B, 0x2F, 0x46, 0xED, 0x53, 
	0xB8, 0x33, 0xA4, 0xCA, 0xBB, 0x2A, 0x75, 0xAA, 
	0x66, 0xCA, 0xC5, 0x95, 0x6F, 0x25, 0xB1, 0x00, 
	0x8B, 0x34, 0x0D, 0x13, 0xB2, 0x3D, 0xB3, 0xE8, 
	0x39, 0x4B, 0xCE, 0x05, 0xC3, 0x39, 0x29, 0xCD, 
	0x66, 0xB1, 0x9B, 0x2B, 0x67, 0xB8, 0x11, 0x6C, 
	0x9C, 0xC3, 0xC6, 0x1C, 0xD9, 0x38, 0x92, 0x95, 
	0xF0, 0x24, 0x25, 0x2B, 0xCD, 0x49, 0x72, 0xA4, 
	0x51, 0xF4, 0x9C, 0xEB, 0xF2, 0x2E, 0xB5, 0x47, 
	0xD3, 0x7E, 0x02, 0xC9, 0x79, 0x02, 0x3D, 0x27, 
	0x90, 0x92, 0x27, 0x48, 0x36, 0x1F, 0x43, 0x36, 
	0x4F, 0xA7, 0x43, 0x3A, 0xD9, 0x3C, 0x9D, 0x6C, 
	0x9E, 0x4E, 0xD7, 0x74, 0xB2, 0x79, 0x3A, 0xD9, 
	0x3C, 0x9D, 0x6C, 0x9E, 0x4E, 0x36, 0x4F, 0x27, 
	0x9B, 0xA7, 0x93, 0xCD, 0xD3, 0xC9, 0xE6, 0xE9, 
	0x64, 0xF3, 0x74, 0xB2, 0x79, 0x3A, 0xD9, 0x3C, 
	0x9D, 0x6C, 0x9E, 0x2E, 0x4A, 0x8C, 0xC5, 0x59, 
	0x37, 0xD1, 0xCA, 0x76, 0x79, 0xBD, 0x18, 0x87, 
	0x17, 0x69, 0x78, 0x91, 0x86, 0x17, 0x69, 0x78, 
	0x91, 0x86, 0x17, 0x69, 0x78, 0x91, 0x86, 0x17, 
	0x69, 0x78, 0x91, 0x86, 0x17, 0x69, 0x78, 0x91, 
	0x86, 0x17, 0x69, 0x78, 0x91, 0x86, 0x17, 0x69, 
	0x78, 0x91, 0x86, 0x17, 0x69, 0x78, 0x91, 0x26, 
	0x72, 0x8F, 0xC7, 0xD0, 0x81, 0x18, 0x3A, 0x10, 
	0x43, 0x07, 0x62, 0xE8, 0x40, 0x0C, 0x1D, 0x88, 
	0xA1, 0x03, 0x31, 0x74, 0x20, 0x86, 0x0E, 0xC4, 
	0xD0, 0x81, 0x18, 0x3A, 0x10, 0x43, 0x07, 0x62, 
	0xE8, 0x40, 0x0C, 0x1D, 0x88, 0xA1, 0x03, 0x31, 
	0x74, 0x20, 0x86, 0x0E, 0x94, 0xBB, 0x2B, 0x13, 
	0xB8, 0x2F, 0x31, 0x0F, 0x93, 0x53, 0x30, 0x39, 
	0x05, 0x93, 0x53, 0x30, 0x39, 0x05, 0x93, 0x53, 
	0x30, 0x39, 0x05, 0x93, 0x53, 0x30, 0x39, 0x05, 
	0x93, 0x53, 0x30, 0x39, 0x05, 0x93, 0x53, 0x30, 
	0x39, 0x05, 0x93, 0x53, 0x30, 0x39, 0x05, 0x93, 
	0x53, 0x30, 0x39, 0x45, 0x4C, 0x9E, 0xC8, 0x08, 
	0xC9, 0xC1, 0xE4, 0x4C, 0x4C, 0xCE, 0xC4, 0xE4, 
	0x4C, 0x4C, 0xCE, 0xC4, 0xE4, 0x4C, 0x4C, 0xCE, 
	0xC4, 0xE4, 0x4C, 0x4C, 0xCE, 0xC4, 0xE4, 0x4C, 
	0x4C, 0xCE, 0xC4, 0xE4, 0x4C, 0x4C, 0xCE, 0xC4, 
	0xE4, 0x4C, 0x4C, 0xCE, 0xC4, 0xE4, 0x4C, 0x4C, 
	0xCE, 0x94, 0xE1, 0x70, 0x2B, 0x86, 0x26, 0x63, 
	0x68, 0x32, 0x86, 0x26, 0x63, 0x68, 0x32, 0x86, 
	0x26, 0x63, 0x68, 0x32, 0x86, 0x26, 0x63, 0x68, 
	0x32, 0x86, 0x26, 0x63, 0x68, 0x32, 0x86, 0x26, 
	0x63, 0x68, 0x32, 0x86, 0x26, 0x63, 0x68, 0x32, 
	0x86, 0x26, 0x63, 0x68, 0xB2, 0xA4, 0x9A, 0x49, 
	0x68, 0x9B, 0x2B, 0x6B, 0xA9, 0xC9, 0xA4, 0x9A, 
	0x3B, 0x94, 0x5C, 0xA4, 0x6B, 0xEA, 0x01, 0xF5, 
	0x82, 0xE2, 0xA0, 0x81, 0x50, 0x0A, 0x94, 0x0A, 
	0xA5, 0x41, 0xE9, 0xD0, 0x18, 0x68, 0x2C, 0x34, 
	0x0E, 0x1A, 0x0F, 0x4D, 0x80, 0x26, 0x42, 0x93, 
	0xA0, 0xC9, 0xD0, 0x14, 0x68, 0x2A, 0x34, 0x0D, 
	0x9A, 0x0E, 0xCD, 0x80, 0x66, 0x42, 0xB3, 0xA0, 
	0xD9, 0xD0, 0x1C, 0x68, 0x2E, 0xE4, 0x86, 0xB2, 
	0xA1, 0x79, 0x50, 0x0E, 0xB4, 0x14, 0x5A, 0x06, 
	0x79, 0xA0, 0xE5, 0xD0, 0x0A, 0x68, 0x25, 0xB4, 
	0x4A, 0xC8, 0x46, 0x68, 0x0A, 0x77, 0xC6, 0xE6, 
	0x4B, 0x84, 0xA6, 0x12, 0xA1, 0x22, 0x22, 0x54, 
	0x44, 0x84, 0x8A, 0x88, 0x50, 0x11, 0x11, 0x2A, 
	0x22, 0x42, 0x45, 0x44, 0xA8, 0x88, 0x08, 0x15, 
	0x11, 0xA1, 0x22, 0x22, 0x54, 0x44, 0x84, 0x8A, 
	0x88, 0x50, 0x11, 0x11, 0x2A, 0x22, 0x42, 0x45, 
	0x44, 0xA8, 0x88, 0x08, 0x15, 0x11, 0xA1, 0x22, 
	0x22, 0x54, 0x44, 0x84, 0x8A, 0x88, 0x50, 0x11, 
	0x11, 0x2A, 0x22, 0x42, 0x45, 0x44, 0xA8, 0x88, 
	0x08, 0x15, 0x11, 0xA1, 0x22, 0x22, 0x54, 0x44, 
	0x84, 0x8A, 0x88, 0x50, 0x11, 0x11, 0x2A, 0x22, 
	0x42, 0x45, 0x44, 0xA8, 0x88, 0x08, 0x15, 0x11, 
	0xA1, 0x22, 0x22, 0x54, 0x44, 0x84, 0x8A, 0x88, 
	0x50, 0x11, 0x11, 0x2A, 0x22, 0x42, 0x45, 0x44, 
	0xA8, 0x48, 0x9E, 0xF8, 0x9A, 0x76, 0x9D, 0x5D, 
	0x7C, 0xD8, 0x15, 0xE6, 0x03, 0xEA, 0x06, 0xBC, 
	0xD0, 0xB0, 0x53, 0x62, 0x3A, 0x0B, 0x85, 0x05, 
	0xCE, 0x94, 0x18, 0xE9, 0x72, 0xAA, 0x66, 0xBC, 
	0x0D, 0x57, 0x1C, 0x63, 0x0C, 0x79, 0xCF, 0x2F, 
	0x2E, 0x1D, 0x73, 0xFF, 0xAB, 0x90, 0x09, 0x86, 
	0xB2, 0x54, 0xE8, 0xD7, 0x23, 0xBE, 0x87, 0x40, 
	0x7D, 0x57, 0x26, 0x33, 0xED, 0xFD, 0x0B, 0x15, 
	0xFC, 0x1A, 0x65, 0x8E, 0xA1, 0xF1, 0x2A, 0xF4, 
	0xAB, 0x15, 0xDF, 0xE3, 0xA5, 0xC1, 0xAE, 0x5B, 
	0x7C, 0x8F, 0x9C, 0x06, 0xBB, 0x82, 0x59, 0x69, 
	0x68, 0xBA, 0x7A, 0x6B, 0xAF, 0x65, 0xB2, 0x1D, 
	0xBA, 0xD7, 0xD0, 0x3C, 0xE5, 0x7F, 0x55, 0xB3, 
	0xC9, 0x90, 0xB3, 0x5A, 0xF6, 0x5E, 0xDF, 0xCC, 
	0xEF, 0xA0, 0xA3, 0x34, 0xD8, 0xF5, 0x8D, 0x7D, 
	0xA0, 0xF7, 0x76, 0x87, 0x0E, 0x19, 0xD2, 0x69, 
	0xFD, 0xB0, 0xF5, 0xC8, 0x19, 0xA7, 0x47, 0x0C, 
	0xAD, 0xF3, 0x1F, 0xD7, 0xB9, 0xAF, 0x19, 0x2A, 
	0x56, 0x92, 0x9C, 0xB5, 0x2D, 0xE3, 0xA1, 0x29, 
	0x50, 0x9B, 0x67, 0x04, 0x66, 0x72, 0x26, 0x58, 
	0xAB, 0xE4, 0x4C, 0xB0, 0x56, 0xC9, 0x99, 0x60, 
	0xAD, 0x92, 0x33, 0xC1, 0x5A, 0xBA, 0xAE, 0x55, 
	0x72, 0x26, 0x58, 0xCB, 0xC1, 0xD6, 0x2A, 0x39, 
	0x13, 0xAC, 0x55, 0x72, 0x26, 0x58, 0xAB, 0xE4, 
	0x4C, 0xB0, 0x56, 0xC9, 0x99, 0x60, 0xAD, 0x92, 
	0x33, 0xC1, 0x5A, 0x25, 0x67, 0x82, 0xB5, 0x18, 
	0xBA, 0x56, 0xC9, 0x99, 0x60, 0xAD, 0x92, 0x33, 
	0xC1, 0x5A, 0x25, 0x67, 0x82, 0xB5, 0x4A, 0xCE, 
	0x04, 0x6B, 0x71, 0x68, 0xAD, 0x92, 0x33, 0xC1, 
	0x5A, 0x25, 0x67, 0x02, 0x4D, 0xD3, 0xA1, 0x19, 
	0xD0, 0x4C, 0x68, 0x16, 0x34, 0x1B, 0x9A, 0x03, 
	0xCD, 0x85, 0xDC, 0x50, 0x36, 0x34, 0x0F, 0xCA, 
	0x81, 0x96, 0x42, 0xCB, 0x20, 0x0F, 0xB4, 0x1C, 
	0x5A, 0x01, 0xAD, 0x84, 0x56, 0x09, 0xD9, 0x2B, 
	0xC9, 0x59, 0x5C, 0x49, 0xBA, 0x11, 0xDC, 0x8D, 
	0xCC, 0x6E, 0xB9, 0x27, 0x3D, 0xBB, 0xC3, 0xDC, 
	0x93, 0xCE, 0xBB, 0x81, 0xEE, 0x49, 0x1B, 0xE9, 
	0xE7, 0x74, 0x18, 0xE9, 0x17, 0xDD, 0x40, 0xD2, 
	0x9B, 0x5B, 0x18, 0x73, 0xC9, 0x55, 0x13, 0xC9, 
	0x41, 0x13, 0xC9, 0x0A, 0x13, 0x99, 0xA7, 0x13, 
	0x65, 0x36, 0xB9, 0xB9, 0xF9, 0xBE, 0xD8, 0x25, 
	0x4A, 0x45, 0x39, 0xCD, 0xEE, 0xB7, 0x3E, 0xCA, 
	0x4D, 0x98, 0x6C, 0x42, 0xBA, 0x94, 0x0E, 0xCB, 
	0x64, 0xE3, 0xBC, 0x20, 0x1F, 0x33, 0x78, 0xE4, 
	0xC6, 0x4F, 0x0E, 0xED, 0x97, 0x07, 0xF9, 0x10, 
	0x60, 0x85, 0xDC, 0x32, 0xCA, 0xA5, 0xD9, 0x4A, 
	0x79, 0xA8, 0x6F, 0xFE, 0xCD, 0x1B, 0x9C, 0x6F, 
	0xF9, 0x0D, 0xCE, 0x55, 0x37, 0xF8, 0x0D, 0x4E, 
	0xB3, 0x4E, 0x5D, 0x70, 0x73, 0x9D, 0x7A, 0x73, 
	0x9D, 0x7A, 0xDD, 0x0C, 0xD3, 0x2B, 0xAF, 0x53, 
	0xF3, 0xDF, 0xB2, 0x75, 0xAA, 0xC9, 0xFD, 0x0B, 
	0xDB, 0x7D, 0x52, 0xA4, 0x20, 0xE0, 0x49, 0x11, 
	0x93, 0x73, 0xF3, 0xA8, 0x9A, 0x27, 0x55, 0x8B, 
	0xA8, 0xCA, 0x96, 0xAA, 0xC5, 0xDC, 0xBD, 0x2A, 
	0x94, 0x3B, 0xC6, 0x4B, 0xB8, 0xF3, 0x36, 0x48, 
	0xC9, 0x59, 0x66, 0x90, 0x92, 0x75, 0xEB, 0x20, 
	0x25, 0xEB, 0xCC, 0x41, 0x4A, 0xCE, 0x37, 0x83, 
	0x94, 0xAC, 0x06, 0x35, 0xE5, 0x42, 0xF3, 0xA1, 
	0x05, 0xD0, 0x42, 0x28, 0x0F, 0x5A, 0x04, 0x2D, 
	0x86, 0x96, 0x40, 0x1E, 0x68, 0xB9, 0x90, 0xB5, 
	0xDD, 0x77, 0xB2, 0xBA, 0xCD, 0xE5, 0xBD, 0xD1, 
	0xB9, 0x0C, 0xDB, 0xF5, 0xC4, 0x8D, 0x86, 0x06, 
	0x42, 0x63, 0xA1, 0x69, 0x50, 0x36, 0x94, 0x03, 
	0xE5, 0x42, 0xF3, 0xA1, 0x05, 0xD0, 0x42, 0x28, 
	0x0F, 0x5A, 0x04, 0x2D, 0x86, 0x96, 0x40, 0x1E, 
	0x68, 0xB9, 0x90, 0x95, 0xDB, 0x83, 0xC9, 0xA9, 
	0x18, 0x9A, 0x8A, 0xA1, 0xA9, 0x18, 0x9A, 0x8A, 
	0xA1, 0xA9, 0x18, 0x9A, 0x8A, 0xA1, 0xA9, 0x18, 
	0x9A, 0x8A, 0xA1, 0xA9, 0x18, 0x9A, 0x8A, 0xA1, 
	0xA9, 0x18, 0x9A, 0x8A, 0xA1, 0xA9, 0x18, 0x9A, 
	0x8A, 0xA1, 0xA9, 0x18, 0x9A, 0x2A, 0x72, 0x2F, 
	0xBF, 0xFC, 0xC3, 0x85, 0x15, 0xD8, 0x9E, 0x81, 
	0xED, 0x19, 0xD8, 0x9E, 0x81, 0xED, 0x19, 0xD8, 
	0x9E, 0x81, 0xED, 0x19, 0xD8, 0x9E, 0x81, 0xED, 
	0x19, 0xD8, 0x9E, 0x81, 0xED, 0x19, 0xD8, 0x9E, 
	0x81, 0xED, 0x19, 0xD8, 0x9E, 0x81, 0xED, 0x19, 
	0xD8, 0x9E, 0x81, 0xED, 0x19, 0x62, 0xFB, 0x4A, 
	0x86, 0xF9, 0x6A, 0xB9, 0x05, 0xB8, 0x8A, 0xC5, 
	0x94, 0x9E, 0xBD, 0xDD, 0xA1, 0x1E, 0x50, 0x2F, 
	0x28, 0x0E, 0x1A, 0x08, 0xA5, 0x40, 0xA9, 0x50, 
	0x1A, 0x94, 0x0E, 0x8D, 0x81, 0xC6, 0x42, 0xE3, 
	0xA0, 0xF1, 0xD0, 0x04, 0x68, 0x22, 0x34, 0x09, 
	0x9A, 0x0C, 0x4D, 0x81, 0xA6, 0x42, 0xD3, 0xA0, 
	0xE9, 0xD0, 0x0C, 0x68, 0x26, 0x34, 0x0B, 0x9A, 
	0x0D, 0xCD, 0x81, 0xE6, 0x42, 0x6E, 0x28, 0x1B, 
	0x9A, 0x07, 0xE5, 0x40, 0x4B, 0xA1, 0x65, 0x90, 
	0x07, 0x5A, 0x0E, 0xAD, 0x80, 0x56, 0x42, 0xAB, 
	0x84, 0x6C, 0x7E, 0xCB, 0x6F, 0x37, 0xBF, 0x15, 
	0x5D, 0x9E, 0xDF, 0x7C, 0x29, 0x6F, 0x93, 0x53, 
	0x15, 0xAF, 0xAB, 0x0A, 0xAF, 0xF0, 0x38, 0xCB, 
	0x95, 0x1F, 0x62, 0x59, 0xE3, 0xFF, 0x10, 0x8B, 
	0x4D, 0x21, 0xB7, 0x31, 0xA6, 0xB3, 0x48, 0x21, 
	0x59, 0x44, 0x3E, 0x8B, 0x38, 0x66, 0xA1, 0x7B, 
	0x16, 0x3A, 0x65, 0xA1, 0x4E, 0x16, 0xA3, 0x3B, 
	0x8B, 0xD1, 0x9D, 0xC5, 0xE8, 0xCE, 0x62, 0x74, 
	0x67, 0x31, 0xBA, 0xB3, 0x18, 0xDD, 0x59, 0x8C, 
	0xEE, 0x2C, 0x46, 0x77, 0x16, 0xCA, 0x66, 0xA1, 
	0x6C, 0x96, 0x48, 0xB1, 0x9A, 0x44, 0x78, 0xBB, 
	0xAC, 0xB8, 0x7D, 0x82, 0x6D, 0x94, 0x44, 0xB3, 
	0x06, 0xC7, 0x12, 0x71, 0x27, 0x11, 0x77, 0x12, 
	0x71, 0x27, 0x11, 0x77, 0x12, 0x71, 0x27, 0x11, 
	0x77, 0x12, 0x71, 0x27, 0x11, 0x77, 0x12, 0x71, 
	0x27, 0x11, 0x77, 0x12, 0x71, 0x27, 0x11, 0x77, 
	0x12, 0x71, 0x27, 0x11, 0x77, 0x12, 0x71, 0x27, 
	0x51, 0xDC, 0xB9, 0x9D, 0xC9, 0x7A, 0x87, 0xCB, 
	0x1B, 0xD9, 0x3B, 0xAE, 0x39, 0xB2, 0x6B, 0x03, 
	0x22, 0x6B, 0x04, 0x58, 0x8B, 0x00, 0x49, 0x08, 
	0x90, 0x84, 0x00, 0x49, 0x08, 0x90, 0x84, 0x00, 
	0x49, 0x08, 0x90, 0x84, 0x00, 0x49, 0x08, 0x90, 
	0x84, 0x00, 0x49, 0x08, 0x90, 0x84, 0x00, 0x49, 
	0x08, 0x90, 0x84, 0x00, 0x49, 0x08, 0x90, 0x84, 
	0x00, 0x49, 0x08, 0xE0, 0xD0, 0xFF, 0x03, 0x83, 
	0x4E, 0x57, 0x30
};


//!! move to zlib wrapper
#include <zlib.h>

int zlib_decode(unsigned char *dest, unsigned long& destLen, const unsigned char* source, unsigned long sourceLen)
{
	z_stream stream;
	int err;

	stream.next_in = (Bytef*)source;
	stream.avail_in = (uInt)sourceLen;
	// Check for source > 64K on 16-bit machine:
	if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;

	stream.next_out = (Bytef*) dest;
	stream.avail_out = (uInt)destLen;
	if ((unsigned long)stream.avail_out != destLen) return Z_BUF_ERROR;

	stream.zalloc = (alloc_func)0;
	stream.zfree = (free_func)0;

	err = inflateInit(&stream);
	if (err != Z_OK) return err;

	err = inflate(&stream, Z_FINISH);
	if (err != Z_STREAM_END) {
		inflateEnd(&stream);
		return err == Z_OK ? Z_BUF_ERROR : err;
	}
	destLen = stream.total_out;

	err = inflateEnd(&stream);
	return err;
}

int zlib_encode(unsigned char *dest, unsigned long& destLen, const unsigned char* source, unsigned long sourceLen)
{
	z_stream stream;
	int err;

	stream.next_in = (Bytef*)source;
	stream.avail_in = (uInt)sourceLen;
	/* Check for source > 64K on 16-bit machine: */
	if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;

	stream.next_out = (Bytef*) dest;
	stream.avail_out = (uInt)destLen;
	if ((uLong)stream.avail_out != destLen) return Z_BUF_ERROR;

	stream.zalloc = (alloc_func)0;
	stream.zfree = (free_func)0;

	err = deflateInit(&stream,Z_DEFAULT_COMPRESSION);
	if (err != Z_OK) return err;

	err = deflate(&stream, Z_FINISH);
	if (err != Z_STREAM_END) {
		deflateEnd(&stream);
		return err == Z_OK ? Z_BUF_ERROR : err;
	}
	destLen = stream.total_out;

	err = deflateEnd(&stream);
	return err;
}

const unsigned char* getEngine(ulong &sz)
{
	static unsigned char buffer[128*1024];
/*
	static unsigned char buffer2[128*1024];
	FILE *fp = fopen("eascript.cgt", "rb");
	ulong i, sz2;

	sz=fread(buffer, 1, sizeof(buffer), fp);
	zlib_encode(buffer2, sz2, buffer, sz);

	for(i=0; i<sz2; i++)
	{
		if(i%8==0) printf("\n");
		printf("0x%02X, ", buffer2[i]);
	}
	exit(0);
*/
	sz = sizeof(buffer);
	if( 0==zlib_decode(buffer, sz, engine, sizeof(engine)) )
	{
		printf("loading engine...(%li)\n", sz);
		return buffer;
	}
	return NULL;
}
