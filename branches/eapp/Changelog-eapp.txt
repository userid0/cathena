Date	Added
2007/04/24
	* additions to configure flow
2007/04/22
	* merged some changes from the main repo, 
	  which mainly consits of splitting map.h and map.cpp
	* experimenting with some new storage formats
	* modified id_db register/unregister process, and integrated the quicklist directly
	* reverted some of the previous changes due to Hinoko's complains [Shinomori]
2007/04/20
	* Tweaked code that uses MAX_PACKET_VER to behave more logically
	* Updated and corrected parts of the packet db, added missing entries
	  (both ea's and eapp's db is in horrible condition and needs a cleanup)
	* Fixed ddos protection conf settings (one missing, the other incorrect)
	* Removed afm archive reading code [ultramage]
2007/04/15
	* A bit more work on skills (AL_HEAL - incomplete). [FlavioJS]
2007/04/11
	* Fixed error in showmsg.cpp with VS8
	  "cannot convert parameter 5 from 'uint32 *__w64 ' to 'LPDWORD'".
	* Removed the server accounts from account.txt.
	* Rethought how skills are validated, refer to skill.h. [FlavioJS]
2007/04/09
	* some gcc4 fixes (which could go faster if the existing rumours on the forum
	  about issues with gcc4 could be backed up with some more substancial info)
	* script compiler now by default converts scripts to binaries (*.eab),
	  it's currently for testing purpose only, there are no control switch
	  and limited integrity checks, eab files should also load with higher priority [Shinomori]
2007/04/01
	* Updated login server & config to make M/F autoregistration work [ultramage]
2007/03/30
	* added the missing code to support type, constness and default value on function parameters
	* in contrast to other languages, all parameters are put into the function by reference, 
	  so modifying the value inside the function also modifies the original,
	  only as "const" declared function parameters are given by value
	* function declarations are cross-checked but there might be still some holes left
	  that could fool the compiler, which would normally lead to linker errors,
	  but as there is no explicit linker step here, this might result in irregularities at runtime;
	  but the worst thing that can happen is wrong function parameters, so this is OPP
2007/03/23
	* modified the script compiler in terms of handling function calls
	  also modified some of the compiler opcodes
	* important modification compared to C/C++ function calls is that default parameters
	  can be used on any position of the function call, so assuming a function
	  int func(int a, string b="str", int c=4) { ... }
	  can be called by "func(1,2,3)", resulting in a=1, b = "2", c=3
	  or "func(1,2)", resulting in a=1, b = "2", c=5
	  or "func(1,,2)", resulting in a=1, b = "str", c=2
	  or "func(,1,2)", resulting in a=<empty>, b = "1", c=2
	  or "func()", resulting in a=<empty>, b = "str", c=5
	  etc.
	  (remark [Hinoko]: the current syntax only supports ordered parameter assignments,
	  named parameter assignments might be interesting, but would require an additional
	  syntax to distinglish them from normal assignments done inside the function call,
	  so I would only think on how to implement this on explicit wish)
	* experimenting with the export of compiled scripts [Shinomori]
2007/03/15
	* applied script compiler changes according to the modified script syntax
	* obviously the cron job doing the automated svn sync with the ea repo died
	  when I was abroad, so there are also some older supplement,
2007/03/12
	* Tranfered part of the global targetskill checks.
	* Updated info and structure of the SkillFail packet (0x110). [FlavioJS]
2007/03/11
	* Global skill checks are going to skill::is_valid in targetskill/groundskill/mapskill that 
	  calls a protected function skill::is_valid_sub.
	* Using INF/INF2 defines so the oldskill code is more readable.
	* Separated the build paths of the VS2005 projects so they don't interfere with each other.
	* Added IDs of skills in the 12-18 client.
	* Added two questions to skill.h
	* Added unfinished skill.c code from Redozzen. [FlavioJS]
2007/03/09
	* removed server accounts; account files now are for users only,
	  server authentification goes into server configuration [Shinomori]
	* concatination in script syntax allows single elements but cannot be empty [Hinoko]
2007/02/28
	* compiler accumulates the read scripts and 
	  gives a short info when asked; also reading whole folders
	* as none is giving feedback, I will decide on the functionality of
	  the buildin functions myself [Shinomori]
2007/02/22
	* reworking some of the export scripts for the basics code,
	  and removed parts of the glue code that emulated traits and math support,
	  this possibly introduces more overhead to the interfaces
	* also added some more output files for the content [Hinoko]
2007/02/18
	* Fixed the amount added at the packet 0x6b loop when new_charscreen=true.
	* Fixed the structure of packet 0x6d (new char info). It's the same as the 
	  one used for packet 0x6b (existing chars info). [FlavioJS]
2007/02/11
	* compiler support for nested control structures
	* some reported fixes
2007/02/10
	* added Visual Studio 2005 project files for script checker
	  and script converter. Make sure to test them please. [erKURITA]
2007/02/09
	* svn version info is generated by configure
	* more warning outputs for the compiler
	* some slight addition for script syntax
	  e.g. perl-like assignments to lefthand concatinations,
	  allowing function overloading, c++ like function selection
	  with scopes, etc.
	* changed some variable default scopes for script conversion
	  since the old scripts almost never use "real" temp variables.
2007/02/06
	* fixed the "virtual function call segv" on config loading
	* added some default defines for the compiler
2007/02/05
	* some fixes to workaround ICL bugs
	* packetdb splitted and outsourced, 4 weeks FTE
2007/02/02
	* some more examples for the skill splash distribution
	  as the map structures itself are on rewrite schedule
	  these all can be seen as temporary solutions
	* concentrating the old status interface to few function calls
	  so switching to the new status code is simplified
	* generated the new status code (read: "I did not even look at the result"),
	  now it should only need the insertion of the equations.
	* enabled case-insensitive keyword checking in the script converter
	  as I've seen that alot of the original scripts contain reserved words
	  in uppercase. you also should check for wrong/missing labels in
	  the ea scripts as there have been several (>20) errors on that.
	* fixed default case handling in switch statements for cases with
	  empty default expression where the compiler was inserting wrong jumps
	* some additional sanity checks to have icl happy
	* I also tryed Dev-C++ this morning, exept that it did not link with
	  vc6 generated libraries, everything was as clear as usual. [Shinomori]
2007/01/25
	* some simple demonstration code to support the skill rewrite
	* interface changes for status to simplify testing and the later 
	  conversion to the new system by just generating the code
	* addtional options for the script converter, 
	  it now batch-converts files/complete folders to *.ea files
	  which I decided will be the extension for the new script grammar
	* added some warning outputs to the script compiler for
	  unused labels/unused variables/uninitialized variables/hidden scopes etc.
	  just for the beginning, there are more to go [Shinomori]
2007/01/23
	* Fixed the new skills not compiling. some things still need to be converted so
	  those are commented out for now [Reddozen]
2007/01/22
	* Migrated 13 Skills to the new skill system.
	  I will keep migrating a few a day untill i'm done [Reddozen]
2007/01/05
	* adding code for the new script compiler and script engine,
	  just need to decide where to finally place them
	* as none seems to have interest in giving replies
	  on buildin script function support in form and content
	  (as it was with any other open issue that I requested)
	  I'm not asking again; new scheme is: 
	 "I make the changes and you have to live with it." [Shinomori]
2006/12/31
	* having some more explicit notes at exit()
	* additions to the make/configure to have the build more foolproof,
	  although I'm sure you can easily provide better fools [Hinoko]
	* adding a new variant type, and also merging all changes
	  from the main basics repo that are necessary for it [Shinomori]
2006/12/30
	* Updated WFIFOPOS2 and WBUFPOS2. [FlavioJS]
2006/12/23
	* preparing the switch to new skill/status code;
	  created some new files and moved old code
	* adding some new access interfaces for status changes, 
	  which are however still incomplete
2006/12/16
	* tryed to comensate warning from changed behaviour on mysql5
	  (at least as far as I foresee them, I don't use mysql)
	* changed the timer stub, since baseparam from 
	  the main repository uses a new calling convention
	* ladmin md5 login fixed
	* moved some skill function into the objects
	* changed clif_skill_failed calling convention
	* modified some of the new skill framework calls
	  and added the example skills from reddozen,
	  the rest should be more or less a copy/paste
2006/12/09
	* forgot a Makefile diff
	* alligned str2ip to it's former functionality (not overwriting given values)
	* possibly fixed the VC8 time_t ambiguity [Shinomori]
2006/12/09
	* fixed "warning C4812: obsolete declaration style: please use 'basics::CParam<T>::CParam' instead"
	  when compiling in VS8, caused by the previous changes.
	* Added UINT32_MIN and UINT32_MAX to basetypes.h [FlavioJS]
2006/12/08
	* removed the predefined conf dir, conf-tmpl is enough
	* removed (hopefully) any unused config option
	  so if you put any other option into the configs, the silent assumption is
	  that you care about non-working stuff yourself, 
	  I will ignore any "config does not work" whining
	* removed some files and objects from basics that are either
	  obsolete or currently unused
	* added separated ipfilter as replacement for the ddos object
	* modified configure and default makefile to have more help text outputs
	  though I start hating spoonfeeding ppl that cannot even read
	* changed build flow to use some static libraries [Shinomori]
2006/12/02
	* generated a new basics tree from the main repo, 
	  changes might appear huge, but is mainly caused by
	  a different formatting template, there are only
	  smaller changes on internals and some additions
	* minor other things [Shinomori]
2006/11/28
	* Normalized line terminators and set the svn:eol-style property to native 
	  for all .cpp/.h/.txt files.
	* Added the date to this changelog (hope it's ok). [FlavioJS]
2006/11/27
	* some changes on console logs, despite my doubts it will help the epidemic dyslexia
	* debug mode is now activated only when building with DEBUG (or _DEBUG) defined
	  as only this symbol is activating the debug mode for the underlying structures
	* some more fine tuning to script converter
	- adding const.txt into dblookup
	  still need checking if it is sufficient for player variable detection
	- usages of temp variables in current scripts is inconsistent
	  as some assume lifetime of temp vars beyond script execution
	  (just something like non-saving permanent variables)
	  new temp variables are really temporary, so some scripts might fail to work
	- more aegis conversions; 58 of the aegis functions are left for transformation
	- added read support std.sc although nothing is converted from there
	  (defines are only stored, declarations and mobs ignored)
	* merged some of Hinoko's code into the script checker,
	  unfortunately the compiler needs to be redone as some of grammar terminals 
	  don't follow the existing compiler template, so I cannot generate it
2006/11/24
	* removed an extra coma that prevented tbl_variable from being created [FlavioJS]
2006/11/20
	* as flaviojs provided a new set of aegis scripts, 
	  I updated the aegis parser a bit, they run clean
	  when removing all the original syntax errors:
	  wide char spaces within code, inconsistent quotes
	  and missing linefeeds mostly, did not explicitely look
	  for logical errors but already saw them,
	  I also updated the aegis grammer to accept statements like
	  "else <expression>" to be equivalent to "elseif <expression>"
	  as the aegis script engine apperently is stupid enough
	  to not recognize this syntactical error.
	- not sure if it is necessary to provide parsing support
	  for the std.sc and enum.sc as the first basically contain
	  the function layout and the second is a different syntax
	- it could be also considered to support aegis style fsm
	  for npc/mobs as posted by vicious_pucca:
	  (http://www.eathena.ws/board/index.php?showtopic=8537)
	  as it seem rather simple to implement and would
	  automatically offer the flexibility of a scriptable ai
	  at almost no performance costs
	* script converter is reading item/mob/npc db to check
	  if used items/mobs exist and also using their names
	  in the scripts instead of the ids, this might reduce
	  errors by using wrong numbers in the scripts
2006/11/17
	* tyr seems down so it will be not updated in parallel today
	* removes some mistakable config loading
	* some parser grammar updates
	* started with some transformations of functions and variables 
	- on the aegis converter we'll might need complete access to
	  an itemdb and mobdb as it uses their names as direct identifiers
	  mixed together with real variable names
	- behaviour of some aegis function is unclear beside the ton's 
	  of structural and logical errors in their scripts
	* as lexical reading seems working and if there are no further 
	  structural errors we'll come to the actual parsed content 
	  which first is redefinition of the necessary buildins 
	  including a cleaning of the functions together with resorting 
	  their parameters; alot of useless crap has to go [Shinomori]
2006/11/13
	* some filters, might discuss the content/further preprocessing
	* changed parse error display format
	* some more aegis statements, but maybe still not all implemented
	* some beautification of the converterted scripts
2006/11/06
	* think I could become accustomed to KarLaeda reports
	* some fixes for reported things
	* added experimental aegis support to script converter (*.sc)
	  it should read the scripts although I had to guess alot of the grammar
	  beautifier outputs new syntax style but function names
	  and some function behaviour needs to be converted. 
	* updated oldea syntax to support subfunctions and script varibles
	  but not yet decided how the new engine will support them
	* outputted variable names should now get scoped correctly
2006/10/29
	* nothing beside a changed export script 
	  (should have replaced one lined C-style comments)
	* I'm still waiting for comments on the 10/16 changelog
	  script engine work is freezed until perfection stated
2006/10/24
	* removed some more status functions, still alot left
	* identifier fix for script converter [tnx to KarLaeda]
	* preparing switch to universal login, which is:
	- moving accountdb and existing administrative code to char-server
	- cleaning login-char communication
	* prepared convert/merge of different databases 
	  (which although needs the step before)
	* some win64 fixes
	* additional idiot safety for ip address assignments [Shinomori]
2006/10/16
	* removed some more status functions
	* script converter should now be fully functional, 
	  exept for the db files (which new format is not yet decided)
	  it also takes over the checking of old eA script syntax
	* updated the parse engine of the syntax checker to read
	  the new format (exept for the db files); testing flow would be 
	  to convert a old script ("scriptconv b <filename> ><output>"),
	  and then test it with the checker ("scriptchk <filename> ><output>")
	  together with manually checking the output by looking over it
	  reporting unexpected behaviour would be helpful. [Shinomori]
2006/10/11
	* doing a temporal upload on behalf of Shinomori (which is absent atm)
	  so I just paste the log entries from his work packages [Hinoko]
	* removed some status functions, embedded them at the objects
	   and changed the code where the original call was used
	* changed item command behaviour
	* added a pre-version of the script converter; which is just a reduced
	  copy of the script checker with a slightly reduced syntax set. 
	  it should not yet be used to do a real conversion, but for error tracking 
	  in order to make the final conversion step as smooth as possible.
	  it can only parse/convert scripts and recognize itemdb and mobdb entries
	  but not convert them since the new format is to be specified
	  it is not included in the global makefile and needs to be built seperately
2006/09/30
	* changes at on-event behaviour (examples in gmhelper.txt)
	* cleaned some more stray functions
	* unified destructions for mob/pet/homun
2006/09/24
	* almost finished npc rewrite:
	- new event structures, new timer structures, merged useless functions
	- changed some script command behaviour 
	* npcevent calls still need a revision [Shinomori]
2006/09/17
	* removed block_list::type and block_list::subtype completely
	* split different npc types into seperated classes,
	  now functional enhancements can follow (eg. dynamic shop content)
	* some smaller cleanings [Shinomori]
2006/09/12
	* framework updates
	* cleaned and documented utils
	* more block_list::type usages removed, also provided 
	  some convinience overloads, although all of this is to be removed
	* moved object declarations from map.h to the appropeate headers,
	  changed also some include orders, might split map and block code later
	* prepared a playground for new skill system temporarily in fightable, 
	  descriptions and example is there but need some more real data
	* some structure renamings [Shinomori]
	* tests with virtual overloads for clif functions finished, next is 
	  to further check functions for overlapping and improper behaviour [Hinoko]
2006/09/01
	* added a doxygen template, so just load it with doxygen and 
	  it will generate a 30MB code documentation, 
	  although the original code is not documented at all 
	  it might be helpful for looking through the code
	* some more replacements of pc status functions
	* moved some code around (atcommand/config/utils) 
	  and had some renamings [Shinomori]
2006/08/28
	* replaced all db_foreach with iterators
	* renamed npc_chat to npclisten because this is what they do
	  and because of experiments with chat_data object
	* removed the changestate stuff, integrated it into the map objects [Shinomori]
2006/08/27
	* Added the same GPL licence notice trunk has in every file [DracoRPG]
	* Replaced every msg_txt(x) with the matching MSG_ constant [DracoRPG]
2006/08/23
	* fixed mysql connection bug
	* added overflow protection to config reading
	* templated the db_iterator to prevent extra casting on access level
	* some more simplification on command storage and changed some command
	   behaviour (ie. allowing a map parameter for weather commands)
	* moving id storages to their intended places, 
	  still allowing external access until finally wrapping them
	* removed the old blabla2something functions and provided some static members
	  for accessing given objects from ids
	* extracted and compound some behavioral elements formaly distributed all 
	  over the code (like day/night cyle or the permanent char name storage)
	* changed the static initializers, although code is correct and working,
	  gcc is erroneously convinced to give warnings there [Shinomori]
2006/08/21	
	* Added VC++8.0 project files [Toms]
	* Added some svn:ignore properties [Toms]
2006/08/18
	* trashed useless charcommand and restructured atcommand handling
	* prepared grf rewrite, already changed some behaviour
	* moved message table to config.cpp, possibly combining both later
	* some allignments of function layouts and exchange of some calls
2006/08/08
	* missing uploads from previous submit
	* rearranged some makefile parameters
	* some functional unification of config file reading 
	  now accepts ':' and '=' as seperator and is independend to whitespaces
	  still need conversion of static configs into parameters
2006/08/07
	* some renaming of external header/lib folders before moving them
	* gcc4 errors/warnings removed (at least the important ones)
	* moved cygwin's nonexisting wcs timer function warning/fix to proper place
	* added a general solution for the VC7 parser bug at map.cpp
	* some changes on config line preperation but not finished yet
2006/08/03
	* Refined VC++ stuff, everything should work flawlessly [DracoRPG]
	  - There's only one debug build configuration, SQL/TXT hybrid
	  - Intended bugs were also removed, so all what you should have to
	    do is open the solution and click "Build"... isn't it nice?
	* Added solution/project files for Microsoft Visual C++ [DracoRPG]
	  - Currently the TXT configuration seems to be working, SQL won't
	    as I have to work a bit more with those damn libraries and all
	  - Beware of Shino's intended bugs, errors/warnings aren't my fault 
2006/07/31
	* new make flow, but might be not fully idiot proof 
	* seperated map's sql links and changed the directions of the data
	* start to remove db_foreach since not necessary anymore
2006/07/28
	* the promised "bug reporting" capability of the ea board is
	  ridiculous, from the 5 very obviously placed functional bugs
	  in the code, only one has been vaguely mentioned, however, 
	  it was not reported in bug report or support forums 
	  but only mentioned in an international forum that I just
	  accidently came accross. I actually didn't expect much
	  but this even falls short of my little expectations
	* concentrated map server's sql code to the files that are 
	  actually using it, still, there are no functional changes
	  since I'm actually waiting for the announced mob_db/item_db
	  modification, but if this is not happening very soon,
	  I'll consider this topic as finally terminated
	* moved battle_conf to a seperated file and renamed it
	* added first part of Hinoko's variable system
	  it currently should already replace mapreg 
	  but is working in parallel the old system until approved
	* converting scripts parsing outputs into structures
	  compatible to the outputs of the new engine
2006/07/20
	* enabled some already prepared virtual interfaces
	* removed the old walk implementations 
	* removed some redundant functions from battle and status 
	  but still a big bunch of redundancy left for removal
	* added some basic fightable functions, but need to merge them
	  with the already existing battle code
2006/07/15
	* added parameters fixing (ie. command line parameters are 
	  not overwritable by files (might also add forced overwrites)
	* update for better character sets in regular expressions
	* more fightable, still in compounding/evaluation phase
	  using the homunculus stuff as test case which does not 
	  destroy the rest of the code
	* start on cleaning clif, lot's of functions are redundant,
	  and using hardwired switches inside is just stupid,
	  also try to tweak it for more flexibility in terms of
	  changing to the new socket layer (this will unfortuantely
	  need a new packetdb for the dynamic packet creation)
2006/07/05
	* switched to new moving code, also activated map tile depending
	  moving, both something experimental, will need some review 
	  after cleaning the old stuff
	  debug has been done not very extensive so there still might 
	  be problems
	* start on implementing fightable class, only finished the timer 
	  interface right now, removing all the useless crap from current
	  attack/skill code might take some time
	* some more bug reports/comments would be appreciated 
	  since this was an important argument to convince me returning to eA, 
	  but until now, there was not really much to see. [Shinomori]
2006/06/26
	* adding default parameter names to inter_athena.conf, 
	  even if this file is not loaded by default, 
	  you now have the correct names
	* some changes on login and txt guild reading which might
	  fix the registration and the charname display problem
	* since I don't have much time at the moment I basically
	  only merge Hinoko's changes into public svn and 
	  have some gcc (3.2/3.4) compile errors removed [Shinomori]

	  Hinoko's log:
	- seperating coordinate and movable into own files
	- start wrapping up the old functions into class members
	  trying to use a some more intuitive interfaces and also trying
	  to extract a common access structure (which is not that easy 
	  since in the past appearently anyone thinking of beeing able 
	  to write code added some more or less (usually less) usefull code 
	  extension to eA without a spark of understanding of what harm 
	  this did on a global scope; I explicitely don't mention the 
	  memory consuming usage of bunches of useless variables in this context
	- from what I've seen, almost a quater of clif/pc/npc and 
	  half of mob/pet is completely redundend
	- anyway I leave the functional part of the code as it is, 
	  only unifying the interfaces, removing the useless crap is then done quicky
	- added the new proposed walking code for testing purpose only
	  since I had to fill the gaps of the missing fightable class
	  with copies from the old function (which appearently don't really fit)

	* some open decisions:
	- naming conventions (I had names as far as possible in the old eA style
	  but would tend to a more coherent naming)
	- having a complete set of the virtual interfaces already at block_list
	  or have multiple levels of depencencies (I'd prefer the first, 
	  maybe also using pure virtual interface classes)
	- building pets also as real fightables with hp/sp, stats etc. 
	  which are just not used in "RO conform" mode or have it with
	  a simplified fightable structure
	  (advantage of first option is more flexibility and easier code,
	  the second is using some less memory)
	- it might be promising to really seperate execution code from control code,
	  since the basic objects would be players, mobs and npc, while controls 
	  would be AI control (mob/pet), and player control (clif), 
	  so plugging a mob controller to a pc will automatically result in 
	  a player acting as mob while a clif module on a mob would be a 
	  real player controlled mob with stats and skills and stuff
	  without needing any special code for disguises/clones.
2006/06/16
	* starting numbers for id's (account, char, guild, party, pet)
	  are now forced lower bounds
	* added a seperate function for sanity checking of new characters
	  this should also solve the problem with the misleading message
	  on a failed char creation
	* seperated the data structure for the movable-class and
	  started filling it with functions, 
	  also combined walkpath with target coordinates and walk flags, 
	  but might completely combine it with movable later
2006/06/07
	* added recovery of dropped listen port
	* fixed runtime problem with cygwin (which does not supported 
	  inlined static constructors, tnx to erKURITA), 
	* fixed unsupported parameter compare on intel compiler (tnx to ALZ)
2006/06/04
	* removed the usage of the "bl" block_list member
	  and wrapped up some parts of block_list usage function
	  added some safty to virtual destruction, but need to add 
	  more data protection among the classes
	* added Hinoko's pre-release of the script parser, 
	  it should also read newer ea script with for/while/switch commands,
	  although the compile step is not done yet, the script checker 
	  already finds severe parse errors in almost all ea scripts 
	  (which are real errors), so it's good enough for the current purpose
	* implemented almost all ansi control sequences, only missing are insert/delete
	  which should be possible with rectangle movements, but I need to check how 
	  they actually work on msvc since description was not really comprehensible
	  also beautified the internal loop a bit and made it more generic
2006/05/29
	* added support for external parameter file processors so
	  automatic file reloading can be used also for non-param configs
	* some tweaking on the automatic wan setup, it now is possible to
	  reenable it during runtime when disabled because of network errors
	  it is also disabled now by default, to enable it add 
	  "automatic_wan_setup = true" in char/map config
	* changed parameter "engine" to "sql_engine" for selecting the 
	  table engine on sql recreation, also changed some queries for mysql5
	* simplified famelist storage/transfer, it's also using pc variables
	  instead of explicit mmo_char elements now, so there will be no extra
	  memory load for characters that don't use this values.
	  update and requesting scheme is also changed and char holds a master copy
	* slight cleaning of login, readded M/F registration and new login packet
	* started capsuling existing class related functions in map
	  and added some new types in map.h
	  also unifying return types/values; this mixture of 0/!=0
	  for success/failure is more than annoying
	* some VC8 fixes (tnx to ALZ, there should be some more warnings, eh?)
2006/05/25
	* after Hinoko acted a bit autonomous by removing all c style
	  allocations and virtually broke the mapserver, I'm quite happy
	  that this step is finally done, even if it has cost me the 
	  rare free evenings of the last two weeks to get is usable again
	  (might be still crashy since I didn't test much)
	  anyway, final status message: map is c++ ready
	* only drawback is that the memory manager is commented and 
	  therefore completely useless but it will be replaced as soon 
	  as I find some minute to write the new memory allocator
	* for finding current leaks better add basics::global for 
	  object counting whereever necessary
	* I also put the hierarchy from the draft into map.h for reference
	  and started to converge the classes
	  deriving seems to work, too, I placed a helper blocklist reference 
	  to emulate the previous bl data member, which now actually 
	  is a base class, there are far too many usages of xy->bl stuff
	  to get them removed at once. it also should be further discussed 
	  how granular the hierarchy might be, there are several candidates 
	  for new objects
	* next step should be to add the separated movable/fightable classes 
	  and to collect all the functions that belong exclusively to the 
	  different objects and extract the similarities to be placed 
	  at their base classes. This unfortunately will be a 
	  recursive process of quite some time.
	* since I had some time today as nobody of the eA devs seems to have 
	  had any questions according my offers, I had a look at path.h instead
	  and added documentation to all the functions there and also 
	  revised the code when necessary, there are several possibilities 
	  for more speedups especially at the initial path finder since 
	  this thing is called for every movement [Shinomori]
2006/05/07
	* since I had access to a windows machine with mysql this weekend,
	  I spend some time merging the recent changes from Hinoko and
	  also had a look at the current sql database implementation 
	  (I actually won't talk about, but just one word: read more documentations)
	* corrected the sql implementation as far as I could test it, also changed 
	  to use the seperated sql module, which is much more convienient and threadsafe; 
	  reduced the additional interfaces on the databases to only the simple one 
	  (random access using the 'limit'-command) and also removed all the other things 
	  like lists and creation/destruction of temp objects which I actually 
	  don't understand have been useful for something
	* added the 3 special function which absence made buuyo worry about performance
	* changed some smaller things on the build flow to enable dynamically dependencies
	  for now only basics have it, but it might be integratable also with common and map
	* changed the global defines for selecting txt/sql: 
	  WITH_MYSQL builds with mysql support, WITH_TEXT builds with text support,
	  both defines are possible at once, the database is then selectable
	  on startup with a "database_engine" parameter given either by commandline or configfile
	  (though current buildflow does not have the last option integrated, needs manual make addition)
	* some fixes for ladmin on windows, which might be a general case to look at:
	  at least the encryption keys where send as strings without termination
	  but used as cstrings with termination on the receiver side, causing unexpected behaviour 
	  which worst were memory overwrites (because string copies without size checks have been used)
	* also removed the session timeout limit for ladmin connections
	* wrapped up all basics into a seperated namespace, so now std:: is usable in parallel
	* changed to using the parameter class where easy to integrate
	  but also needs some eye on where it might cause trouble
	* some additions on the automatic WAN detection like the parts for configuration, 
	  reconnection and dynamic check, this might possibly end all "cannot connect server" issues
	  but still need Hinoko to finish her tests with it
2006/04/23	
	* some changes to basics memory allocation class hierarchy
	  (but will not generate a new doxygen tree since no interface changes)
	* moving the threadsafe mysql wrapper example into a seperated module
	  and adding a real usage example (see below), needs compilation
	  with "WITH_MYSQL"-switch and global visible mysql headers
	* splitting common/baseio into baseio for definitions only
	  and basetx for the actual txt implementation of the database,
	  next is that baseio implements parameters for runtime decision on
	  what database is to be used and from where data gets converted
	* integrated the example for sql reading on an in-memory database
	  into basetxt, illustrating it for account_db,
	  compile with SQL_EMBED define for a running example
	* splitting this as third database type under "basesx"
	  maybe have general file renamings to better reflect the content
	* preparing phoenix database module
	* applying some of the login<->char protocol change from working copy
	* merging some fixes from ea stable
2006/04/02
	* changed doxygen formatting to javadoc since the new version did
	  not recognize my former style template
	* some smaller (untested) additions, notably mysql reconnect and map.rsw reading
2006/03/28
	* still cleaning code/moving section etc.
	  fixed compile errors on MSVC/commented out some warning throwing variables
	* mapped std::vectors to basics since not usable in combination on windows
	* fixed PROCESS_CONFIG_FOR defines, fixed config_var_matrix usable for non-gcc
	  which results in beeing really ugly code, maybe rethink the design
	  possibly switching to CParam's, which also include the file processing
	* added some doxygen doc's (though might still be missing a lot)
2006/03/13
	* some cleaning on basesql (making it compileable, simplifying query building, 
	  explaining questioned functions, etc)
	* reenabled npc_chat
2006/03/07
	* more cleaning in common; removing strlib, moving code from socket
	* restructuring makefile dependencies
	* adding switch for using whatsmyip.com for wan-lookup (although not recommended)
	* prevent setting wanip when using multiple network interfaces
	* findFiles no longer works on substrings but on matches 
	* threadpool is also usable in singlethread mode
	* more vector/map/string functionality
	* added some experimental printf-like and direct formatings
2006/02/17
	* adding some more base environment stuff
	* wrapped test code into debug defines, but existing test cases
	  still not cover all files/necessary circumstances
	* updated to Hinoko's newer regex engine (not yet updated the tests,
	  so there are some wrong error detects on lazy operators and char sets)
	* some general code cleaning, renaming interfering variables
	* adding automatic WAN setup (not yet configurable)
	* combined map server's sql interface and seperated the files
	  in make process to allow minimum difference of dependecies
	* updated makefiles to allow individual makes targets 
	  with proper dependecies, so ie. 'make all' now really makes all, 
	  and 'make login' only makes the txt login server with its dependencies
	* cleaned some unused account variables in login and started 
	  to remove unused/unnecessary packets
2006/02/05
	* sql database connection pool with example
	* added vector/stack/fifo/slist classes, testcases not yet complete
	* some code optimisation/speedup in memory/strings/parser
	* automatic safty replacements of sprintf to snprintf, not tested
2006/01/27
	* still evacuating my stuff from common to basics
	* adding inet functions/simple lists/regular expressions/threads
	* cleaning basic string functions, unifying string conversion
	* fixing error in basememory in case of non-throwing new operator
	* split stringsearch and zlib example to seperate files and expand them
	* adding minizip code, but still need to clean and fully integrate it
2006/01/22
	* cleaning common/removing functions that now are in basics 
	* adding dynamic library load interface
	  still need to split the zlib example from that file 
	  and add the minizip code
2006/01/15	
	* cleaned warnings from base test functions on 64bit compilations
	- revised base includes and makefiles
	* replaced the old parse input scanner [Hinoko]
	* smaller modifications on the script compiler
	- checks now for variable usage before declaration
	- counts the usages of labels and variables (aka detects unused)
	- modified label jump generation, still testing [Shinomori]
2006/01/08	
	* added merged part of my general programming environment,
	  though, some important parts are still not ready to be copied
	- basically contains the full versions the formally trimmed-down base.h
	- unix makefiles are provided, for windows create a new static library 
	  with the folder content and add the path to additional includes [Shinomori]
	- finished work basic string classes, currently done as templates
	  for normal use it is safe to take default paramerters with "string<>"
	  look at the testfunctions in basestring.cpp for examples
	- the script checker should be also compilable now
2005/12/26
	* adding elements for replacing existing structures
	  such as dynamic buffers as replacement for session fifos,
	  experimental stringbuffers and adding some enhancements on temporary ministrings
	* set type of variables/parameters to ipaddress wherever appropriate [Shinomori]
2005/12/23
	* small bugfixes/protections here and there, mostly replacing sprintf with snprintf
	  and supplementing initialisation/destruction for c++ object that need to run 
	  temporarily in the old c style allocation model, but not looked over all places yet
	* finished debugging of char rewrite and removed commented fallback code
	* moved mail system from map over to char and added mail support for txt
	* corrected automatic change of temporary variable scope to enable temp map vars
	* removed necessity of using ".gat" for mapnames and unified some naming convention
	  the extension is now omitted whenever mapnames are read/transfered internally
	  and added automatically when sending mapnames to the client, rebuilding the mapcache 
	  is mandatory since the maps were originally identified by the full name
	  the search order for map loading is cache/gat/afm/af2
	  (whenever zipped af2 support is not yet added)
2005/12/10
	* since returned from travel I clean up the stuff a bit first
	  to get some consistency between different working copies and svn code
	  before processing and forwarding items from the task list [Shinomori]
2005/11/11
	* New readme content/layout (IE warning: IE hates new readme) [Evera]
2005/10/29
	* Updated readme with new layout [Evera]
	* following the wishes I enable the hidden functions in the script checker for public
	  which includes a bunch of the parsing debug outputs (but might be only useful
	  for those interested in parsing), debug outputs from the compiler and 
	  a short dump of the generated program in binary form and a code sequence.
	- the code transformation and the compiler currently only have rudimentary functionality
	  since the final grammar for the script language is not yet fixed
	  still, extension is easy possible independend from parsing and interpreting engine
	- also added the experimental feature of "code beautification" (option 'b'), 
	  which dumps the input script in a unified format, scope and function call style
	  when finished with the final arrangements on the eaScript grammar, 
	  this tool might be used for automatic conversion of existing scripts.
	* corrected CCharDB_txt not saving the character data on programm exit
	* changed char server to use the finished baseio data classes, still need debugging
	  also experimenting with a new data access interface using integrated iterators 
	  which might simplify subsequent access on sql data
	* edited basesq code slightly to enable at least clean compile
	  needed for check other sql code
	- modification mainly consists of renaming some variables and correcting
	  the doubled buffer usage (aka: "sprintf(buf, "%s%i", buf, 1);") 
	  which is not really dangerous with common sprintf implementations 
	  but still risky and quite unnecessary (since the data length in the buffer is known)
	  also switched to use snprintf as far as I've seen them
	* removed parameter related code from baseio (putting it to baseparam)
	  tests have been successful, though, memory fragmentation could be reduced
	  now only need to implement callbacks then all ini-file reading/processing 
	  can be switched to use those dynamic parameters [Shinomori]
2005/10/21
	* adding parts of the new script engine, currently only in form of a simple script checker
	  the provided pre-compiled w32 version (needs zlib1.dll from precompiled zlib folder)
	  only does basic syntax checks, which might be enought for testing purpose
	  the folloing stages of parse tree transformation and compiling are disabled 
	  since those outputs are currently only interesting for debugging
	  use syntax: "eascriptchk [optional engine file] <file or folder to check>"
	  if using folders it parses all encountered files that contain 'txt' in the name from all subdirectories
	  note that this is more like a preview to the development direction than a full featured tool
	! compilation of the script checker is not possible since I cannot provide my standard environment
	  for public use at the moment
	+ implemented is the complete set of current script syntax (if I interpreted all the informations right)
	  additionally the engine understands C syntax without pointers and some C++ (ie. member functions on function return values)
	  feel free to experiment with it, for those able to read grammar, yacc file is included
	+ the only change to the current engine is that the synatx is case sensitive and key words need to be lower case
	  (like 'if', 'goto', 'while', 'for' etc.), scope depth and expression complexity is not limited
	+ since 'if' is now a keyword instead of beeing a buildin function it always needs brackets around the parameters
	  constructions like "if (a) || (b) || (c) goto somewhere;" as used at some places of the code are invalid now
	+ very problematic are script/mob/warp/shop headers in the current form since those headers do not allow 
	  context free parsing, they instead slow down the parsing roughly by factor 10 to 20
	  therefore a modification of the current grammar might be advisable, I will come up with a suggestion 
	  for discussion after having a look at the lua thing to prevent possible double work; 
	  in any case of script syntax modification, automatic conversion from old to new syntax would be supplied
	* the npc folder in eapp has been checked and a bunch of (more or less critical) errors removed
	* some smaller edits and only very few copies from stable; 
	  stable seems now to become more and more incomatible to its former structures
	  I guess I have to look up an new definition of "feature freeze", maybe it's "features <until you> freeze"... [Shinomori]
2005/10/07
	* added database interace and txt implementation for party, guild, castle,
	  pcstorage and guildstorage, 
	  still need to make use of them in char server, sql part is also missing
	* slight modification of some field names in the login sql database interface 
	  (sry for conflicting with your work CLOWNISIUS)
	* restructured map reading
	* testing of named parameter storage for simplified configuration
2005/09/27
	* replaced varargs with callback objects providing type safe argument passing
	  additionally it is a bit faster since it does not copy the passed variables
	  though, readability might be strange for habitual C programmers
	* started class wrapping for general map management and the database subsystem
	  currently only covering the map_foreach...-functions and the db_foreach
	* changed the database to also make use of the doubled linked list
	  since the nodes contained the necessary items, just the table anchors were not implemented
	  the list allows a very simplified db_foreach and deletion safe iterator support
	  the iterator might be a more intuitive replacement for the db_foreach
	* rewrote the current database into a class by wrapping up the functions
	  currently not in use, still need to check if replacing the current red-black tree 
	  with another binary tree (ie. AVL) or with an order-N balanced tree is favourable
	  (Hinoko, you could check if the (N)BTree from Caldon would fit while I'm on travel) [Shinomori]
2005/09/22
	* try to temporarily overcome the vararg issue on the amd64
	  appearently the changed structures and storing on the amd64 
	  make a gained va_list only usable once, you cannot just make a copy 
	  of the original for having it usable again, but need to va_start it again 
	  so (if it works) the fix is quite a drawback on speed
	  but varargs are to be generally removed, so it's ok
	* wrapped the parser, but have it running in parallel until I'm sure it is safe
	  need to rethink the str_data/str_buf thing as it is not very efficient and quite inconvinient
2005/09/12
	* debugged and fixed the apparent 64bit issues, so the servers should
	  also run on 64bit machines now, but still more issues might exist
	* temporary introduced some new types for portablility 
	  checking a possible switch to a portable stdint.h
	* some more additions to the script engine to prevent unclean scripts
	  breaking the execution, but still under investigation
2005/09/03
	* added types for combined transfer of pointers and number
	  with some checking posibilities, 
	* exchanged some more int usages with machine independend types
	  so the whole thing now builds clean on my 64bit sparc
	  login and char seem ok but map need some more twiddling
	* continued on rewriting the old script enbedding/calling scheme
2005/08/30
	* renamed the sql class files to 'basesq.cpp/h' since having 'sql'
	  within the name conflicts with the makefile build environment
	* finished the functional rewrite of the script engine
	  most notable features are multiple script support and working input
	  functions for event and equip scripts 
	 (with the exeption of clients before 2004-06-28)
	  will still need a clean up of the buildin functions since they
	  only have been converted automatically and might lack efficiency
	* some regular copies from stables updates
2005/08/27
	* Fixed MS VC type coversion error in socket.h [Wizputer]
	* Made Shinomori's CMySQL class little more friendly
	- Cleaned up some of Shinomori's classes so they can be utilized
	  more easily

2005/08/26	forked out the changes from cuteboi, they have to be merged in 
	a more decent manner
	changes for the current update compared with the 07/17 release include:
	
	* converting the servers to use a unified data interface
	  so different database concepts can be added more easily
	- login server is working but still need some modification on 
	  the sql side to be fully functional
	  and also need cleaning of all unnecessary packets
	- partially converted char server (party and guilds are missing)
	  txt is working but the complete sql implementation of 
	  the char database is missing (char_sql and login_sql is still working)
	  the changes have enhanced txt to be orders of magnitude faster than
	  sql now 
	  (basically by replacing all searching for-loops with 
	  binary searches and throwing out the braindead implementation 
	  of the friend.txt read/write)
	* added new authentification system which will make any guessing 
	  on packetvers obsolete
	- introduced temporary packets in login/char and char/map 
	  to emulate the targeted authentification
	- cleaned clif_parse entry code (not finished), WantToConnection 
	  and packet version detection
	* updated packetdb reading and internal structure
	- put in defaults from current packet_db.txt, 
	  packet_db.txt reading can now be used optional
	* rewrote the old script engine
	- partially converted the script engine to fit the structure of
	  the new execution machine to simplify switching over/using them 
	  in parallel/getinf an idea for an interface to lua 
	  (if still of interest)
	- fixed dangling pointers in stack elements
	- added a script queue so scripts will be queued when starting 
	  multiple scripts on a character that is already running one 
	  (like starting both PCLoginEvent and PCMapLoadEvent on login)
	  but need to rethink the attach_id stuff, since it might need 
	  a completely different scheme
	- added a check to script command "input"
	  this script command is only working when called with a visible npc,
	  so eventscripts, equipscripts will just freeze the pc;
	  the script will be now terminated with a warning if this is detected
	  (example scripts included in npc/a_tests.txt), a better workaround is prepared
	- fixed close command to now really close the script when the 
	  "close" button has been pressed by the pc and not when the command
	  is encountered
	* other stuff from last week that I don't remember anymore [Shinomori]
/////////////////////////////////////////////////////////////////
changelog from devel/shinomori, which the above is based on
2005/08/10
	minor changes/additions
	still preparing the replacements for current data access and authentification
	notice for Hinoko: I corrected your Multilist and made an modification
	that is using pointer storage; check the comments at the classes
	your fix for the system ip check on bsd type unix is working fine
2005/07/29
	new makefiles (look for suitable compile options on your system)
	fix for guild creation crash
	some changes on freeing script allocated strings 
	(possible source of some observed memory overwrites)
	and added some block checking on memory manager [Shinomori]
	changed sockets to use c++ allocation/deallocation
	will use managed memory again when switched completely [Hinoko]
2005/07/23
	Moving back to devel dir, since I've been efficiently thrown out 
	of my own sources after beeing away for just some days and 
	beeing fair enough to not do the same [Shinomori]
	Start to integrate the baseio playground, it actually does nothing at the moment
	but is aimed to store all the data operations of the servers [Shinomori]
	Replacement for the initial ipaddress class from caldon project
	with a better class hierarchy [Hinoko]	
/////////////////////////////////////////////////////////////////
changelog from cuteboi's changes on eapp which is forked to eapp_old
code is basically reverted to 07/17 from here
2005/07/22
	- Removal of checks whether the client is LAN or WAN, Must be fixed ASAP, map, login, char
	  updated to allow players to log in.[CLOWNISIUS]
	- Completed Update of char.c/h for optimized SQL access.[CLOWNISIUS]
	- Removal of PASSWORDENC from Login_sql comple, Cleaning of the code from login.c/h 
	  now almost complete.[CLOWNISIUS]
	- Removal of PASSWORDENC from Ladmin complete.[CLOWNISIUS]
	- Cleansing of the directory structure almost complete.[CLOWNISIUS]
	- Repair of Shino's IP structure from login workaround complete, using LANIP instead 
	  of the blank WANIP that always seems to be blank, and LAN is a simple 
	  workaround [CLOWNISIUS]
2005/07/21
	- Added new md5.cc and md5.hh for usage in the PASSWORDENC and CLOWNPHOBIA sections
	  of the login.c/h and in the ladmin for compiling of some other things.
	  lAdmin at the meantime is bugged, and will be that way for a while, till things
	  are stable.[CLOWNISIUS]
	- Login server fixed to use PASSWORDENC properly, CLOWNPHOBIA updated also to use salted
	  hashes.[CLOWNISIUS]
2005/07/18
	- Fixed Makefiles for all SQL based compiles (login,char,map) [CLOWNISIUS]
	- Implementation of the dbaccess.c/h files to help ease usage of SQL commands,
	and allowing others to make a small dbaccess.c/h for any other type of SQL
	API [CLOWNISIUS]
	- Updated Login, Char and Map SQL server to use the new dbaccess.c/h [CLOWNISIUS]
	- Updated the main Makefile to not touch TXT based servers, and simplified compiling options
	for the login, char and map servers. [CLOWNISIUS]
/////////////////////////////////////////////////////////////////
2005/07/17
	modification on the ip storage and transfer,
	removed the lan support stuff and integrated it directly to the server configs
	corrections on the fame system
	beautified some outputs [Shinomori]
2005/07/10
	merges from stable
	Paladin's new Sacrifical Ritual
	adding chaos as additional characterisation variable (besides karma)
	and some code reordering [Shinomori]
2005/07/3
	* Updated NPCs [massdriller]
2005/06/18
	just to note all the differences of eApp to stable branch
	might be quite incomplete, though; there are lots of playgrounds 
	that I don't explain in detail, just the basics:

	converting function call parameters from pointers
	to references as far as possible, initial step to 
	compound all that stuff into classes

	implemented 64bit compatible usage of time_t
	corrected gettimeofday on windows builds

	checking of comments in config files is
	skipping all whitespace characters
	the "//" is also detected when not at the beginning of the line

	changed dynamic mobs to a different dataset
	_all_ script mobs are created with a cache and each mob
	gets an additional pointer to their corrosponding cache slot
	on creation, allowing to share a common data set among multiple
	mobs created from a common cache slot. this data is not necessary 
	at the mob itself anymore
	the cache is build with counter, so when a mob is spawned on
	the map, the cache counter is decremented, if the mob
	is unloaded, the corrosponding cache counter is incremented
	thus preventing mob duplication
	only non-delayed mobs with a cache are actually unloaded,
	ensuring that guardians, quest mobs and spawned mobs
	are not touched as they do not have a cache
	if a cached master is unloaded, it's slaves are destroyed as well

	introduced slight changes the character file format (txt)
	so be sure to make a backup before trying this version
	otherwise you might not be able to switch back to branch

	change all data to real types for better type checking
	and preperation of automatic transfer buffers

	integrated the anti freeze system into the user count update messages
	(which are already send between chat,login and map)

	changes on map.gat structures and access
	planning on reducing memory usage for this even more
	but still testing the possibilities/effort
	you will need to delete the map cache file from stable branch
	since those are not compatible

	removed parts of RoVeRT's npc timer system

	added forcefull disconnect detection and let the pc online
	for 10 seconds so Alt-F4 cannot be used to flee a fight
	moved the clif_waitclose to the socket

	changes packet processing interaction scheme between
	core socket and parse_func's,
	changed eof to a couple of flags that are used to hold
	the status of the connection, also added access function

	changed all usages of ip numbers to host byte order
	for better consitency,

	simplified and tighted timers a bit

	fix for moving npcs with ontouch event

	reading npcs recursively from folder
	no need to spcify any single script file
	just put path : <path name> to map config
	and have any *.txt file read in

	working npc duplication fix for multimap

	fast socket access
	replacing the loop with IS_FDSET
	is much faster, still testing
	adding different socket handling on WIN32
	it is not exactly the same version I did for jAthena,

	a "real" ShowMessage
	includes a ansi sequence parser for windows and switchable
	calling conventions depending on the compiler

	vararray support for non-gnu compilers
	actually not really a support for that but a macro
	to create and free variable size buffers using
	the fastest supported method for the given compiler

	little/big endian support and memory allignment fixes
	start to make types checking more tight

	c++ compilable with VC and g++
	the makefiles are for solaris,
	so might need to edit linker options on linux
2005/06/10
	* eA++ will now compile on VC.net 2003. Just prepare the appropriate conf files and run.
	  read the README.txt for notes on compilation. [davidsiaw]
